<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赵KK个人博客第三站</title>
  
  <subtitle>纠结体本体,同步记录日常笔记，Write the code, Change the world！</subtitle>
  <link href="https://zkkget.github.io/atom.xml" rel="self"/>
  
  <link href="https://zkkget.github.io/"/>
  <updated>2022-07-25T07:11:54.562Z</updated>
  <id>https://zkkget.github.io/</id>
  
  <author>
    <name>赵KK</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>主站博客迁移之拒绝解析又臭又长的JSON</title>
    <link href="https://zkkget.github.io/2022/07/25/%E4%B8%BB%E7%AB%99%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%B9%8B%E6%8B%92%E7%BB%9D%E8%A7%A3%E6%9E%90%E5%8F%88%E8%87%AD%E5%8F%88%E9%95%BF%E7%9A%84JSON/"/>
    <id>https://zkkget.github.io/2022/07/25/%E4%B8%BB%E7%AB%99%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%B9%8B%E6%8B%92%E7%BB%9D%E8%A7%A3%E6%9E%90%E5%8F%88%E8%87%AD%E5%8F%88%E9%95%BF%E7%9A%84JSON/</id>
    <published>2022-07-25T07:10:12.000Z</published>
    <updated>2022-07-25T07:11:54.562Z</updated>
    
    <content type="html"><![CDATA[<p>在日常工作中，不管是因为接收前端返回约定格式的JSON字符串，还是因为需要约定格式请求第三方服务，或者需要将前端画像xml解析成JSON，再或者需要接入第三方短信，供应商，数据提供商的JSON数据，或是需要提供对外暴露接口的API，可见解析JSON是一个常见操作。</p><p>JSON是一个轻量级的数据交换格式。</p><p>一：表单数据由数据库实体对象接收</p><p>常见的前后端约定字段，指定字段名称后，由数据库实体接收序列化后的表单数据，无序解析。</p><p>二：JSONObject解析</p><p>前后端约定格式，实体接收String类型，通过JSONObject解析JSON，JSONArray等操作</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">            </span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;createBy&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;createTime&quot;</span>: <span class="number">1521171180000</span>,</span><br><span class="line">        <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;fa fa-gear&quot;</span>,</span><br><span class="line">        <span class="string">&quot;menuId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;menuName&quot;</span>: <span class="string">&quot;系统管理&quot;</span>,</span><br><span class="line">        <span class="string">&quot;menuType&quot;</span>: <span class="string">&quot;M&quot;</span>,</span><br><span class="line">        <span class="string">&quot;orderNum&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;parentId&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;perms&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;target&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;#&quot;</span>,</span><br><span class="line">        <span class="string">&quot;visible&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">            </span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;createBy&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;createTime&quot;</span>: <span class="number">1521171180000</span>,</span><br><span class="line">        <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;fa fa-video-camera&quot;</span>,</span><br><span class="line">        <span class="string">&quot;menuId&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;menuName&quot;</span>: <span class="string">&quot;系统监控&quot;</span>,</span><br><span class="line">        <span class="string">&quot;menuType&quot;</span>: <span class="string">&quot;M&quot;</span>,</span><br><span class="line">        <span class="string">&quot;orderNum&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;parentId&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;perms&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;target&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;#&quot;</span>,</span><br><span class="line">        <span class="string">&quot;visible&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">            </span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;createBy&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;createTime&quot;</span>: <span class="number">1521171180000</span>,</span><br><span class="line">        <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;fa fa-bars&quot;</span>,</span><br><span class="line">        <span class="string">&quot;menuId&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;menuName&quot;</span>: <span class="string">&quot;系统工具&quot;</span>,</span><br><span class="line">        <span class="string">&quot;menuType&quot;</span>: <span class="string">&quot;M&quot;</span>,</span><br><span class="line">        <span class="string">&quot;orderNum&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;parentId&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;perms&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;target&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;#&quot;</span>,</span><br><span class="line">        <span class="string">&quot;visible&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>通过JSONObject以及解析JSONArray获取<br>三：接入第三方API</p><p>接入第三方API，或者按约定调用第三方服务时，你会发现约定了又臭有长的JSON格式，包含特定字段，包含token，包含秘钥，一个详细数据解析接口，上百个字段是常见的，而且多种格式嵌套解析，如果单纯将收到的字符串手动转化成JSONObject，还要判空，还要层层遍历，还要验证数据的有效性，这是在是不小的工作量。</p><p>改造方法：提取最长，覆盖字段最全的作为实体列接收，含有List数据就由List接收，最外层K值由字段接收，涉及类型判断需按约定传不同数值的，定义为枚举，秘钥等特殊Key值MD5加解密传递。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果url是空，则认为是解析历史数据 不需要拼装请求</span></span><br><span class="line">        <span class="keyword">if</span> (url != <span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(url)) &#123;</span><br><span class="line">            Client client = <span class="keyword">new</span> Client();</span><br><span class="line">            Map&lt;String, String&gt; params = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;mobileReli&quot;</span>.equals(interfaceCode)) &#123; <span class="comment">//if类型判断定义为枚举      </span></span><br><span class="line">                String infoJson = String.format(<span class="string">&quot;&#123;\&quot;phone\&quot;:\&quot;%s\&quot;,\&quot;name\&quot;:\&quot;%s\&quot;,\&quot;curDate\&quot;:\&quot;%s\&quot;&#125;&quot;</span>,</span><br><span class="line">                        applyRecord.getPhone(), applyRecord.getName(), applyRecord.getFlashblackDate());</span><br><span class="line">                StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                <span class="keyword">long</span> time = System.currentTimeMillis();<span class="comment">//重复度高的字段由优特实体类接收</span></span><br><span class="line">                sb.append(secret + <span class="string">&quot;!&quot;</span> + appKey + <span class="string">&quot;!&quot;</span> + time + <span class="string">&quot;!&quot;</span> + applyRecord.getName() + <span class="string">&quot;!&quot;</span></span><br><span class="line">                        + applyRecord.getPhone() + <span class="string">&quot;!&quot;</span> + secret + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                sign = hdsClient.md5(sb.toString());</span><br><span class="line">                String param = String.format(<span class="string">&quot;appKey=%s&amp;infoJson=%s&amp;sign=%s&amp;time=%s&quot;</span>, appKey, infoJson, sign, time);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    jsonData = hdsClient.getResult(url, param);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;DSModel&quot;</span>.equals(interfaceCode)) &#123;</span><br><span class="line">                String infoJson = String.format(<span class="string">&quot;&#123;\&quot;mobile\&quot;:\&quot;%s\&quot;,\&quot;name\&quot;:\&quot;%s\&quot;,\&quot;starttime\&quot;:\&quot;%s\&quot;&#125;&quot;</span>,</span><br><span class="line">                        applyRecord.getPhone(), applyRecord.getName(), applyRecord.getFlashblackDate());</span><br><span class="line">                StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">                sb.append(secret + <span class="string">&quot;!&quot;</span> + appKey + <span class="string">&quot;!&quot;</span> + time + <span class="string">&quot;!&quot;</span> + applyRecord.getName() + <span class="string">&quot;!&quot;</span></span><br><span class="line">                        + applyRecord.getPhone() + <span class="string">&quot;!&quot;</span> + applyRecord.getFlashblackDate() + <span class="string">&quot;!&quot;</span> + secret + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                sign = hdsClient.md5(sb.toString());</span><br><span class="line">                String param = String.format(<span class="string">&quot;appKey=%s&amp;infoJson=%s&amp;sign=%s&amp;time=%s&quot;</span>, appKey, infoJson, sign, time);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    jsonData = hdsClient.getResult(url, param);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;addressDetection&quot;</span>.equals(interfaceCode)) &#123;   </span><br><span class="line">                String infoJson = String.format(<span class="string">&quot;&#123;\&quot;phone\&quot;:\&quot;%s\&quot;,\&quot;address\&quot;:\&quot;%s\&quot;,\&quot;curDate\&quot;:\&quot;%s\&quot;&#125;&quot;</span>,</span><br><span class="line">                        applyRecord.getPhone(), applyRecord.getAddress(), applyRecord.getFlashblackDate());</span><br><span class="line">                StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">                sb.append(secret + <span class="string">&quot;!&quot;</span> + appKey + <span class="string">&quot;!&quot;</span> + time + <span class="string">&quot;!&quot;</span> + applyRecord.getPhone() + <span class="string">&quot;!&quot;</span></span><br><span class="line">                        + applyRecord.getAddress() + <span class="string">&quot;!&quot;</span> + applyRecord.getFlashblackDate() + <span class="string">&quot;!&quot;</span> + secret + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                sign = hdsClient.md5(sb.toString());</span><br><span class="line">                String param = String.format(<span class="string">&quot;appKey=%s&amp;infoJson=%s&amp;sign=%s&amp;time=%s&quot;</span>, appKey, infoJson, sign, time);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    jsonData = hdsClient.getResult(url, param);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">InterfaceCodeEnum</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    InterfaceCode1(<span class="number">1</span>,<span class="string">&quot;mobileReli&quot;</span>),</span><br><span class="line">    InterfaceCode2(<span class="number">2</span>,<span class="string">&quot;DSModel&quot;</span>),</span><br><span class="line">    InterfaceCode3(<span class="number">3</span>,<span class="string">&quot;addressDetection&quot;</span>),</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    InterfaceCodeEnum(Integer code, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getNameBycode</span><span class="params">(Integer code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (code == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (InterfaceCodeEnum a : InterfaceCodeEnum.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a.code.equals(code)) &#123;</span><br><span class="line">                <span class="keyword">return</span> a.name;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceCodeResult</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//基础信息</span></span><br><span class="line">    <span class="keyword">private</span> Base base;</span><br><span class="line">    <span class="comment">//秘钥信息</span></span><br><span class="line">    <span class="keyword">private</span> AuthInfo authInfo;</span><br><span class="line">    <span class="comment">//外层字段封装为对象接收</span></span><br><span class="line">    <span class="keyword">private</span> AddressResult  addressResult;</span><br><span class="line">    <span class="comment">//重复多层信息List接收</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Flashblack&gt; flashblack;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当接收到JSON字符串时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">InterfaceCodeResult codeResult=JSONObject.parseObject(InterfaceCodeResult.getRequestInfo(),InterfaceCodeResult.class);</span><br><span class="line">if(PreInterfaceStatus.equals(codeResult.base.getTyep()))&#123;</span><br><span class="line">  return JavaConvertUtil.conversion(codeResult, CodeParams.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅需要判断多个类型即可，对应字段会自动解析，当接收又臭又长的XML解析还需要后端验证时，需要封装Util类进行验证调用</p><p>同步更新至微信公众号，请搜索:赵KK日常技术记录，不定时更新文章内容</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在日常工作中，不管是因为接收前端返回约定格式的JSON字符串，还是因为需要约定格式请求第三方服务，或者需要将前端画像xml解析成JSON，再或者需要接入第三方短信，供应商，数据提供商的JSON数据，或是需要提供对外暴露接口的API，可见解析JSON是一个常见操作。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="JSON" scheme="https://zkkget.github.io/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>项目实战----行政优先级分析</title>
    <link href="https://zkkget.github.io/2022/05/10/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E8%A1%8C%E6%94%BF%E4%BC%98%E5%85%88%E7%BA%A7%E5%88%86%E6%9E%90/"/>
    <id>https://zkkget.github.io/2022/05/10/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E8%A1%8C%E6%94%BF%E4%BC%98%E5%85%88%E7%BA%A7%E5%88%86%E6%9E%90/</id>
    <published>2022-05-10T03:00:00.000Z</published>
    <updated>2022-06-13T06:24:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>在现有地点中解析其地点优先级,最小到区县,当前区县可指定作业优先级,当绑定优先级数据后的数据应在选择时优先展示。</p><h2 id="行政优先级维护"><a href="#行政优先级维护" class="headerlink" title="行政优先级维护"></a>行政优先级维护</h2><p>采用百度地图数据很行行政区域编码维护,考虑到现有数据是人工维护,获取其省市区县可能不准确,所以先根据其经纬度定位后可准确获取其省市区县,然后再进行编码维护。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>地点北京市东城区天安门，百度坐标116.403963,39.915119</p><h2 id="API"><a href="#API" class="headerlink" title="API:"></a>API:</h2><p><a href="https://lbsyun.baidu.com/index.php?title=webapi/district-search">https://lbsyun.baidu.com/index.php?title=webapi/district-search</a><br><a href="https://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad">https://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"> Map&lt;String, String&gt; map = IbsBMapUtils.reverseGeocoding(&quot;116.403963&quot;, &quot;39.915119&quot;);</span><br><span class="line">                String province = map.get(&quot;province&quot;);</span><br><span class="line"></span><br><span class="line">List&lt;IbsBMapUtils.Districts&gt; districts = IbsBMapUtils.regionSearch(province.substring(0, 2));</span><br><span class="line">                for (IbsBMapUtils.Districts district : districts) &#123;</span><br><span class="line">                    DivisionDo divisionDo = new DivisionDo();</span><br><span class="line">                    divisionDo.setProvinceCode(district.getCode());</span><br><span class="line">                    divisionDo.setProvinceName(district.getName());</span><br><span class="line">                    divisionDo.setWarehouseCode(locationConfigDO.getWarehouseCode());</span><br><span class="line">                    List&lt;IbsBMapUtils.Districts&gt; districtsList = district.getDistricts();</span><br><span class="line">                    if (org.apache.commons.collections.CollectionUtils.isNotEmpty(districtsList)) &#123;</span><br><span class="line">                        for (IbsBMapUtils.Districts districts2 : districtsList) &#123;</span><br><span class="line">                            divisionDo.setCityCode(districts2.getCode());</span><br><span class="line">                            divisionDo.setCityName(districts2.getName());</span><br><span class="line">                            List&lt;IbsBMapUtils.Districts&gt; districts3 = districts2.getDistricts();</span><br><span class="line">                            if (org.apache.commons.collections.CollectionUtils.isNotEmpty(districts3)) &#123;</span><br><span class="line">                                for (IbsBMapUtils.Districts district3 : districts3) &#123;</span><br><span class="line">                                    divisionDo.setRegionName(district3.getName());</span><br><span class="line">                                    divisionDo.setRegionCode(district3.getCode());</span><br><span class="line">                                    divisionRepository.insert(divisionDo);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                divisionRepository.insert(divisionDo);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        divisionRepository.insert(divisionDo);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="当前区域指定优先级作业后数据优先展示"><a href="#当前区域指定优先级作业后数据优先展示" class="headerlink" title="当前区域指定优先级作业后数据优先展示"></a>当前区域指定优先级作业后数据优先展示</h2><p>例如北京市有N个区,指定了N个规划路线,当东城区指定了由最近的骑手配送时，则点击东城区商家的配送线路优先展示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">List&lt;MunicipalLevel&gt;  list = MunicipalLevelMapper.selectMunicipalLevelList(&quot;北京市-东城区&quot;);</span><br><span class="line"></span><br><span class="line">       if(CollectionUtils.isEmpty(list))&#123;</span><br><span class="line">           return Collections.emptyList();</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">List&lt;String&gt; riderList = divisionMapper.getRiderByProvince(&quot;11001&quot;, &quot;北京市&quot;,&quot;东城区&quot;);</span><br><span class="line">               //错误实例</span><br><span class="line">if (CollectionUtils.isNotEmpty(riderList)) &#123;</span><br><span class="line">                   for (String riderName : riderList) &#123;</span><br><span class="line">                       List&lt;RirderListResponse&gt; listResponses = list.stream().filter(vo -&gt; StringUtils.isNotEmpty(vo.getRirderName()) &amp;&amp; vo.getRiderName().equals(riderName)).collect(Collectors.toList());</span><br><span class="line">                       if (CollectionUtils.isNotEmpty(listResponses)) &#123;</span><br><span class="line">                           for (int i = 0; i &lt; listResponses.size(); i++) &#123;</span><br><span class="line">                               RirderListResponse response = listResponses.get(i);</span><br><span class="line">                               final List l = list;</span><br><span class="line">                               l.set(i, l.set(j, l.get(i)));</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       log.warn(&quot;响应&#123;&#125;&quot;, JSONObject.toJSONString(list));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="bug修复"><a href="#bug修复" class="headerlink" title="bug修复"></a>bug修复</h2><p>当前查询出东城区绑定优先级为1.2.3.4时，查询出来的顺序更新索引位置会变为4.3.2.1，且考虑到list会多个且可重复重新更改代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">List&lt;MunicipalLevel&gt;  list = MunicipalLevelMapper.selectMunicipalLevelList(&quot;北京市-东城区&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       if(CollectionUtils.isEmpty(list))&#123;</span><br><span class="line">           return Collections.emptyList();</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">              List&lt;String&gt; riderList = divisionMapper.getRiderByProvince(&quot;11001&quot;, &quot;北京市&quot;,&quot;东城区&quot;);</span><br><span class="line">               riderList = riderList.stream().filter(item -&gt; responseList.stream().map(RouteListResponse::getName).collect(Collectors.toList()).contains(item)).collect(Collectors.toList());</span><br><span class="line">               Collections.reverse(riderList);</span><br><span class="line">                   Collections.reverse(riderList);</span><br><span class="line">                   for (int i = 0; i &lt; riderList.size(); i++) &#123;</span><br><span class="line">                       for (MunicipalLevel res : list) &#123;</span><br><span class="line">                           if(res.getName().equals(riderList.get(i)))&#123;</span><br><span class="line">                               Collections.swap(list, list.indexOf(res), i);</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">       &#125;         </span><br><span class="line">           </span><br></pre></td></tr></table></figure><h2 id="bug再次修复终极版"><a href="#bug再次修复终极版" class="headerlink" title="bug再次修复终极版"></a>bug再次修复终极版</h2><p>当存在多个优先级相同的区域路线时，会因为本身在list的位置不同，导致最后只有第一个正确，其他元素位置不正确</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">if(CollectionUtils.isEmpty(list))&#123;</span><br><span class="line">            return Collections.emptyList();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">              // List&lt;String&gt; riderList = divisionMapper.getRiderByProvince(&quot;11001&quot;, &quot;北京市&quot;,&quot;东城区&quot;);</span><br><span class="line">                //riderList = riderList.stream().filter(item -&gt; responseList.stream().map(RouteListResponse::getName).collect(Collectors.toList()).contains(item)).collect(Collectors.toList());</span><br><span class="line">                    //Collections.reverse(riderList);</span><br><span class="line">                    //借助外部元素记录交换元素位置</span><br><span class="line">                    if (CollectionUtils.isNotEmpty(supplierList)) &#123;</span><br><span class="line">                    int a = 0 ;</span><br><span class="line">                    for (int i = 0; i &lt; riderList.size(); i++) &#123;</span><br><span class="line">                        for (MunicipalLevel res : list) &#123;</span><br><span class="line">                            if(res.getName().equals(riderList.get(i)))&#123;</span><br><span class="line">                                Collections.swap(list, list.indexOf(res), i);</span><br><span class="line">                                a++;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class=&quot;headerlink&quot; title=&quot;需求分析&quot;&gt;&lt;/a&gt;需求分析&lt;/h2&gt;&lt;p&gt;在现有地点中解析其地点优先级,最小到区县,当前区县可指定作业优先级,当绑定优先级数据后的数据应在选择时优先展示。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="实战" scheme="https://zkkget.github.io/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>mysql中的锁表语句查看方法汇总</title>
    <link href="https://zkkget.github.io/2022/04/28/mysql%E4%B8%AD%E7%9A%84%E9%94%81%E8%A1%A8%E8%AF%AD%E5%8F%A5%E6%9F%A5%E7%9C%8B%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/"/>
    <id>https://zkkget.github.io/2022/04/28/mysql%E4%B8%AD%E7%9A%84%E9%94%81%E8%A1%A8%E8%AF%AD%E5%8F%A5%E6%9F%A5%E7%9C%8B%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/</id>
    <published>2022-04-28T08:48:51.000Z</published>
    <updated>2022-05-07T03:13:42.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show status like <span class="string">&#x27;Table%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">+----------------------------+----------+</span><br><span class="line"></span><br><span class="line">| Variable_name        | Value |</span><br><span class="line"></span><br><span class="line">+----------------------------+----------+</span><br><span class="line"></span><br><span class="line">| Table_locks_immediate | <span class="number">105</span>         |</span><br><span class="line"></span><br><span class="line">| Table_locks_waited   | <span class="number">3</span>           |</span><br><span class="line"></span><br><span class="line">+----------------------------+----------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Table_locks_immediate    26839653<br>Table_locks_waited            0<br>Table_open_cache_hits    3<br>Table_open_cache_misses    2<br>Table_open_cache_overflows    2</p><p>Table_locks_immediate  指的是能够立即获得表级锁的次数</p><p>Table_locks_waited  指的是不能立即获取表级锁而需要等待的次数</p><p>Table_open_cache_hits  表缓存被命中的次数</p><p>Table_open_cache_misses 表缓存未被命中的次数</p><p>Table_open_cache_overflows  就是上面说的淘汰的instance（table cache）的数量</p><p>查看正在被锁定的的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">OPEN</span> TABLES <span class="keyword">where</span> In_use <span class="operator">&gt;</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>怎么查找mysql中的锁表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> processlist;</span><br><span class="line">与<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.processlist效果相同</span><br></pre></td></tr></table></figure><p>SHOW PROCESSLIST显示哪些线程正在运行。您也可以使用mysqladmin processlist语句得到此信息。如果您有SUPER权限，您可以看到所有线程。否则，您只能看到您自己的线程（也就是，与您正在使用的MySQL账户相关的线程）。如果有线程在update或者insert 某个表，此时进程的status为updating 或者 sending data。<br>show processlist 是显示用户正在运行的线程，需要注意的是，除了 root 用户能看到所有正在运行的线程外，其他用户都只能看到自己正在运行的线程，看不到其它用户正在运行的线程。除非单独个这个用户赋予了PROCESS 权限<br>– 查看那些表锁到了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">OPEN</span> TABLES <span class="keyword">where</span> In_use <span class="operator">&gt;</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>– 查看进程号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> processlist;</span><br></pre></td></tr></table></figure><p>–删除进程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill <span class="number">1085850</span>；</span><br></pre></td></tr></table></figure><p> <img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/mysql.png" alt="流程"></p><p>Id: 就是这个线程的唯一标识，当我们发现这个线程有问题的时候，可以通过 kill 命令，加上这个Id值将这个线程杀掉。前面我们说了show processlist 显示的信息时来自information_schema.processlist 表，所以这个Id就是这个表的主键。<br>User: 就是指启动这个线程的用户。<br>Host: 记录了发送请求的客户端的 IP 和 端口号。通过这些信息在排查问题的时候，我们可以定位到是哪个客户端的哪个进程发送的请求。<br>DB: 当前执行的命令是在哪一个数据库上。如果没有指定数据库，则该值为 NULL 。<br>Command: 是指此刻该线程正在执行的命令。这个很复杂，下面单独解释<br>Time: 表示该线程处于当前状态的时间。<br>State: 线程的状态，和 Command 对应，下面单独解释。<br>Info: 一般记录的是线程执行的语句。默认只显示前100个字符，也就是你看到的语句可能是截断了的，要看全部信息，需要使用 show full processlist。<br>下面我们单独看一下 Command 的值：<br>Binlog Dump: 主节点正在将二进制日志 ，同步到从节点<br>Change User: 正在执行一个 change-user 的操作<br>Close Stmt: 正在关闭一个Prepared Statement 对象<br>Connect: 一个从节点连上了主节点<br>Connect Out: 一个从节点正在连主节点<br>Create DB: 正在执行一个create-database 的操作<br>Daemon: 服务器内部线程，而不是来自客户端的链接<br>Debug: 线程正在生成调试信息<br>Delayed Insert: 该线程是一个延迟插入的处理程序<br>Drop DB: 正在执行一个 drop-database 的操作<br>Execute: 正在执行一个 Prepared Statement<br>Fetch: 正在从Prepared Statement 中获取执行结果<br>Field List: 正在获取表的列信息<br>Init DB: 该线程正在选取一个默认的数据库<br>Kill : 正在执行 kill 语句，杀死指定线程<br>Long Data: 正在从Prepared Statement 中检索 long data<br>Ping: 正在处理 server-ping 的请求<br>Prepare: 该线程正在准备一个 Prepared Statement<br>ProcessList: 该线程正在生成服务器线程相关信息<br>Query: 该线程正在执行一个语句<br>Quit: 该线程正在退出<br>Refresh：该线程正在刷表，日志或缓存；或者在重置状态变量，或者在复制服务器信息<br>Register Slave： 正在注册从节点<br>Reset Stmt: 正在重置 prepared statement<br>Set Option: 正在设置或重置客户端的 statement-execution 选项<br>Shutdown: 正在关闭服务器<br>Sleep: 正在等待客户端向它发送执行语句<br>Statistics: 该线程正在生成 server-status 信息<br>Table Dump: 正在发送表的内容到从服务器<br>Time: Unused</p><p>那么MySQL突然飙升,首先查询当下主库内正在运行的线程以及是否有占用资源的SQL。然后执行分析info语句，看此次SQL是否是新发版功能引起，如果是新功能引起，立即回滚。</p><p>– 查询非 Sleep 状态的链接，按消耗时间倒序展示，自己加条件过滤</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id, db, <span class="keyword">user</span>, host, command, <span class="type">time</span>, state, info</span><br><span class="line"><span class="keyword">from</span> information_schema.processlist</span><br><span class="line"><span class="keyword">where</span> command <span class="operator">!=</span> <span class="string">&#x27;Sleep&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="type">time</span> <span class="keyword">desc</span> </span><br></pre></td></tr></table></figure><p>其次查看CAT，但是CAT中除了Heartbeat报表GC异常以外，只有一条一分钟的SQL，并没有其他超时SQL</p><p>然后查看Grafana可以看到飙升时间在7点18分</p><p>在这个时间段查询PMM</p><p>没有异常，但是在其他服务中查询到有长达10分钟SQL未返回。</p><p>运行show full processlist命令查看是否有线程递增的情况</p><p>查询发现每一秒都有一个SQL在查询，经过代码分析，是某个接口前端轮询调用每秒都在进行查询导致的，没想到一个查询频率超高的SQL能导致CPU超高</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=90978812&cid=155358422&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;" ></iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
    <category term="MySQL" scheme="https://zkkget.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>人工智能vs人工智障之图片识别</title>
    <link href="https://zkkget.github.io/2022/04/07/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BDvs%E4%BA%BA%E5%B7%A5%E6%99%BA%E9%9A%9C%E4%B9%8B%E5%9B%BE%E7%89%87%E8%AF%86%E5%88%AB/"/>
    <id>https://zkkget.github.io/2022/04/07/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BDvs%E4%BA%BA%E5%B7%A5%E6%99%BA%E9%9A%9C%E4%B9%8B%E5%9B%BE%E7%89%87%E8%AF%86%E5%88%AB/</id>
    <published>2022-04-07T08:04:30.000Z</published>
    <updated>2022-04-21T05:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>从车牌识别到图片的相似度处理。开始的目的是识别车牌，以供研究opencv的,在接触车牌的识别的过程中,接触到java的tess4j以及java整合opencv的过程,但是车牌识别效率很低。人为识别是很清晰的但是仍然解析不出来。</p><h2 id="1-Tess4j"><a href="#1-Tess4j" class="headerlink" title="1.Tess4j"></a>1.Tess4j</h2><p>引入依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/net.sourceforge.tess4j/tess4j --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;net.sourceforge.tess4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;tess4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.4</span><span class="number">.8</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>下载中文检索所需包否则会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please make sure the TESSDATA_PREFIX environment variable is set to your “tessdata” directory</span><br></pre></td></tr></table></figure><p>我是直接在gitee拉下来的包手动添加的<br><a href="https://gitee.com/it_moon/tessdata?_from=gitee_search">https://gitee.com/it_moon/tessdata?_from=gitee_search</a></p><h2 id="2-Demo"><a href="#2-Demo" class="headerlink" title="2.Demo"></a>2.Demo</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建实例</span></span><br><span class="line">       ITesseract instance = <span class="keyword">new</span> Tesseract();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置识别语言</span></span><br><span class="line"></span><br><span class="line">       instance.setLanguage(<span class="string">&quot;chi_sim&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置识别引擎</span></span><br><span class="line"></span><br><span class="line">       instance.setOcrEngineMode(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取文件</span></span><br><span class="line"></span><br><span class="line">       BufferedImage image = ImageIO.read(TestTextOcr.class.getResourceAsStream(<span class="string">&quot;/2.jpg&quot;</span>));</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 识别</span></span><br><span class="line">           String result = instance.doOCR(image);</span><br><span class="line">           System.out.println(result);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (TesseractException e) &#123;</span><br><span class="line">           System.err.println(e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>车牌识别对应EL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String el =&quot;/^[京津晋冀蒙辽吉黑沪苏浙皖闽赣鲁豫鄂湘粤桂琼渝川贵云藏陕甘青宁新][ABCDEFGHJKLMNPQRSTUVWXY][\\dABCDEFGHJKLNMxPQRSTUVWXYZ]&#123;5&#125;$/&quot;;</span><br></pre></td></tr></table></figure><p>但是识别效率很低很低<br>参考其他的识别算法仍然识别不出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws TesseractException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        ITesseract instance = new Tesseract();</span><br><span class="line">        //如果未将tessdata放在根目录下需要指定绝对路径</span><br><span class="line">        //设置训练库的位置</span><br><span class="line">        //instance.setDatapath(&quot;the absolute path of tessdata&quot;);</span><br><span class="line"></span><br><span class="line">        //如果需要识别英文之外的语种，需要指定识别语种，并且需要将对应的语言包放进项目中</span><br><span class="line">        // chi_sim ：简体中文， eng    根据需求选择语言库</span><br><span class="line">        instance.setLanguage(&quot;chi_sim&quot;);</span><br><span class="line"></span><br><span class="line">        // 指定识别图片</span><br><span class="line">        instance.setOcrEngineMode(0);</span><br><span class="line">        long startTime = System.currentTimeMillis();</span><br><span class="line">        String ocrResultNew = dealImage(&quot;C:\\Users\\Admin\\Desktop\\9-160514164SDY.jpg&quot;);</span><br><span class="line">        File imgDir = new File(ocrResultNew);</span><br><span class="line">        String ocrResult = instance.doOCR(imgDir);</span><br><span class="line">        String el =&quot;/^[京津晋冀蒙辽吉黑沪苏浙皖闽赣鲁豫鄂湘粤桂琼渝川贵云藏陕甘青宁新][ABCDEFGHJKLMNPQRSTUVWXY][\\dABCDEFGHJKLNMxPQRSTUVWXYZ]&#123;5&#125;$/&quot;;</span><br><span class="line">        System.out.println(&quot;识别结果: \n&quot; + ocrResult + &quot;\n 耗时：&quot; + (System.currentTimeMillis() - startTime) + &quot;ms&quot;);</span><br><span class="line">        if(ocrResult.matches(el))&#123;</span><br><span class="line">            // 输出识别结果</span><br><span class="line">            System.out.println(&quot;识别结果: \n&quot; + ocrResult + &quot;\n 耗时：&quot; + (System.currentTimeMillis() - startTime) + &quot;ms&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            log.error(&quot;车牌识别有误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后我开始搜索java结合opencv的项目，但是仍然识别失败。<br>识别过程为：识别切图–&gt;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从车牌识别到图片的相似度处理。开始的目的是识别车牌，以供研究opencv的,在接触车牌的识别的过程中,接触到java的tess4j以及java整合opencv的过程,但是车牌识别效率很低。人为识别是很清晰的但是仍然解析不出来。&lt;/p&gt;
&lt;h2 id=&quot;1-Tess4j&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="opencv" scheme="https://zkkget.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>Springboot+Netty仿微信实战设计文档</title>
    <link href="https://zkkget.github.io/2022/03/31/Springboot-netty%E4%BB%BF%E5%BE%AE%E4%BF%A1%E5%AE%9E%E6%88%98%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/"/>
    <id>https://zkkget.github.io/2022/03/31/Springboot-netty%E4%BB%BF%E5%BE%AE%E4%BF%A1%E5%AE%9E%E6%88%98%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/</id>
    <published>2022-03-31T09:28:57.000Z</published>
    <updated>2022-03-31T09:46:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>日期：2021-12-28<br>版本号：1.0.0<br>作者：kk</p><p>1   编写目的<br> 1.1    术语与定义<br> 1.2    引用标准和规范<br> 1.3    参考资料<br>2    系统总体框架<br> 2.1    设计目标<br> 2.2    总体技术路线<br> 2.3    架构概览<br> 2.3.1    架构总览图<br> 2.3.2    功能一览图<br>3功能展示</p><p>1.1编写目的</p><p>体验APP通讯,实现聊天功能以及聊天项目的设计思路，选用高性能传输非阻塞的netty框架进行开发,秒级响应</p><p>接入websocket技术应用聊天消息的已读未读，还有聊天消息的测试与联调</p><p>Netty心跳检测机制</p><p>云服务器构建项目，引入CICD，以及Devops构建,接入监控体系，一秒钟定位异常</p><p>针对登陆不同场景，结合桥接模式进行项目改造，代码review<br>1.2 术语与定义<br>Netty：Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients.<br>NLP:自然语言处理(NLP，Natural Language Processing) 是研究人与计算机交互的语言问题的一门学科。按照技术实现难度的不同，这类系统可以分成简单匹配式、模糊匹配式和段落理解式三种类型。<br>推荐系统：帮助用户找到想要的商品</p><p>1.3 引用标准和规范<br>1.阿里巴巴开发规范<br>2.接口使用规范<br>3.开发过程规范<br>4.异常管理规范<br>1.4参考资料<br>《阿里巴巴开发规范》–阿里官方Java代码规范标准<br>Netty实战</p><p>2系统总体框架<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E6%94%B9%E7%AD%BE%E6%B5%81%E7%A8%8Bv1.1%20(1).png" alt="流程"><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E6%B5%81%E7%A8%8Bv1.1.jpg" alt="流程"><br>2.1设计目标<br>目标：旨在模拟微信APP体验实时通讯理念,秒级响应用户请求，由前后端统一处理消息，模拟从登陆/注册-&gt;用户个人信息维护-&gt;交友聊天等主流程。<br>玩转云服务器，从容面对IM聊天业务，延伸场景:自住回复机器人等。<br>技术扩展<br>1.登陆：用户登陆保存用户信息到缓存，以便用户第二次打开app可实现不输入密码登陆，并对密码进行MD5加密。<br>2.登陆时生成全局唯一id，根据id的调用谷歌的com.google.zxing.BarcodeFormat生成个人二维码并进行保存，当加好友，扫一扫时可进行唯一id判断来添加维护好友关系。<br>3.登陆后可进行个人信息维护，角色管理，查看数据，页面配置，黑名单管理等，朋友圈既是一个社区型评论功能化系统，可进行功能复用。<br>4.站在业务角度分析一次聊天事件的流程<br>5.当出现用户群后，根据DSSM模型分析用户行为。<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/dssm.png" alt="流程"><br>6.Netty源码解读<br>7.云服务项目部署<br>2.2总体技术路线<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF.png" alt="流程"><br>2.3系统架构<br>1、以业务分析为输入，以总体的企业应用架构为原则，按着不同区域划分，由于本次基础以聊天业务为入口，侧重点不同，在此不做分析。<br>2、业务可配置性实时变化，引入apollo<br>3、定位用户ip，上传用户真实ip定位用户位置，引入iP2region，举例说明：即为了用户的隐私安全，定位用户的位置，第一时间定位报警用户行为的位置。<br>4、随着公司的业务的不断发展，当基础的系统逐步成型以后。业务运营就需要开始做⽤户的拉新和促活,从⽽保障 DUA 的增速以及最终 ROI 转换<br>3.功能展示<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220110164204.png" alt="流程"><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220110164157.png" alt="流程"><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220110164201.png" alt="流程"><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220110164204.png" alt="流程"><br>4.延伸问题：DSSM(Deep Structured Semantic Models)<br>也叫深度语义匹配模型，最早是微软发表的一篇应用于NLP领域中计算语义相似度任务的文章。深度语义匹配模型当用户量达到一定群体，分析用户行为，精准推送用户广告，喜好分析等成了我们不可或缺的一个话题。通过打标签，关联分组，给不同数据源的关联，这里涉及到两种建模：一种是自然兴趣建模，根据用户操作终端行为获得user-item关联，给不同的数据源打标获得item-tag关联，最后将上面两种关联进行join操作得到user-tag的关联实现给用户打上兴趣标签，这里相当于是从标签维度为广告主推荐人群；另一种就是商业兴趣建模，在自然兴趣建模的基础上，从广告维度为广告主推荐人群，那么就需要目前大火的DSSM双塔模型了。<br>那么平时最多的用户喜好数据来源哪里？<br>1.输入法<br>输入搜素引擎：根据用户的每日输入词都可推算你的历史组词，当然可分析此行为找出关联性最多的词组进行特征分析，将用户标签、用户属性、项目属性、用户操作行为、聚类算法、基于用户、基于项目、基于内容等混合推荐。<br>2.点击日志<br>短视频平台/海量曝光日志，根据用户多次点击的同tag类视频进行爱好分析，比如滑雪视频，你点击一次，首页就会出现多篇推荐，然后在产生一次点击，就会源源不断的进行推荐<br>其实第一次看这篇论文的时候，有点云里雾里，我不得不再次进行阅读，但结合推荐系统来看更容理解，推荐算法大致可以分为以下几类<br>基于流行度的算法<br>协同过滤算法<br>基于内容的算法<br>基于模型的算法<br>混合算法<br>在次就不展开讨论，只个人结合资料查阅，而DSSM更像是在基于模型的基础上，完成推荐任务，跟分治算法，回溯算法等不谋而合<br>5.朋友圈设计：点赞+评论<br>结合社区内容设计，将朋友圈视为新的一个tab展示，并将社区属性的评论与点赞进行集成展示。<br>对于点赞和评论的博文可参考个人公众号文章<br>点赞功能设计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//mp.weixin.qq.com/s?__biz=Mzg2ODA3NjA1MA==&amp;mid=2247484981&amp;idx=1&amp;sn=569bc3d748026dd8c2814e33a3e916d0&amp;chksm=ceb09948f9c7105e203e09e4bb1d30de17bba55a68f7d4df71ccb55c8e34871e2b02b7a1f9ed&amp;token=889485161&amp;lang=zh_CN#rd</span></span><br></pre></td></tr></table></figure><p>本次着重介绍评论系统<br>1.使用递归开发评论功能，并改造为极简循环调用，防止递归层次太深<br>大多数的评论功能可<br>1、单一消息体：分为主评论，然后层级下逐一排列回复，消息体之间一对多<br>2、嵌套消息体：即分为主评论，层级以下可互相回复评论，但展示层级是在同为第二层(着重解释)<br>3、套娃消息体：即可对每条评论进行回复，除主消息体外，都视为第二层，且可对第二层消息体进行回复，每次回复视为一层，消息体为一对多中的多又是一对多~</p><h1 id="单一消息体"><a href="#单一消息体" class="headerlink" title="单一消息体"></a>单一消息体</h1><p>数据库设计：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CREATE TABLE `comment_msg` (</span><br><span class="line">  `id` varchar(<span class="number">64</span>) NOT NULL,</span><br><span class="line">  `send_user_id` varchar(<span class="number">64</span>) NOT NULL,</span><br><span class="line">  `accept_user_id` varchar(<span class="number">64</span>) NOT NULL,</span><br><span class="line">  `msg` varchar(<span class="number">255</span>) NOT NULL,</span><br><span class="line">  `sign_flag` <span class="keyword">int</span>(<span class="number">1</span>) NOT NULL COMMENT <span class="string">&#x27;消息是否签收状态\r\n1：签收\r\n0：未签收\r\n&#x27;</span>,</span><br><span class="line">  `create_time` datetime NOT NULL COMMENT <span class="string">&#x27;发送请求的事件&#x27;</span>,</span><br><span class="line">  <span class="function">PRIMARY <span class="title">KEY</span> <span class="params">(`id`)</span></span></span><br><span class="line"><span class="function">) ENGINE</span>=InnoDB DEFAULT CHARSET=utf8mb4</span><br></pre></td></tr></table></figure><p>即展示所有主题评论下的所有评论即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from comment_msg where send_user_id=#&#123;send_user_id&#125;</span><br></pre></td></tr></table></figure><h1 id="嵌套消息体"><a href="#嵌套消息体" class="headerlink" title="嵌套消息体"></a>嵌套消息体</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;日期：2021-12-28&lt;br&gt;版本号：1.0.0&lt;br&gt;作者：kk&lt;/p&gt;
&lt;p&gt;1   编写目的&lt;br&gt; 1.1    术语与定义&lt;br&gt; 1.2    引用标准和规范&lt;br&gt; 1.3    参考资料&lt;br&gt;2    系统总体框架&lt;br&gt; 2.1    设计目标&lt;br</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>还在手动写单元测试？</title>
    <link href="https://zkkget.github.io/2022/02/07/%E8%BF%98%E5%9C%A8%E6%89%8B%E5%8A%A8%E5%86%99%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://zkkget.github.io/2022/02/07/%E8%BF%98%E5%9C%A8%E6%89%8B%E5%8A%A8%E5%86%99%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</id>
    <published>2022-02-07T06:54:05.000Z</published>
    <updated>2022-02-09T06:04:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JUnitGenerator安装"><a href="#JUnitGenerator安装" class="headerlink" title="JUnitGenerator安装"></a>JUnitGenerator安装</h1><p>在Idea市场里安装JUnitGenerator插件如图，重启后生效<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/junit1.png" alt="流程"></p><h1 id="设置生成路径及模板"><a href="#设置生成路径及模板" class="headerlink" title="设置生成路径及模板"></a>设置生成路径及模板</h1><p>Output Path: ${SOURCEPATH}/..//../test/java/${PACKAGE}/${FILENAME}<br>注：根据实际项目结构调整，设置为默认模板，另需要在Project Structure–&gt;Modules中设置Test文件目录，可改造为自启动，随容器启动，<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/junit2.png" alt="流程"></p><h1 id="设置Junit4-生成模板"><a href="#设置Junit4-生成模板" class="headerlink" title="设置Junit4 生成模板"></a>设置Junit4 生成模板</h1><p>支持 CommonResponse 或  Wrapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">#macro (cap $strIn)$strIn.valueOf($strIn.charAt(<span class="number">0</span>)).toUpperCase()$strIn.substring(<span class="number">1</span>)#end </span><br><span class="line">#foreach ($entry in $entryList) </span><br><span class="line">#set( $testClass=<span class="string">&quot;$&#123;entry.className&#125;Test&quot;</span>) </span><br><span class="line"><span class="keyword">package</span> $entry.packageName; </span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test; </span><br><span class="line"><span class="keyword">import</span> org.junit.Before; </span><br><span class="line"><span class="keyword">import</span> org.junit.After; </span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BSF+Junit4</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Creator</span> zhaokk</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateDate</span> $&#123;Date&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DESC</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $<span class="title">testClass</span> </span>&#123; </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">final</span> String ipAndPort=<span class="string">&quot;localhost:8080/&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String token=<span class="string">&quot;login-token&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String extend = <span class="string">&quot;extend&quot;</span>;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HttpHeaders requestHeaders;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        requestHeaders = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        requestHeaders.add(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">        requestHeaders.add(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        JunitUtils.setRequestHeaders(requestHeaders);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#foreach($method in $entry.methodList) </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * Method: $method.signature </span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> test#cap($&#123;method.name&#125;)() <span class="keyword">throws</span> Exception &#123; </span><br><span class="line">        <span class="comment">//Make request</span></span><br><span class="line">        TestEntity testEntity=JunitUtils.checkRequest(ipAndPort,token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Show Controller &amp; Mehtod</span></span><br><span class="line">        <span class="comment">//FIXME new $entry.packageName.$&#123;entry.className&#125;().$&#123;method.name&#125;();</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Model 1 (Parameter is url)</span></span><br><span class="line">        <span class="comment">//Map&lt;String,String&gt; objectRequest=new HashMap();</span></span><br><span class="line">        <span class="comment">//objectRequest.put(&quot;&#123;id&#125;&quot;,&quot;1000000157729&quot;);</span></span><br><span class="line">        <span class="comment">//testEntity.setRequestObj(objectRequest);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Model 2 (Parameter is Object)</span></span><br><span class="line">        <span class="comment">//UserLoginReq objectRequest = new UserLoginReq();//JSON.parseObject(&quot;jsonString&quot;,UserLoginReq.class)</span></span><br><span class="line">        <span class="comment">//objectRequest.setUsername(&quot;18311140968&quot;);</span></span><br><span class="line">        <span class="comment">//objectRequest.setPassword(&quot;aa123456&quot;);</span></span><br><span class="line">        <span class="comment">//testEntity.setRequestObj(objectRequest);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Model 3 (Parameter is url &amp; Object)</span></span><br><span class="line">        <span class="comment">//Map&lt;String,String&gt; urlMap=new HashMap();</span></span><br><span class="line">        <span class="comment">//urlMap.put(&quot;&#123;pageNo&#125;&quot;,&quot;1&quot;);</span></span><br><span class="line">        <span class="comment">//urlMap.put(&quot;&#123;pageSize&#125;&quot;,&quot;10&quot;);</span></span><br><span class="line"><span class="comment">//UserLoginReq objectRequest = new UserLoginReq();//JSON.parseObject(&quot;jsonString&quot;,UserLoginReq.class)</span></span><br><span class="line">        <span class="comment">//objectRequest.setUsername(&quot;18311140968&quot;);</span></span><br><span class="line">        <span class="comment">//objectRequest.setPassword(&quot;aa123456&quot;);</span></span><br><span class="line">        <span class="comment">//testEntity.setRequestObj(objectRequest);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//model 1  and model 2 (ResponseEntity)</span></span><br><span class="line">        ResponseEntity&lt;CommonResponse&gt; responseResponseEntity=JunitUtils.getResponseEntity(testEntity);</span><br><span class="line"></span><br><span class="line"><span class="comment">//model 3 (ResponseEntity)</span></span><br><span class="line">        <span class="comment">//ResponseEntity&lt;CommonResponse&gt; responseResponseEntity=JunitUtils.getResponseEntity(urlMap,testEntity);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//ResponseEntity To Object</span></span><br><span class="line">        <span class="comment">//CommonResponse&lt;UserResp&gt; response = responseResponseEntity.getBody();</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Check CommonResponse code is 200000</span></span><br><span class="line">        JunitUtils.checkResponse(responseResponseEntity.getBody());</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">#end </span><br><span class="line"></span><br><span class="line">#foreach($method in $entry.privateMethodList) </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* Method: $method.signature </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> test#cap($&#123;method.name&#125;)() <span class="keyword">throws</span> Exception &#123; </span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> Test goes here... </span></span><br><span class="line">#foreach($string in $method.reflectionCode) </span><br><span class="line">$string </span><br><span class="line">#end </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">#end </span><br><span class="line">&#125; </span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">代码块<span class="number">1</span>：根据ipAndPort和token 拼装基础的URL和请求头</span><br><span class="line">代码块<span class="number">2</span>：工具块，方便快速跳转到本方法的源头</span><br><span class="line">代码块<span class="number">3</span>：模式<span class="number">1</span>参数封装，一般用于GET 和DELETE 请求，纯URL</span><br><span class="line">代码块<span class="number">4</span>：模式<span class="number">2</span>参数封装，一般用于POST和PUT 请求，纯对象。支持Json字符串，如下：</span><br><span class="line">         UpdateUserByPKReq objectRequest = JunitUtils.jsonToObject(<span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;接口测试-勿删\&quot;,\&quot;userNumber\&quot;:\&quot;1573195928331\&quot;&quot;</span>,UpdateUserByPKReq.class);</span><br><span class="line">          </span><br><span class="line">代码块<span class="number">5</span>：模式<span class="number">1</span>和模式<span class="number">2</span>的组合，拼装URL+对象</span><br><span class="line">代码块<span class="number">6</span>：适用于模式<span class="number">1</span>和模式<span class="number">2</span>，进行具体的请求并获得响应结果</span><br><span class="line">代码块<span class="number">7</span>：适用于模式<span class="number">3</span>，进行具体的请求并获得响应结果</span><br><span class="line">代码块<span class="number">8</span>：检查响应结果，默认<span class="number">200000</span>为成功，如果非<span class="number">200000</span>失败。如有多个状态码均为成功，可以增加成功状态码进行入参，</span><br><span class="line">         如下：JunitUtils.checkResponse(responseResponseEntity.getBody(),<span class="number">600220</span>)</span><br></pre></td></tr></table></figure><p>这里可自行改造为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaokk</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> $&#123;Date&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = com.xxx.class)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line">workspace.xml中加入</span><br><span class="line">&lt;component name=<span class="string">&quot;PropertiesComponent&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;dynamic.classpath&quot;</span> value=<span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line">&lt;!--  --&gt;</span><br></pre></td></tr></table></figure><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/junit3.png" alt="流程"></p><h1 id="不知道大家有没有用有道云笔记的没有，经常性的新打开的笔记会在首行，但除了阅读之外，应该在最后一行继续编辑，所有大多情况下需要鼠标滑动到行尾，搜索过很多方法，不如Ctrl-A，然后→右箭头好用。mark"><a href="#不知道大家有没有用有道云笔记的没有，经常性的新打开的笔记会在首行，但除了阅读之外，应该在最后一行继续编辑，所有大多情况下需要鼠标滑动到行尾，搜索过很多方法，不如Ctrl-A，然后→右箭头好用。mark" class="headerlink" title="不知道大家有没有用有道云笔记的没有，经常性的新打开的笔记会在首行，但除了阅读之外，应该在最后一行继续编辑，所有大多情况下需要鼠标滑动到行尾，搜索过很多方法，不如Ctrl+A，然后→右箭头好用。mark"></a>不知道大家有没有用有道云笔记的没有，经常性的新打开的笔记会在首行，但除了阅读之外，应该在最后一行继续编辑，所有大多情况下需要鼠标滑动到行尾，搜索过很多方法，不如Ctrl+A，然后→右箭头好用。mark</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JUnitGenerator安装&quot;&gt;&lt;a href=&quot;#JUnitGenerator安装&quot; class=&quot;headerlink&quot; title=&quot;JUnitGenerator安装&quot;&gt;&lt;/a&gt;JUnitGenerator安装&lt;/h1&gt;&lt;p&gt;在Idea市场里安装JUni</summary>
      
    
    
    
    
    <category term="JunitTest" scheme="https://zkkget.github.io/tags/JunitTest/"/>
    
  </entry>
  
  <entry>
    <title>强大的Servlet</title>
    <link href="https://zkkget.github.io/2022/01/27/%E5%BC%BA%E5%A4%A7%E7%9A%84Servlet/"/>
    <id>https://zkkget.github.io/2022/01/27/%E5%BC%BA%E5%A4%A7%E7%9A%84Servlet/</id>
    <published>2022-01-27T01:45:49.000Z</published>
    <updated>2022-05-07T03:02:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="If-I-have-seen-further-it-is-by-standing-on-the-shoulders-of-giants"><a href="#If-I-have-seen-further-it-is-by-standing-on-the-shoulders-of-giants" class="headerlink" title="If I have seen further, it is by standing on the shoulders of giants"></a>If I have seen further, it is by standing on the shoulders of giants</h4><h4 id="如果我比别人看得更远，那是因为我站在巨人的肩膀上"><a href="#如果我比别人看得更远，那是因为我站在巨人的肩膀上" class="headerlink" title="如果我比别人看得更远，那是因为我站在巨人的肩膀上"></a>如果我比别人看得更远，那是因为我站在巨人的肩膀上</h4><h3 id="如今回头看下Servlet不仅如此强大，还具有很强烈的参考意义，能在现如今流行的大部分框架中找到它的影子。下面文章不止与探索Servlet，可能在其中穿插其他的关联知识点，旨在能从此次的学习中获取更多的知识点参考资料总结，转化为自己的理解输出-在文中我尽量以截图-复制全限定类名的方式记录，以便感兴趣的再次查找。"><a href="#如今回头看下Servlet不仅如此强大，还具有很强烈的参考意义，能在现如今流行的大部分框架中找到它的影子。下面文章不止与探索Servlet，可能在其中穿插其他的关联知识点，旨在能从此次的学习中获取更多的知识点参考资料总结，转化为自己的理解输出-在文中我尽量以截图-复制全限定类名的方式记录，以便感兴趣的再次查找。" class="headerlink" title="如今回头看下Servlet不仅如此强大，还具有很强烈的参考意义，能在现如今流行的大部分框架中找到它的影子。下面文章不止与探索Servlet，可能在其中穿插其他的关联知识点，旨在能从此次的学习中获取更多的知识点参考资料总结，转化为自己的理解输出,在文中我尽量以截图+复制全限定类名的方式记录，以便感兴趣的再次查找。"></a>如今回头看下Servlet不仅如此强大，还具有很强烈的参考意义，能在现如今流行的大部分框架中找到它的影子。下面文章不止与探索Servlet，可能在其中穿插其他的关联知识点，旨在能从此次的学习中获取更多的知识点参考资料总结，转化为自己的理解输出,在文中我尽量以截图+复制全限定类名的方式记录，以便感兴趣的再次查找。</h3><h2 id="Springboot与Servlet"><a href="#Springboot与Servlet" class="headerlink" title="Springboot与Servlet"></a>Springboot与Servlet</h2><p>在springboot中内嵌了Tomcat容器，而Tomcat又是Servlet的容器，Springboot就与Servlet产生了紧密的联系。<br>在分析各个类时，注意下每个类所在的包是如何在tomcat与boot之间跨越的~</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>1、初始化<br>2、处理请求<br>3、销毁<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/servlet.png" alt="流程"></p><h3 id="应用上下文"><a href="#应用上下文" class="headerlink" title="应用上下文"></a>应用上下文</h3><p>应用上下文即可看做：一次请求到达，到响应结束的过程中间的catlog，即阅读中结合上下文语境，是一个广义定义。<br>为什么说到上下文呢？来看下ServletContext的实现，第一个经典实现既是ApplicationContext我们不止在一次源码和应用中见到它，另外加载器目前有两种选择：ContextLoaderListener和ContextLoaderServlet。其功能是完全相同。会在下文进行介绍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Standard implementation of &lt;code&gt;ServletContext&lt;/code&gt; that represents</span></span><br><span class="line"><span class="comment"> * a web application&#x27;s execution environment.  An instance of this class is</span></span><br><span class="line"><span class="comment"> * associated with each instance of &lt;code&gt;StandardContext&lt;/code&gt;.</span></span><br><span class="line"><span class="comment"> * 代表web应用程序的执行环境。这个类的一个实例是</span></span><br><span class="line"><span class="comment"> *与StandardContext的每个实例关联。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Craig R. McClanahan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Remy Maucherat</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContext</span> <span class="keyword">implements</span> <span class="title">ServletContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> STRICT_SERVLET_COMPLIANCE;<span class="comment">///翻译为是否严格遵守</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> GET_RESOURCE_REQUIRE_SLASH;<span class="comment">//我的蹩脚英语翻译为获取资源是否需要斜线。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        STRICT_SERVLET_COMPLIANCE = Globals.STRICT_SERVLET_COMPLIANCE;</span><br><span class="line"></span><br><span class="line">        String requireSlash = System.getProperty(<span class="string">&quot;org.apache.catalina.core.ApplicationContext.GET_RESOURCE_REQUIRE_SLASH&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (requireSlash == <span class="keyword">null</span>) &#123;</span><br><span class="line">            GET_RESOURCE_REQUIRE_SLASH = STRICT_SERVLET_COMPLIANCE;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            GET_RESOURCE_REQUIRE_SLASH = Boolean.parseBoolean(requireSlash);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注：特别重要上述配置为tomcat中第一个开关配置，决定多个属性的值。来自于下面的Globals.STRICT_SERVLET_COMPLIANCE;默认为false<br>验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> STRICT_SERVLET_COMPLIANCE =Boolean.parseBoolean(System.getProperty(<span class="string">&quot;org.apache.catalina.STRICT_SERVLET_COMPLIANCE&quot;</span>, <span class="string">&quot;false&quot;</span>));</span><br></pre></td></tr></table></figure><p>和官网截图<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/compliance.png" alt="流程"><br>问题:会因为tomcat的版本配置不同改变此值，在8.5.57当中会改变为true，当cantroller中配置多个映射路径会出现访问不到的问题<br>此处参考博文：<a href="https://blog.csdn.net/xing930408/article/details/111225064">https://blog.csdn.net/xing930408/article/details/111225064</a><br>Tomcat文档：<a href="https://tomcat.apache.org/tomcat-8.5-doc/config/systemprops.html">https://tomcat.apache.org/tomcat-8.5-doc/config/systemprops.html</a><br>而GET_RESOURCE_REQUIRE_SLASH直接赋值为STRICT_SERVLET_COMPLIANCE</p><h3 id="Servlet与HttpServlet"><a href="#Servlet与HttpServlet" class="headerlink" title="Servlet与HttpServlet"></a>Servlet与HttpServlet</h3><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/servlet%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="流程"><br>类图标明很是明显，在这个图中展示了servlet，tomcat，Springboot的关系，完美解释了那句Springboot是内嵌了tomcat的嵌入式引擎，嵌入式容器的说法~</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">而HttpServlet即是大部分请求的处理对象，嵌入式引擎----嵌入式容器----  webfilter ---weblistener</span><br><span class="line">javax.servlet.ServletContext#addServlet(java.lang.String, java.lang.Class&lt;? extends javax.servlet.Servlet&gt;)返回一个ServletRegistration对象，可用于进一步</span><br><span class="line">配置已注册的servlet</span><br><span class="line">javax.servlet.ServletRegistration</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServletRegistration</span> <span class="keyword">extends</span> <span class="title">Registration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TODO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urlPatterns The URL patterns that this Servlet should be mapped to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> TODO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if urlPattern is null or empty</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalStateException if the associated ServletContext has</span></span><br><span class="line"><span class="comment">     *                                  already been initialised</span></span><br><span class="line"><span class="comment">     */</span>URL必须映射</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">addMapping</span><span class="params">(String... urlPatterns)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">getMappings</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRunAsRole</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">Dynamic</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">ServletRegistration</span>, <span class="title">Registration</span>.<span class="title">Dynamic</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoadOnStartup</span><span class="params">(<span class="keyword">int</span> loadOnStartup)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">setServletSecurity</span><span class="params">(ServletSecurityElement constraint)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMultipartConfig</span><span class="params">(MultipartConfigElement multipartConfig)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRunAsRole</span><span class="params">(String roleName)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>思考：为什么Applacationcontext会有那么多重载方法？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> ServletRegistration.<span class="function">Dynamic <span class="title">addServlet</span><span class="params">(String servletName, String className)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> addServlet(servletName, className, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> ServletRegistration.<span class="function">Dynamic <span class="title">addServlet</span><span class="params">(String servletName, Servlet servlet)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> addServlet(servletName, <span class="keyword">null</span>, servlet, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> ServletRegistration.<span class="function">Dynamic <span class="title">addServlet</span><span class="params">(String servletName,</span></span></span><br><span class="line"><span class="params"><span class="function">           Class&lt;? extends Servlet&gt; servletClass)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> addServlet(servletName, servletClass.getName(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>–用在不同场景下解决同一类问题<br>而在HttpServlet中的关键方法service可看到平时请求接口的所有方法<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/servlet-service.png" alt="流程"><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/service-post.png" alt="流程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_DELETE = <span class="string">&quot;DELETE&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_HEAD = <span class="string">&quot;HEAD&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_GET = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_OPTIONS = <span class="string">&quot;OPTIONS&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_POST = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_PUT = <span class="string">&quot;PUT&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_TRACE = <span class="string">&quot;TRACE&quot;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String method = req.getMethod();</span><br><span class="line">        <span class="comment">//GET</span></span><br><span class="line">        <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">            <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">            <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// servlet doesn&#x27;t support if-modified-since, no reason</span></span><br><span class="line">                <span class="comment">// to go through further expensive logic</span></span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">                <span class="keyword">if</span> (ifModifiedSince &lt; lastModified) &#123;</span><br><span class="line">                    <span class="comment">// If the servlet mod time is later, call doGet()</span></span><br><span class="line">                    <span class="comment">// Round down to the nearest second for a proper compare</span></span><br><span class="line">                    <span class="comment">// A ifModifiedSince of -1 will always be less</span></span><br><span class="line">                    maybeSetLastModified(resp, lastModified);</span><br><span class="line">                    doGet(req, resp);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">            <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">            maybeSetLastModified(resp, lastModified);</span><br><span class="line">            doHead(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">            doPost(req, resp);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">            doPut(req, resp);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">            doDelete(req, resp);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">            doOptions(req,resp);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">            doTrace(req,resp);</span><br><span class="line">            <span class="comment">//There&#x27;s no need to override this method. 没有必要~</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// Note that this means NO servlet supports whatever</span></span><br><span class="line">            <span class="comment">// method was requested, anywhere on this server.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            String errMsg = lStrings.getString(<span class="string">&quot;http.method_not_implemented&quot;</span>);</span><br><span class="line">            Object[] errArgs = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">            errArgs[<span class="number">0</span>] = method;</span><br><span class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line">            </span><br><span class="line">            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    String protocol = req.getProtocol();</span><br><span class="line">    String msg = lStrings.getString(<span class="string">&quot;http.method_post_not_supported&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (protocol.endsWith(<span class="string">&quot;1.1&quot;</span>)) &#123;</span><br><span class="line">        resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：在javaHttpServlet中，与Tomcat中的dopost方法如出一辙</p><p>真正的调用链(妥妥的责任链模式)是<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/HTTP%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B.jpg" alt="流程"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Tomcat与SpringMVC的结合点：ApplicationFilterChain与DispatcherServlet（继承于FrameworkServlet）；</span><br><span class="line">（1）所有配置了路由信息的处理方法最终都是通过反射的方式进行调用的；</span><br><span class="line">（2）在Java8中，反射方法调用最终落脚于NativeMethodAccessorImpl类的native方法：</span><br><span class="line">private static native Object invoke0(Method var0, Object var1, Object[] var2);</span><br><span class="line">在此处与JVM底层交互，实现跨代码衔接执行；</span><br><span class="line">（3）观察到的比较重要的设计模式：职责链模式（ApplicationFilterChain）、委派模式（DelegatingFilterProxy）、</span><br><span class="line">工厂模式、策略模式、代理模式（FilterChainProxy）、外观模式、适配器模式（HandlerAdapter）；</span><br><span class="line">（4）Tomcat与SpringMVC的结合点：ApplicationFilterChain与DispatcherServlet（继承于FrameworkServlet）；</span><br><span class="line">（5）在集成了Tomcat的SpringBoot项目中，先启动的不是Tomcat，而是Spring，Spring的工厂（默认DefaultListableBeanFactory）</span><br><span class="line">读取注解完成各类Bean（WebApplicationContext、securityFilterChainRegistration、dispatcherServletRegistration、各类FilterInitializer与Filter）</span><br><span class="line">的初始化，放入IoC容器，然后做路由Mapping，创建FilterChain，开启JMX等；</span><br><span class="line">（6）Servlet、Filter是单实例多线程的，成员变量线程不安全，方法内局部变量线程安全；SingleThreadModel采用同步/实例池的方式来确保不会有两个线程同时执行servlet的service方法，但已被弃用，需自行确保成员变量线程安全；</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「wanxu12345678910」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https://blog.csdn.net/wanxu12345678910/article/details/83352371</span><br></pre></td></tr></table></figure><p>ContextLoaderServlet与下文中的ContextLoaderListener功能完全相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">         &lt;servlet-name&gt;context&lt;/servlet-name&gt;</span><br><span class="line">         &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;</span></span><br><span class="line"><span class="class">           <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderServlet</span></span></span><br><span class="line"><span class="class">         &lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">         &lt;<span class="title">load</span>-<span class="title">on</span>-<span class="title">startup</span>&gt;1&lt;/<span class="title">load</span>-<span class="title">on</span>-<span class="title">startup</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt; </span></span><br></pre></td></tr></table></figure><h3 id="HttpServletResponse响应码"><a href="#HttpServletResponse响应码" class="headerlink" title="HttpServletResponse响应码"></a>HttpServletResponse响应码</h3><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/statusCode.png" alt="流程"></p><h4 id="监听器：-实现接口、标记"><a href="#监听器：-实现接口、标记" class="headerlink" title="监听器：   实现接口、标记"></a>监听器：   实现接口、标记</h4><p>比如MQ，观察者模式，所有的时间监听都会继承  extend   java.util.EventListener接口，但里面什么都没有<br>，称之为mark接口，经典实现：ContextLoaderListener、RequestContextListener(重要)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A tagging interface that all event listener interfaces must extend.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/listener.png" alt="流程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bootstrap listener to start up and shut down Spring&#x27;s root &#123;<span class="doctag">@link</span> WebApplicationContext&#125;.</span></span><br><span class="line"><span class="comment"> * Simply delegates to &#123;<span class="doctag">@link</span> ContextLoader&#125; as well as to &#123;<span class="doctag">@link</span> ContextCleanupListener&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;As of Spring 3.1, &#123;<span class="doctag">@code</span> ContextLoaderListener&#125; supports injecting the root web</span></span><br><span class="line"><span class="comment"> * application context via the &#123;<span class="doctag">@link</span> #ContextLoaderListener(WebApplicationContext)&#125;</span></span><br><span class="line"><span class="comment"> * constructor, allowing for programmatic configuration in Servlet 3.0+ environments.</span></span><br><span class="line"><span class="comment"> * See &#123;<span class="doctag">@link</span> org.springframework.web.WebApplicationInitializer&#125; for usage examples.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chris Beams</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 17.02.2003</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setContextInitializers</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.WebApplicationInitializer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextLoaderListener</span> <span class="keyword">extends</span> <span class="title">ContextLoader</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>见名知意既然包含contextLoader必然跟上线文息息相关，在初始化容器时加载配置~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent requestEvent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(requestEvent.getServletRequest() <span class="keyword">instanceof</span> HttpServletRequest)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">&quot;Request is not an HttpServletRequest: &quot;</span> + requestEvent.getServletRequest());</span><br><span class="line">        &#125;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) requestEvent.getServletRequest();</span><br><span class="line">        ServletRequestAttributes attributes = <span class="keyword">new</span> ServletRequestAttributes(request);</span><br><span class="line">        request.setAttribute(REQUEST_ATTRIBUTES_ATTRIBUTE, attributes);</span><br><span class="line">        <span class="comment">//将请求对象放入ThreadLocal中</span></span><br><span class="line">        LocaleContextHolder.setLocale(request.getLocale());</span><br><span class="line">        RequestContextHolder.setRequestAttributes(attributes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color='red'> 重要：Servlet在同一个线程中，当初始化时放到对象里，当请求销毁时，自动将Threadlocal对象销毁，防止了内存泄漏的问题 </font><br>当有请求到达时，会从线程池中取出一个线程来执行任务，执行完毕后再将线程回收至线程池,这样当前请求不可能拿到上一个请求保存在ThreadLocal对象里的值<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/Threadlocal.png" alt="流程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent requestEvent)</span> </span>&#123;</span><br><span class="line">        ServletRequestAttributes attributes = <span class="keyword">null</span>;</span><br><span class="line">        Object reqAttr = requestEvent.getServletRequest().getAttribute(REQUEST_ATTRIBUTES_ATTRIBUTE);</span><br><span class="line">        <span class="keyword">if</span> (reqAttr <span class="keyword">instanceof</span> ServletRequestAttributes) &#123;</span><br><span class="line">            attributes = (ServletRequestAttributes) reqAttr;</span><br><span class="line">        &#125;</span><br><span class="line">        RequestAttributes threadAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="keyword">if</span> (threadAttributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// We&#x27;re assumably within the original request thread...</span></span><br><span class="line">            LocaleContextHolder.resetLocaleContext();</span><br><span class="line">            RequestContextHolder.resetRequestAttributes();</span><br><span class="line">            <span class="keyword">if</span> (attributes == <span class="keyword">null</span> &amp;&amp; threadAttributes <span class="keyword">instanceof</span> ServletRequestAttributes) &#123;</span><br><span class="line">                attributes = (ServletRequestAttributes) threadAttributes;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (attributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            attributes.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/ThreadLocalremove.png" alt="流程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bootstrap listener to start up and shut down Spring&#x27;s root &#123;<span class="doctag">@link</span> WebApplicationContext&#125;.</span></span><br><span class="line"><span class="comment"> * Simply delegates to &#123;<span class="doctag">@link</span> ContextLoader&#125; as well as to &#123;<span class="doctag">@link</span> ContextCleanupListener&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;As of Spring 3.1, &#123;<span class="doctag">@code</span> ContextLoaderListener&#125; supports injecting the root web</span></span><br><span class="line"><span class="comment"> * application context via the &#123;<span class="doctag">@link</span> #ContextLoaderListener(WebApplicationContext)&#125;</span></span><br><span class="line"><span class="comment"> * constructor, allowing for programmatic configuration in Servlet 3.0+ environments.</span></span><br><span class="line"><span class="comment"> * See &#123;<span class="doctag">@link</span> org.springframework.web.WebApplicationInitializer&#125; for usage examples.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chris Beams</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 17.02.2003</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setContextInitializers</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.WebApplicationInitializer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextLoaderListener</span> <span class="keyword">extends</span> <span class="title">ContextLoader</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插播一句：在书写过程中发现某URL响应变慢，在分析SQL时，用到了in查询，执行分析计划用到了索引</p><h2 id="Servlet-on-Springboot"><a href="#Servlet-on-Springboot" class="headerlink" title="Servlet on Springboot"></a>Servlet on Springboot</h2><h4 id="组件声明注解："><a href="#组件声明注解：" class="headerlink" title="组件声明注解："></a>组件声明注解：</h4><p>servletContext—ApplicationContext</p><h3 id="组件扫描：ServletComponentScan"><a href="#组件扫描：ServletComponentScan" class="headerlink" title="组件扫描：ServletComponentScan"></a>组件扫描：ServletComponentScan</h3><p>熟悉波~ 是不是应用跟Springboot的@ComponentScan如出一辙</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(ServletComponentScanRegistrar.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ServletComponentScan &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Alias for the &#123;<span class="doctag">@link</span> #basePackages()&#125; attribute. Allows for more concise annotation</span></span><br><span class="line"><span class="comment">     * declarations e.g.: &#123;<span class="doctag">@code</span> <span class="doctag">@ServletComponentScan</span>(&quot;org.my.pkg&quot;)&#125; instead of</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> <span class="doctag">@ServletComponentScan</span>(basePackages=&quot;org.my.pkg&quot;)&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the base packages to scan</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor(&quot;basePackages&quot;)</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Base packages to scan for annotated servlet components. &#123;<span class="doctag">@link</span> #value()&#125; is an</span></span><br><span class="line"><span class="comment">     * alias for (and mutually exclusive with) this attribute.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Use &#123;<span class="doctag">@link</span> #basePackageClasses()&#125; for a type-safe alternative to String-based</span></span><br><span class="line"><span class="comment">     * package names.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the base packages to scan</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">    String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Type-safe alternative to &#123;<span class="doctag">@link</span> #basePackages()&#125; for specifying the packages to</span></span><br><span class="line"><span class="comment">     * scan for annotated servlet components. The package of each class specified will be</span></span><br><span class="line"><span class="comment">     * scanned.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> classes from the base packages to scan</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置声明：@interface  暴露SpringBean @Bean<br>事件：Event</p><h4 id="filter："><a href="#filter：" class="headerlink" title="filter："></a>filter：</h4><p>webFilter<br>OncePerRequestFilter：只调用一次且是线程安全的<br>而其子类得ApplicationContextHeaderFilter调用的dofilter方法就是我们上面提到的真正在请求中执行的filter</p><h3 id="激活Springbootweb"><a href="#激活Springbootweb" class="headerlink" title="激活Springbootweb"></a>激活Springbootweb</h3><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/oncePerRequestFilter.png" alt="流程"></p><p>文无第一，武无第二，没有最好的技术框架或体系，只有最适合当下业务的框架或体系<br>谈谈你对技术的理解：天上飞的理念，必定有落地的实现</p><h3 id="组装SpringApplicationBuilder"><a href="#组装SpringApplicationBuilder" class="headerlink" title="组装SpringApplicationBuilder"></a>组装SpringApplicationBuilder</h3><p>你看看这名字就知道他以后干啥的，并且它包含了太多太多的东西,<br>SpringApplication和ApplicationContext实例的生成器,基本包含了所有的SpringbootApplacation特性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SpringApplication application;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ConfigurableApplicationContext context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SpringApplicationBuilder parent;</span><br><span class="line">AtomicBoolean是不是的看看</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicBoolean running = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Class&lt;?&gt;&gt; sources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; defaultProperties = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ConfigurableEnvironment environment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; additionalProfiles = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> registerShutdownHookApplied;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> configuredAsChild = <span class="keyword">false</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProfiles</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">new</span> SpringApplicationBuilder(TestProfiles.class)</span><br><span class="line">                .properties(<span class="string">&quot;spring.config.location=classpath:/test-profiles.yml&quot;</span>)</span><br><span class="line">                .properties(<span class="string">&quot;spring.profiles.active=oracle&quot;</span>)</span><br><span class="line">                .run(args);</span><br><span class="line">        <span class="comment">// 输出变量</span></span><br><span class="line">        System.out.println(context.getEnvironment().getProperty(<span class="string">&quot;jdbc.driver&quot;</span>));</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 启动第二个Spring容器，指定端口为8848</span></span><br><span class="line">        ConfigurableApplicationContext context2 = <span class="keyword">new</span> SpringApplicationBuilder(TestProfiles.class)</span><br><span class="line">                .properties(<span class="string">&quot;spring.config.location=classpath:/test-profiles.yml&quot;</span>)</span><br><span class="line">                .properties(<span class="string">&quot;spring.profiles.active=mysql&quot;</span>)</span><br><span class="line">                .properties(<span class="string">&quot;server.port=8848&quot;</span>)</span><br><span class="line">                .run(args);</span><br><span class="line">        <span class="comment">// 输出变量</span></span><br><span class="line">        System.out.println(context2.getEnvironment().getProperty(<span class="string">&quot;jdbc.driver&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Springboot自动装配<br>/META-INF/spring.factories<br>XXXAotuConfigration<br>NIO不是异步IO而是非阻塞IO<br>java9推崇模块化</p><p>ClassLoader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(contextClassLoader.getClass().getName());</span><br><span class="line">        ClassLoader parent = contextClassLoader.getParent();</span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">    System.out.println(systemClassLoader.getClass().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>update_time =2022年2月14日13:48:19</p><h2 id="传统的Servlet容器-Apache-Tomcat"><a href="#传统的Servlet容器-Apache-Tomcat" class="headerlink" title="传统的Servlet容器 Apache Tomcat"></a>传统的Servlet容器 Apache Tomcat</h2><p>这里只记录了部分重要场景<br>包含核心组件<br>静态资源处理<br>类加载<br>连接器<br>JDBC数据源</p><h2 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h2><p>javax.servlet.http.HttpServletResponse</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(contextClassLoader.getClass().getName());</span><br><span class="line">        ClassLoader parent = contextClassLoader.getParent();</span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">    System.out.println(systemClassLoader.getClass().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了其中的状态码之外，结合最近的测试其中的实现可具体参考<br>addHeader方法，getHeader方法等等<br>BootStrap–system—common—webapp</p><h2 id="静态资源处理类org-apache-catalina-servlets-DefaultServlet"><a href="#静态资源处理类org-apache-catalina-servlets-DefaultServlet" class="headerlink" title="静态资源处理类org.apache.catalina.servlets.DefaultServlet"></a>静态资源处理类org.apache.catalina.servlets.DefaultServlet</h2><p>注意下包名</p><p>大多数情况下我们关注的更多是server.xml中Tomcat的配置，而在web.xml中除了路径映射等配置外</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- The mapping <span class="keyword">for</span> the <span class="keyword">default</span> servlet --&gt;</span><br><span class="line">   &lt;servlet-mapping&gt;</span><br><span class="line">       &lt;servlet-name&gt;<span class="keyword">default</span>&lt;/servlet-name&gt;</span><br><span class="line">       &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">   &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- The mappings <span class="keyword">for</span> the JSP servlet --&gt;</span><br><span class="line">   &lt;servlet-mapping&gt;</span><br><span class="line">       &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;</span><br><span class="line">       &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;</span><br><span class="line">       &lt;url-pattern&gt;*.jspx&lt;/url-pattern&gt;</span><br><span class="line">   &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>关于是否是开发模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--   development         Is Jasper used in development mode? If <span class="keyword">true</span>,   --&gt;</span><br><span class="line"> &lt;!--                       the frequency at which JSPs are checked <span class="keyword">for</span>    --&gt;</span><br><span class="line"> &lt;!--                       modification may be specified via the          --&gt;</span><br><span class="line"> &lt;!--                       modificationTestInterval parameter. [<span class="keyword">true</span>]     --&gt;</span><br></pre></td></tr></table></figure><p>由于DefaultServlet是HttpServlet的子类，所以在此不展开讨论<br>而在server.xml中标签与后台接口是一一绑定的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=<span class="string">&quot;8080&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span> connectionTimeout=<span class="string">&quot;20000&quot;</span> redirectPort=<span class="string">&quot;8443&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>而在JDBC中的大多数类中也遵循此规则，那么就上面这段分析标签Connector则对应<br>org.apache.catalina.connector.Connector，验证一下标签中对应protocol,connectionTimeout,redirectPort<br>其中标签对应部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Defaults to using HTTP/1.1 NIO implementation.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Connector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>而在tomcat8.0+中getProtocol对应protocol<br>redirectPort对应属性默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The redirect port for non-SSL to SSL redirects.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> redirectPort = <span class="number">443</span>;</span><br></pre></td></tr></table></figure><p>关于标签中connector中这个Http11NioProtocol则在tomcat官方文档中可见其中一句话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">When using HTTP connectors (based on APR or NIO/NIO2), Tomcat supports using sendfile to send large static files. These writes, as soon as the system load increases, will be performed asynchronously in the most efficient way. Instead of sending a large response using blocking writes, it is possible to write content to a static file, and write it using a sendfile code. A caching valve could take advantage of this to cache the response data in a file rather than store it in memory. Sendfile support is available if the request attribute org.apache.tomcat.sendfile.support is set to Boolean.TRUE</span><br></pre></td></tr></table></figure><p>也可在server.xml中搜索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    &lt;Connector protocol=&quot;AJP/1.3&quot;</span><br><span class="line">               address=&quot;::1&quot;</span><br><span class="line">               port=&quot;8009&quot;</span><br><span class="line">               redirectPort=&quot;8443&quot; /&gt;</span><br><span class="line">    --&gt;</span><br></pre></td></tr></table></figure><p>server.port在文件中的位置</p><!-- {      "name": "server.port",      "type": "java.lang.Integer",      "description": "Server HTTP port.",      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",      "defaultValue": 8080    }, --><h2 id="重点来了-ServerProperties包含了tomcat-Jetty-Undertow-而在Springboot2-2-6中则存在Netty"><a href="#重点来了-ServerProperties包含了tomcat-Jetty-Undertow-而在Springboot2-2-6中则存在Netty" class="headerlink" title="重点来了 ServerProperties包含了tomcat,Jetty,Undertow,而在Springboot2.2.6中则存在Netty"></a>重点来了 ServerProperties包含了tomcat,Jetty,Undertow,而在Springboot2.2.6中则存在Netty</h2><p>那么理所当然，在tomcat中的一些配置也存在于此</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Maximum amount of worker threads.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxThreads = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Minimum amount of worker threads.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> minSpareThreads = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h2 id="那么为什么Tomcat被称之为嵌入式容器呢？"><a href="#那么为什么Tomcat被称之为嵌入式容器呢？" class="headerlink" title="那么为什么Tomcat被称之为嵌入式容器呢？"></a>那么为什么Tomcat被称之为嵌入式容器呢？</h2><p>在启动时无需自启动容器，在Bootstrap中调用tomcat，另外tomcat中TomcatEmbeddedContext，Embedded即直译为嵌入式<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/embedded.png" alt="流程"><br>这里记忆有些混乱了，有点找不过来哪里是入口了，但先从TomcatServletWebServerFactoryCustomizer的customize()方法调用找，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Stream&lt;Wrapper&gt; <span class="title">getLoadOnStartupWrappers</span><span class="params">(Container[] children)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, List&lt;Wrapper&gt;&gt; grouped = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Container child : children) &#123;</span><br><span class="line">            Wrapper wrapper = (Wrapper) child;</span><br><span class="line">            <span class="keyword">int</span> order = wrapper.getLoadOnStartup();</span><br><span class="line">            <span class="keyword">if</span> (order &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                grouped.computeIfAbsent(order, ArrayList::<span class="keyword">new</span>);</span><br><span class="line">                grouped.get(order).add(wrapper);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> grouped.values().stream().flatMap(List::stream);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因为要看下Netty，所以还是重新看下server.properties<br>我将Spring Boot AutoConfigure升级到了2.6.2，内置的Tomcat就升级到9.0了<br>为了方便查看才升级的，之前的2.1.x就不截图了<br>server.properties的位置在configuration的下面的json文件<br>spring-configuration-metadata.json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      &quot;name&quot;: &quot;server&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;org.springframework.boot.autoconfigure.web.ServerProperties&quot;,</span><br><span class="line">      &quot;sourceType&quot;: &quot;org.springframework.boot.autoconfigure.web.ServerProperties&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那既然为了看Netty在这个json文件中同样存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      &quot;name&quot;: &quot;server.netty&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;org.springframework.boot.autoconfigure.web.ServerProperties$Netty&quot;,</span><br><span class="line">      &quot;sourceType&quot;: &quot;org.springframework.boot.autoconfigure.web.ServerProperties&quot;,</span><br><span class="line">      &quot;sourceMethod&quot;: &quot;getNetty()&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然在json中存在getNetty等方法，猜测那么对应的ServerProperties也存在对应的方法，<br>因为存在实例么，tomcat搭配server.xml和web.xml简单看了一下，当然Tomcat还是主要和Servlet的关联关系更为重要，<br>本身tomcat知识点也最够庞大的，包含类加载器，双拼委派，打破双亲委派、jvm调优等等，可以顺带看下这里的专题</p><h2 id="当一次请求发起都发生了什么？"><a href="#当一次请求发起都发生了什么？" class="headerlink" title="当一次请求发起都发生了什么？"></a>当一次请求发起都发生了什么？</h2><p>用户通过浏览器进行了一个操作，这个操作可以是输入url地址并回车，或者是点击超链接，或者是在搜索框中输入关键字进行搜索，接着浏览器就捕获到了这个事件<br>由于 HTTP 协议底层具体的数据传输使用的是 TCP/IP 协议，因此浏览器需要向服务端发出 TCP 连接请求<br>服务器接受浏览器的连接请求，并经过 TCP 三次握手建立连接<br>浏览器将请求数据打包成一个 HTTP 协议格式的数据包<br>浏览器将打包好的数据包推入网络，经过网络传输最终到达服务器指定程序<br>服务端程序拿到数据包后，根据 HTTP 协议格式进行解包，获取到客户端的意图<br>得知客户端意图后进行处理，比如提供静态文件或者调用服务端程序获得动态结果<br>服务器将响应结果按照 HTTP 协议格式打包<br>服务器将响应数据包推入网络，数据包经过网络传输最终达到到浏览器<br>浏览器拿到数据包后，按照 HTTP 协议的格式解包，然后对数据进行解析<br>浏览器将解析后的静态数据（如html、图片）展示给用户</p><p>Tomcat 作为一个 HTTP 服务器，主要需要完成的功能是接受连接、解析请求数据、处理请求和发送响应这几个步骤。<br>作者：若兮缘<br>链接：<a href="https://www.jianshu.com/p/7c9401b85704">https://www.jianshu.com/p/7c9401b85704</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br>关于tomcat的架构就取自这篇文章，图文都很喜欢~</p><p>导入过程Running With JRE 7 Or Later</p><p>启动tomcat所需环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">   eval $_NOHUP <span class="string">&quot;\&quot;$_RUNJAVA\&quot;&quot;</span> <span class="string">&quot;\&quot;$CATALINA_LOGGING_CONFIG\&quot;&quot;</span> $LOGGING_MANAGER <span class="string">&quot;$JAVA_OPTS&quot;</span> <span class="string">&quot;$CATALINA_OPTS&quot;</span> \</span><br><span class="line">     -D$ENDORSED_PROP=<span class="string">&quot;\&quot;$JAVA_ENDORSED_DIRS\&quot;&quot;</span> \</span><br><span class="line">     -classpath <span class="string">&quot;\&quot;$CLASSPATH\&quot;&quot;</span> \</span><br><span class="line">     -Dcatalina.base=<span class="string">&quot;\&quot;$CATALINA_BASE\&quot;&quot;</span> \</span><br><span class="line">     -Dcatalina.home=<span class="string">&quot;\&quot;$CATALINA_HOME\&quot;&quot;</span> \</span><br><span class="line">     -Djava.io.tmpdir=<span class="string">&quot;\&quot;$CATALINA_TMPDIR\&quot;&quot;</span> \</span><br><span class="line">     org.apache.catalina.startup.Bootstrap <span class="string">&quot;$@&quot;</span> start \</span><br></pre></td></tr></table></figure><p>后续不在赘述。重点在Server.properties中版本区别是否包含Netty的这个类,<br>本来我是想跟着dei一下bug的,实际是我没起来，版本又不兼容，中间穿插了需求，就不dei了skr~</p><h2 id="一方库、二方库、三方库说明"><a href="#一方库、二方库、三方库说明" class="headerlink" title="一方库、二方库、三方库说明"></a>一方库、二方库、三方库说明</h2><p>有些二方库为apache所需类库,当然定义也尽相同，以统一标准为准吧~就像嵌入式这个单词,<br>如果学习的时候根据服务的命名，猜测其作用，然后再去证实的话，可能我早就认识这个单词了</p><blockquote><p>一方库：本工程中的各模块的相互依赖<br>二方库：公司内部的依赖库，一般指公司内部的其他项目发布的jar包<br>三方库：公司之外的开源库， 比如apache、ibm、google等发布的依赖<br>为什么写这句话就是因为javax是指扩展我的java,因为原生的二方库是不允许被覆盖的。提到的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Stream&lt;Wrapper&gt; <span class="title">getLoadOnStartupWrappers</span><span class="params">(Container[] children)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, List&lt;Wrapper&gt;&gt; grouped = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Container child : children) &#123;</span><br><span class="line">            Wrapper wrapper = (Wrapper) child;</span><br><span class="line">            <span class="keyword">int</span> order = wrapper.getLoadOnStartup();</span><br><span class="line">            <span class="keyword">if</span> (order &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                grouped.computeIfAbsent(order, ArrayList::<span class="keyword">new</span>);</span><br><span class="line">                grouped.get(order).add(wrapper);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> grouped.values().stream().flatMap(List::stream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再比如这里面的grouped.computeIfAbsent(order, ArrayList::new);其中Absent译为缺席，入参是key=order,以及函数方法，在key!=null的情况下赋值为newAraayList并返回去。<br>and this flatMap VS map,其他人举的例子很明朗，我就不摘抄了,<a href="https://www.cnblogs.com/yucy/p/10260014.html">https://www.cnblogs.com/yucy/p/10260014.html</a></p><h2 id="JDBC中的servlet"><a href="#JDBC中的servlet" class="headerlink" title="JDBC中的servlet"></a>JDBC中的servlet</h2><blockquote><p>数据库三大范式：<br>1．第一范式(确保每列保持原子性)<br>2．第二范式(确保表中的每列都和主键相关)<br>3．第三范式(确保每列都和主键列直接相关,而不是间接相关)<br>1、DML:Data Manipulation Language  操作语句<br>2、DDL：data define Language、<br>3、存储过程执行后<br>4、查询中也是有事务的：select查询后结果集关闭后<br>事务并发可能的影响：<br>1、脏读（读取未提交数据）<br>A事务读取B事务尚未提交的数据，此时如果B事务发生错误并执行回滚操作，那么A事务读取到的数据就是脏数据。<br>就好像原本的数据比较干净、纯粹，此时由于B事务更改了它，这个数据变得不再纯粹。这个时候A事务立即读取了这个脏数据，<br>但事务B良心发现，又用回滚把数据恢复成原来干净、纯粹的样子，而事务A却什么都不知道，最终结果就是事务A读取了此次的脏数据，称为脏读。<br>2、不可重复读（前后多次读取，数据内容不一致）<br>事务A在执行读取操作，由整个事务A比较大，前后读取同一条数据需要经历很长的时间 。而在事务A第一次读取数据，<br>比如此时读取了小明的年龄为20岁，事务B执行更改操作，将小明的年龄更改为30岁，此时事务A第二次读取到小明的年龄时，<br>发现其年龄是30岁，和之前的数据不一样了，也就是数据不重复了，系统不可以读取到重复的数据，成为不可重复读<br>3、幻读（前后多次读取，数据总量不一致）<br>事务A在执行读取操作，需要两次统计数据的总量，前一次查询数据总量后，此时事务B执行了新增数据的操作并提交后，<br>这个时候事务A读取的数据总量和之前统计的不一样，就像产生了幻觉一样，平白无故的多了几条数据，成为幻读<br>幻读产生的根本原因是采用的行级锁，所以只针对脏读和重复读有用<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/drivermanager.png" alt="流程"><br>Drivermanager–&gt;getconnection—&gt;connection–&gt;createStatement–&gt;ResultSet executeQuery(String sql) throws SQLException;<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/connection.png" alt="流程"><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/drivermanager.png" alt="流程"><br>重载connection方法可实现在各个数据库中切换，基本不需要太多的代码，JDBC中用到的设计模式？—-桥接模式<br>不知道为啥都在强调jdbc的设计模式，所以引用下《重学设计模式–小博哥》中的案例分析<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.png" alt="流程"><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E6%A1%88%E4%BE%8B%E5%9C%BA%E6%99%AF.png" alt="场景"><br>代码实现登陆：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(PayController.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doPay</span><span class="params">(String uId, String tradeId, BigDecimal amount,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="keyword">int</span> channelType, <span class="keyword">int</span> modeType)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 微信⽀付</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == channelType) &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;模拟微信渠道⽀付划账开始。uId：&#123;&#125; tradeId：&#123;&#125; amount：</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            &quot;</span>, uId, tradeId, amount);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span> == modeType) &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;密码⽀付，⻛控校验环境安全&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == modeType) &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;⼈脸⽀付，⻛控校验脸部识别&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">3</span> == modeType) &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;指纹⽀付，⻛控校验指纹信息&quot;</span>);</span><br><span class="line">                <span class="number">123456789</span></span><br><span class="line">                <span class="number">10</span></span><br><span class="line">                <span class="number">11</span></span><br><span class="line">                <span class="number">12</span></span><br><span class="line">                <span class="number">13</span></span><br><span class="line">                <span class="number">14</span></span><br><span class="line">                上⾯的类提供了⼀个⽀付服务功能，通过提供的必要字段； ⽤户ID 、交易ID 、 ⾦额 、渠道 、模 式 ，来控制⽀付⽅式。</span><br><span class="line">                以上的 ifelse 应该是最差的⼀种写法，即使写 ifelse 也是可以优化的⽅式去写的。</span><br><span class="line">                <span class="number">3.</span> 测试验证</span><br><span class="line">                <span class="number">3.1</span> 编写测试类</span><br><span class="line">                以上分别测试了两种不同的⽀付类型和⽀付模式；微信⼈脸⽀付、⽀付宝指纹⽀付</span><br><span class="line">                <span class="number">3.2</span> 测试结果</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ⽀付宝⽀付</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == channelType) &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;模拟⽀付宝渠道⽀付划账开始。uId：&#123;&#125; tradeId：&#123;&#125;</span></span><br><span class="line"><span class="string">                    amount： &#123;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            &quot;</span>, uId, tradeId, amount);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span> == modeType) &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;密码⽀付，⻛控校验环境安全&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == modeType) &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;⼈脸⽀付，⻛控校验脸部识别&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">3</span> == modeType) &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;指纹⽀付，⻛控校验指纹信息&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实面对这种情况一般我是看到大多数是应用策略+模板的，桥接真的很少听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pay</span> </span>&#123;</span><br><span class="line"> <span class="keyword">protected</span> Logger logger = LoggerFactory.getLogger(Pay.class);</span><br><span class="line"> <span class="keyword">protected</span> IPayMode payMode;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Pay</span><span class="params">(IPayMode payMode)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.payMode = payMode;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">transfer</span><span class="params">(String uId, String tradeId, BigDecimal</span></span></span><br><span class="line"><span class="params"><span class="function">amount)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个类中定义了⽀付⽅式的需要实现的划账接⼝： transfer ，以及桥接接⼝； IPayMode ，并<br>在构造函数中⽤户⽅⾃⾏选择⽀付⽅式。<br>如果没有接触过此类实现，可以᯿点关注 IPayMode payMode ，这部分是桥接的核⼼</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxPay</span> <span class="keyword">extends</span> <span class="title">Pay</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">WxPay</span><span class="params">(IPayMode payMode)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">super</span>(payMode);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">transfer</span><span class="params">(String uId, String tradeId, BigDecimal amount)</span> </span>&#123;</span><br><span class="line"> logger.info(<span class="string">&quot;模拟微信渠道⽀付划账开始。uId：&#123;&#125; tradeId：&#123;&#125; amount：&#123;&#125;&quot;</span>,</span><br><span class="line">uId, tradeId, amount);</span><br><span class="line"> <span class="keyword">boolean</span> security = payMode.security(uId);</span><br><span class="line"> logger.info(<span class="string">&quot;模拟微信渠道⽀付⻛控校验。uId：&#123;&#125; tradeId：&#123;&#125; security：</span></span><br><span class="line"><span class="string">&#123;&#125;&quot;</span>, uId, tradeId, security);</span><br><span class="line"> <span class="keyword">if</span> (!security) &#123;</span><br><span class="line"> logger.info(<span class="string">&quot;模拟微信渠道⽀付划账拦截。uId：&#123;&#125; tradeId：&#123;&#125; amount：</span></span><br><span class="line"><span class="string">&#123;&#125;&quot;</span>, uId, tradeId, amount);</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;0001&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> logger.info(<span class="string">&quot;模拟微信渠道⽀付划账成功。uId：&#123;&#125; tradeId：&#123;&#125; amount：&#123;&#125;&quot;</span>,</span><br><span class="line">uId, tradeId, amount);</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;0000&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>支付宝支付</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class ZfbPay extends Pay &#123;</span><br><span class="line"> public ZfbPay(IPayMode payMode) &#123;</span><br><span class="line"> super(payMode);</span><br><span class="line"> &#125;</span><br><span class="line"> public String transfer(String uId, String tradeId, BigDecimal amount) &#123;</span><br><span class="line"> logger.info(<span class="string">&quot;模拟⽀付宝渠道⽀付划账开始。uId：&#123;&#125; tradeId：&#123;&#125; amount：</span></span><br><span class="line"><span class="string">&#123;&#125;&quot;</span>, uId, tradeId, amount);</span><br><span class="line"> boolean security = payMode.security(uId);</span><br><span class="line"> logger.info(<span class="string">&quot;模拟⽀付宝渠道⽀付⻛控校验。uId：&#123;&#125; tradeId：&#123;&#125; security：</span></span><br><span class="line"><span class="string">&#123;&#125;&quot;</span>, uId, tradeId, security);</span><br><span class="line"> <span class="keyword">if</span> (!security) &#123;</span><br><span class="line"> logger.info(<span class="string">&quot;模拟⽀付宝渠道⽀付划账拦截。uId：&#123;&#125; tradeId：&#123;&#125;</span></span><br><span class="line"><span class="string">amount：&#123;&#125;&quot;</span>, uId, tradeId, amount);</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;0001&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> logger.info(<span class="string">&quot;模拟⽀付宝渠道⽀付划账成功。uId：&#123;&#125; tradeId：&#123;&#125; amount：</span></span><br><span class="line"><span class="string">&#123;&#125;&quot;</span>, uId, tradeId, amount);</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;0000&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%9E%8B.png" alt="流程"><br>桥接模式接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public <span class="keyword">interface</span> IPayMode &#123;</span><br><span class="line"> boolean security(String uId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刷脸</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayFaceMode</span> <span class="keyword">implements</span> <span class="title">IPayMode</span></span>&#123;</span><br><span class="line"> <span class="keyword">protected</span> Logger logger = LoggerFactory.getLogger(PayCypher.class);</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">security</span><span class="params">(String uId)</span> </span>&#123;</span><br><span class="line"> logger.info(<span class="string">&quot;⼈脸⽀付，⻛控校验脸部识别&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">其他同上</span><br></pre></td></tr></table></figure><p>测试类编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_pay</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;\r\n模拟测试场景；微信⽀付、⼈脸⽅式。&quot;</span>);</span><br><span class="line"> Pay wxPay = <span class="keyword">new</span> WxPay(<span class="keyword">new</span> PayFaceMode());</span><br><span class="line"> wxPay.transfer(<span class="string">&quot;weixin_1092033111&quot;</span>, <span class="string">&quot;100000109893&quot;</span>, <span class="keyword">new</span></span><br><span class="line">BigDecimal(<span class="number">100</span>));</span><br><span class="line"> System.out.println(<span class="string">&quot;\r\n模拟测试场景；⽀付宝⽀付、指纹⽅式。&quot;</span>);</span><br><span class="line"> Pay zfbPay = <span class="keyword">new</span> ZfbPay(<span class="keyword">new</span> PayFingerprintMode());</span><br><span class="line"> zfbPay.transfer(<span class="string">&quot;jlu19dlxo111&quot;</span>,<span class="string">&quot;100000109894&quot;</span>,<span class="keyword">new</span> BigDecimal(<span class="number">100</span>));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="ResultSet-executeQuery-String-sql-throws-SQLException"><a href="#ResultSet-executeQuery-String-sql-throws-SQLException" class="headerlink" title="ResultSet executeQuery(String sql) throws SQLException;"></a>ResultSet executeQuery(String sql) throws SQLException;</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;commons-dbcp&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">org.springframework.transaction.interceptor.TransactionInterceptor</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    Class&lt;?&gt; targetClass = invocation.getThis() != <span class="keyword">null</span> ? AopUtils.getTargetClass(invocation.getThis()) : <span class="keyword">null</span>;</span><br><span class="line">    Method var10001 = invocation.getMethod();</span><br><span class="line">    invocation.getClass();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.invokeWithinTransaction(var10001, targetClass, invocation::proceed);</span><br><span class="line">&#125;</span><br><span class="line">org.springframework.transaction.TransactionDefinition</span><br></pre></td></tr></table></figure><p>其实这里看不出来跟servlet的关联性有多么高，如果实在要说其中的关联性，<br>还不如将jdbc的整合过程与Mybatis进行比较,或者分析jdbc代码分析封装硬编码的过程，<br>就连其报下的大部分类名都不与之相关,当然你要说再Servlet与jdbc集成开发的时代，他也是有一定时代和代表性的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(String url,</span></span></span><br><span class="line"><span class="params"><span class="function">    java.util.Properties info)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (getConnection(url, info, Reflection.getCallerClass()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CallerSensitive是什么鬼？"><a href="#CallerSensitive是什么鬼？" class="headerlink" title="CallerSensitive是什么鬼？"></a>CallerSensitive是什么鬼？</h3><p>CallerSensitive老规矩，猜测下Caller=调用，Sensitive=敏感的，那么标识在方法上则是当调用方法时的一些控制。<br>其中特指Reflection.getCallerClass()能够追踪到调用者的第一人。项目中用是用不到。</p><h3 id="学习方法就是学习大佬的学习方法"><a href="#学习方法就是学习大佬的学习方法" class="headerlink" title="学习方法就是学习大佬的学习方法"></a>学习方法就是学习大佬的学习方法</h3><p>这里JDBC就先到此为止，我先不得不先记录下我在javacache中遇到的小问题思考。</p><h2 id="为什么在ConcurrentHashMap还要加入synchronized"><a href="#为什么在ConcurrentHashMap还要加入synchronized" class="headerlink" title="为什么在ConcurrentHashMap还要加入synchronized"></a>为什么在ConcurrentHashMap还要加入synchronized</h2><p>在org.springframework.cache.support.AbstractCacheManager中有一段关于初始化缓存静态配置的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initialize the static configuration of caches.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Triggered on startup through &#123;<span class="doctag">@link</span> #afterPropertiesSet()&#125;;</span></span><br><span class="line"><span class="comment">     * can also be called to re-initialize at runtime.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 4.2.2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #loadCaches()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initializeCaches</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Collection&lt;? extends Cache&gt; caches = loadCaches();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.cacheMap) &#123;</span><br><span class="line">            <span class="keyword">this</span>.cacheNames = Collections.emptySet();</span><br><span class="line">            <span class="keyword">this</span>.cacheMap.clear();</span><br><span class="line">            Set&lt;String&gt; cacheNames = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(caches.size());</span><br><span class="line">            <span class="keyword">for</span> (Cache cache : caches) &#123;</span><br><span class="line">                String name = cache.getName();</span><br><span class="line">                <span class="keyword">this</span>.cacheMap.put(name, decorateCache(cache));</span><br><span class="line">                cacheNames.add(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.cacheNames = Collections.unmodifiableSet(cacheNames);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><font color="red"> Triggered：触发 </font><br>原因：本身put和add的线程安全是由ConcurrentHashMap保证的，但是此时获取的值ConcurrentHashMap并不能保证其他线程对共享变量的值操作时还是原来的值。<br>怎么说呢，这么看来可能失去了map的本来特性，但其实还是不理解，是不理解这个原因准不准确。</p><p>谁提出谁解决:concurrentHashMap只能保证一次操作的原子性，一系列操作的时候就需要加锁了，不能保证第N+1个线程进来的时候获取到的状态是未clear的</p><p>Collections.emptySet()：如果你想 new 一个空的 List ，而这个 List 以后也不会再添加元素，那么就用 Collections.emptyList() 好了。<br>new ArrayList() 或者 new LinkedList() 在创建的时候有会有初始大小，多少会占用一内存。<br>每次使用都new 一个空的list集合，浪费就积少成多，浪费就严重啦，就不好啦。</p><p>还有一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cache <span class="title">getCache</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Cache cache = <span class="keyword">this</span>.cacheMap.get(name);</span><br><span class="line">        <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cache;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Fully synchronize now for missing cache creation...</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>.cacheMap) &#123;</span><br><span class="line">                cache = <span class="keyword">this</span>.cacheMap.get(name);</span><br><span class="line">                <span class="keyword">if</span> (cache == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    cache = getMissingCache(name);</span><br><span class="line">                    <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        cache = decorateCache(cache);</span><br><span class="line">                        <span class="keyword">this</span>.cacheMap.put(name, cache);</span><br><span class="line">                        updateCacheNames(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> cache;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">其中的getMissingCache方法</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Cache <span class="title">getMissingCache</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">无论如何都要返回<span class="keyword">null</span>，那么他还要进行判空意义又何在？</span><br><span class="line"></span><br><span class="line">源码注释是这样写的</span><br><span class="line">Return a missing cache with the specified name, or <span class="keyword">null</span> <span class="keyword">if</span> such a cache does not exist or could not be created on demand.</span><br><span class="line">Caches may be lazily created at runtime <span class="keyword">if</span> the <span class="keyword">native</span> provider supports it. If a lookup by name does not yield any result, an AbstractCacheManager subclass gets a chance to register such a cache at runtime. The returned cache will be automatically added to <span class="keyword">this</span> cache manager.</span><br><span class="line">返回指定名称的缺失缓存，如果此类缓存不存在或无法按需创建，则返回<span class="keyword">null</span>。</span><br><span class="line">如果本机提供程序支持，可以在运行时延迟创建缓存,就是其扩展实际是在子类中来复写的，</span><br><span class="line">注意：在spring-data-redis的<span class="number">1.7</span><span class="number">.2</span>中是没有复写此方法的</span><br><span class="line">在官网中查询https:<span class="comment">//spring.io/projects/spring-data-redis#support</span></span><br><span class="line">接入了</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;<span class="number">2.1</span><span class="number">.9</span>.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">低版本可是没有的呢，具体变化是在<span class="number">2.</span>X前后的区别</span><br><span class="line"><span class="function"><span class="keyword">protected</span> RedisCache <span class="title">getMissingCache</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> allowInFlightCacheCreation ? createRedisCache(name, defaultCacheConfig) : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第二次见到identityHashMap"><a href="#第二次见到identityHashMap" class="headerlink" title="第二次见到identityHashMap"></a>第二次见到identityHashMap</h2><p>实际应用<br><a href="https://mp.weixin.qq.com/s?__biz=Mzg2ODA3NjA1MA==&amp;mid=2247484317&amp;idx=1&amp;sn=1a5d78d0e5d5e09b1d2ca969a5ae7d23&amp;chksm=ceb09ce0f9c715f6688bf4b38a933730f61df7b432b3ac452924b502fba735e048289c3e0d91&amp;token=950928768&amp;lang=zh_CN#rd">https://mp.weixin.qq.com/s?__biz=Mzg2ODA3NjA1MA==&amp;mid=2247484317&amp;idx=1&amp;sn=1a5d78d0e5d5e09b1d2ca969a5ae7d23&amp;chksm=ceb09ce0f9c715f6688bf4b38a933730f61df7b432b3ac452924b502fba735e048289c3e0d91&amp;token=950928768&amp;lang=zh_CN#rd</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    var var1 = new Integer(1);</span><br><span class="line">    var var2 = new Integer(1);</span><br><span class="line">    System.out.println(var1.equals(var2));</span><br><span class="line"></span><br><span class="line">    System.out.println(var1.hashCode());</span><br><span class="line">    System.out.println(var2.hashCode());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(System.identityHashCode(var1));</span><br><span class="line">    System.out.println(System.identityHashCode(var2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">控制台输出</span><br><span class="line">true</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1524960486</span><br><span class="line">117009527</span><br></pre></td></tr></table></figure><p>org.springframework.cache.Cache对于缓存是应用接口，<br>Hashmap是否是在并发写的情况下，如果是则不是线程安全的<br>Consistency(一致性)<br>getinclude<br>想要看到源文档时，搜索：JSR107规范即可<br>推荐文章：<a href="https://www.jianshu.com/p/f6a1eae">https://www.jianshu.com/p/f6a1eae</a></p><h3 id="接着来看缓存类CacheManager"><a href="#接着来看缓存类CacheManager" class="headerlink" title="接着来看缓存类CacheManager"></a>接着来看缓存类CacheManager</h3><p>从名字就能看出是管理缓存的类，CacheManager有两种，一种是Spring的，一种是javax的，就是上面所说的扩展类，但实现确实大体一致，<br>就接口实现入手，先从最简单的看起，从名字看就是SimpleCacheManager，提供最基本的set方法，load方法。<br>SimpleCacheManager在spring-context包下，5.1.4版本，rediscachemanager在spring-data-redis包下<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/fg15k701aa.png" alt="流程"></p><blockquote><p>CachingProvider：创建、配置、获取、管理和控制多个CacheManager<br>CacheManager：创建、配置、获取、管理和控制多个唯一命名的Cache。（一个CacheManager仅被一个CachingProvider所拥有）<br>Cache：一个类似Map的数据结构。（一个Cache仅被一个CacheManager所拥有）<br>Entry：一个存储在Cache中的key-value对<br>Expiry：每一个存储在Cache中的条目有一个定义的有效期，过期后不可访问、更新、删除。缓存有效期可以通过ExpiryPolicy设置<br><a href="https://cloud.tencent.com/developer/article/1497762">https://cloud.tencent.com/developer/article/1497762</a><br>缓存么，除了快之外，还要满足有过期时间，但是除了在redis中并没有提供响应的方法，为什么呢？我觉得既然你启动或者加载就将bean放入cache管理了<br>就不可能伴随过期，应该会有响应的destroy方法在实例结束运行时清理，要不不可能实例还没运行完就进行清理吧。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Collection&lt;RedisCache&gt; <span class="title">loadCaches</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;RedisCache&gt; caches = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, RedisCacheConfiguration&gt; entry : initialCacheConfiguration.entrySet()) &#123;</span><br><span class="line">            caches.add(createRedisCache(entry.getKey(), entry.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> caches;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>读取缓存的配置时间，一级缓存60s，二级缓存30s<br>在spring-autoconfigure-metadata.properties中的org.springframework.data.redis.cache.RedisCacheConfiguration配置此参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration.AutoConfigureAfter=</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration</span><br></pre></td></tr></table></figure><p>启动时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">c.y.c.b.redis.config.RedisConfiguration  : [BSF][Redis]已启动,addressList:</span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">18</span> <span class="number">15</span>:<span class="number">04</span>:<span class="number">45.674</span>  INFO <span class="number">2604</span> --- [           main] c.y.c.b.e.c.EurekaClientConfiguration    : [BSF][Eureka-Client]已启动!!! eureka.client.serviceUrl.defaultZone=http:<span class="comment">//10.:8080/eureka/</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">18</span> <span class="number">15</span>:<span class="number">04</span>:<span class="number">47.846</span>  WARN <span class="number">2604</span> --- [           main] c.n.c.sources.URLConfigurationSource     : No URLs will be polled as dynamic configuration sources.</span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">18</span> <span class="number">15</span>:<span class="number">04</span>:<span class="number">47.847</span>  INFO <span class="number">2604</span> --- [           main] c.n.c.sources.URLConfigurationSource     : To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.</span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">18</span> <span class="number">15</span>:<span class="number">04</span>:<span class="number">47.943</span>  INFO <span class="number">2604</span> --- [           main] c.netflix.config.DynamicPropertyFactory  : DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@4bf9f44b</span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">18</span> <span class="number">15</span>:<span class="number">04</span>:<span class="number">54.662</span>  INFO <span class="number">2604</span> --- [           main] c.y.c.b.s.ShardingJdbcConfiguration      : [BSF][Sharding-jdbc]已启动!!!</span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">18</span> <span class="number">15</span>:<span class="number">04</span>:<span class="number">57.232</span>  INFO <span class="number">2604</span> --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-<span class="number">1</span>&#125; inited</span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">18</span> <span class="number">15</span>:<span class="number">04</span>:<span class="number">58.661</span>  INFO <span class="number">2604</span> --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-<span class="number">2</span>&#125; inited</span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">18</span> <span class="number">15</span>:<span class="number">05</span>:<span class="number">02.531</span> ERROR <span class="number">2604</span> --- [           main] c.b.mybatisplus.MybatisConfiguration </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者在redisconfig中配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCacheConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">simpleKeyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (o, method, objects) -&gt; &#123;</span><br><span class="line">            StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            stringBuilder.append(o.getClass().getSimpleName());</span><br><span class="line">            stringBuilder.append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">            stringBuilder.append(method.getName());</span><br><span class="line">            stringBuilder.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Object obj : objects) &#123;</span><br><span class="line">                stringBuilder.append(obj.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            stringBuilder.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisCacheManager(</span><br><span class="line">            RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory),</span><br><span class="line">            <span class="keyword">this</span>.getRedisCacheConfigurationWithTtl(<span class="number">600</span>), <span class="comment">// 默认策略，未配置的 key 会使用这个</span></span><br><span class="line">            <span class="keyword">this</span>.getRedisCacheConfigurationMap() <span class="comment">// 指定 key 策略</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, RedisCacheConfiguration&gt; <span class="title">getRedisCacheConfigurationMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, RedisCacheConfiguration&gt; redisCacheConfigurationMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        redisCacheConfigurationMap.put(<span class="string">&quot;UserInfoList&quot;</span>, <span class="keyword">this</span>.getRedisCacheConfigurationWithTtl(<span class="number">3000</span>));</span><br><span class="line">        redisCacheConfigurationMap.put(<span class="string">&quot;UserInfoListAnother&quot;</span>, <span class="keyword">this</span>.getRedisCacheConfigurationWithTtl(<span class="number">18000</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisCacheConfigurationMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RedisCacheConfiguration <span class="title">getRedisCacheConfigurationWithTtl</span><span class="params">(Integer seconds)</span> </span>&#123;</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig();</span><br><span class="line">        redisCacheConfiguration = redisCacheConfiguration.serializeValuesWith(</span><br><span class="line">            RedisSerializationContext</span><br><span class="line">                .SerializationPair</span><br><span class="line">                .fromSerializer(jackson2JsonRedisSerializer)</span><br><span class="line">        ).entryTtl(Duration.ofSeconds(seconds));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisCacheConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">过期时间</span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;UserInfoList&quot;, keyGenerator = &quot;simpleKeyGenerator&quot;)</span> <span class="comment">// 3000秒</span></span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;UserInfoListAnother&quot;, keyGenerator = &quot;simpleKeyGenerator&quot;)</span> <span class="comment">// 18000秒</span></span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;DefaultKeyTest&quot;, keyGenerator = &quot;simpleKeyGenerator&quot;)</span> <span class="comment">// 600秒，未指定的key，使用默认策略</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>在spring2.0前后差异<br>构造器差异<br>before</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RedisCacheManager cacheManager = <span class="keyword">new</span> RedisCacheManager(RedisTemplate redisTemplate);</span><br></pre></td></tr></table></figure><p>after</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RedisCacheManager cacheManager = <span class="keyword">new</span> RedisCacheManager(RedisCacheWriter redisCacheWriter,RedisCacheConfiguration redisCacheConfiguration);</span><br></pre></td></tr></table></figure><p>创建RedisCacheWriter分为有锁和无锁<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/rediscachewriter.png" alt="流程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> RedisCacheWriter <span class="title">nonLockingRedisCacheWriter</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Assert.notNull(connectionFactory, <span class="string">&quot;ConnectionFactory must not be null!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultRedisCacheWriter(connectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    JedisConnectionFactory</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create new &#123;<span class="doctag">@link</span> RedisCacheWriter&#125; with locking behavior.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connectionFactory must not be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> new instance of &#123;<span class="doctag">@link</span> DefaultRedisCacheWriter&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> RedisCacheWriter <span class="title">lockingRedisCacheWriter</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Assert.notNull(connectionFactory, <span class="string">&quot;ConnectionFactory must not be null!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultRedisCacheWriter(connectionFactory, Duration.ofMillis(<span class="number">50</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>即使是同一个缓存CacheManager管理的缓存实例，配置有可能不一样。<br>指定redis数据序列化<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/connectionfactory.png" alt="流程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(keySerializer()))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(valueSerializer()))</span><br></pre></td></tr></table></figure><p>JAVA序列化方式<br>序列化方式一实现：Serializable接口<br>序列化方式二：Externalizable显式序列化<br>序列化方式三：实现Serializable接口+添加writeObject()和readObject()方法。(显+隐序列化)<br>对了，想要使用cache记得开启缓存注解，@EnableCaching<br>转过头来看下CacheOperation，这里面是缓存相关注解的父类，在SpringCacheAnnotationParser中管理了子类相关</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static &#123;</span><br><span class="line">        CACHE_OPERATION_ANNOTATIONS.add(Cacheable.class);</span><br><span class="line">        CACHE_OPERATION_ANNOTATIONS.add(CacheEvict.class);</span><br><span class="line">        CACHE_OPERATION_ANNOTATIONS.add(CachePut.class);</span><br><span class="line">        CACHE_OPERATION_ANNOTATIONS.add(Caching.class);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>解析注解的时候他们的入参，实现一模一样，只有返回值不一样，但是一模一样的代码写了三遍,为什么不判断类型动态返回呢~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Collection&lt;CacheOperation&gt; <span class="title">parseCacheAnnotations</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            DefaultCacheConfig cachingConfig, AnnotatedElement ae, <span class="keyword">boolean</span> localOnly)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Collection&lt;? extends Annotation&gt; anns = (localOnly ?</span><br><span class="line">                AnnotatedElementUtils.getAllMergedAnnotations(ae, CACHE_OPERATION_ANNOTATIONS) :</span><br><span class="line">                AnnotatedElementUtils.findAllMergedAnnotations(ae, CACHE_OPERATION_ANNOTATIONS));</span><br><span class="line">        <span class="keyword">if</span> (anns.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Collection&lt;CacheOperation&gt; ops = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        anns.stream().filter(ann -&gt; ann <span class="keyword">instanceof</span> Cacheable).forEach(</span><br><span class="line">                ann -&gt; ops.add(parseCacheableAnnotation(ae, cachingConfig, (Cacheable) ann)));</span><br><span class="line">        anns.stream().filter(ann -&gt; ann <span class="keyword">instanceof</span> CacheEvict).forEach(</span><br><span class="line">                ann -&gt; ops.add(parseEvictAnnotation(ae, cachingConfig, (CacheEvict) ann)));</span><br><span class="line">        anns.stream().filter(ann -&gt; ann <span class="keyword">instanceof</span> CachePut).forEach(</span><br><span class="line">                ann -&gt; ops.add(parsePutAnnotation(ae, cachingConfig, (CachePut) ann)));</span><br><span class="line">        anns.stream().filter(ann -&gt; ann <span class="keyword">instanceof</span> Caching).forEach(</span><br><span class="line">                ann -&gt; parseCachingAnnotation(ae, cachingConfig, (Caching) ann, ops));</span><br><span class="line">        <span class="keyword">return</span> ops;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> CacheableOperation <span class="title">parseCacheableAnnotation</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            AnnotatedElement ae, DefaultCacheConfig defaultConfig, Cacheable cacheable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        CacheableOperation.Builder builder = <span class="keyword">new</span> CacheableOperation.Builder();</span><br><span class="line"></span><br><span class="line">        builder.setName(ae.toString());</span><br><span class="line">        builder.setCacheNames(cacheable.cacheNames());</span><br><span class="line">        builder.setCondition(cacheable.condition());</span><br><span class="line">        builder.setUnless(cacheable.unless());</span><br><span class="line">        builder.setKey(cacheable.key());</span><br><span class="line">        builder.setKeyGenerator(cacheable.keyGenerator());</span><br><span class="line">        builder.setCacheManager(cacheable.cacheManager());</span><br><span class="line">        builder.setCacheResolver(cacheable.cacheResolver());</span><br><span class="line">        builder.setSync(cacheable.sync());</span><br><span class="line"></span><br><span class="line">        defaultConfig.applyDefault(builder);</span><br><span class="line">        CacheableOperation op = builder.build();</span><br><span class="line">        validateCacheOperation(ae, op);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> op;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> CacheEvictOperation <span class="title">parseEvictAnnotation</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            AnnotatedElement ae, DefaultCacheConfig defaultConfig, CacheEvict cacheEvict)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        CacheEvictOperation.Builder builder = <span class="keyword">new</span> CacheEvictOperation.Builder();</span><br><span class="line"></span><br><span class="line">        builder.setName(ae.toString());</span><br><span class="line">        builder.setCacheNames(cacheEvict.cacheNames());</span><br><span class="line">        builder.setCondition(cacheEvict.condition());</span><br><span class="line">        builder.setKey(cacheEvict.key());</span><br><span class="line">        builder.setKeyGenerator(cacheEvict.keyGenerator());</span><br><span class="line">        builder.setCacheManager(cacheEvict.cacheManager());</span><br><span class="line">        builder.setCacheResolver(cacheEvict.cacheResolver());</span><br><span class="line">        builder.setCacheWide(cacheEvict.allEntries());</span><br><span class="line">        builder.setBeforeInvocation(cacheEvict.beforeInvocation());</span><br><span class="line"></span><br><span class="line">        defaultConfig.applyDefault(builder);</span><br><span class="line">        CacheEvictOperation op = builder.build();</span><br><span class="line">        validateCacheOperation(ae, op);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> op;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> CacheOperation <span class="title">parsePutAnnotation</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            AnnotatedElement ae, DefaultCacheConfig defaultConfig, CachePut cachePut)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        CachePutOperation.Builder builder = <span class="keyword">new</span> CachePutOperation.Builder();</span><br><span class="line"></span><br><span class="line">        builder.setName(ae.toString());</span><br><span class="line">        builder.setCacheNames(cachePut.cacheNames());</span><br><span class="line">        builder.setCondition(cachePut.condition());</span><br><span class="line">        builder.setUnless(cachePut.unless());</span><br><span class="line">        builder.setKey(cachePut.key());</span><br><span class="line">        builder.setKeyGenerator(cachePut.keyGenerator());</span><br><span class="line">        builder.setCacheManager(cachePut.cacheManager());</span><br><span class="line">        builder.setCacheResolver(cachePut.cacheResolver());</span><br><span class="line"></span><br><span class="line">        defaultConfig.applyDefault(builder);</span><br><span class="line">        CachePutOperation op = builder.build();</span><br><span class="line">        validateCacheOperation(ae, op);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> op;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseCachingAnnotation</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            AnnotatedElement ae, DefaultCacheConfig defaultConfig, Caching caching, Collection&lt;CacheOperation&gt; ops)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Cacheable[] cacheables = caching.cacheable();</span><br><span class="line">        <span class="keyword">for</span> (Cacheable cacheable : cacheables) &#123;</span><br><span class="line">            ops.add(parseCacheableAnnotation(ae, defaultConfig, cacheable));</span><br><span class="line">        &#125;</span><br><span class="line">        CacheEvict[] cacheEvicts = caching.evict();</span><br><span class="line">        <span class="keyword">for</span> (CacheEvict cacheEvict : cacheEvicts) &#123;</span><br><span class="line">            ops.add(parseEvictAnnotation(ae, defaultConfig, cacheEvict));</span><br><span class="line">        &#125;</span><br><span class="line">        CachePut[] cachePuts = caching.put();</span><br><span class="line">        <span class="keyword">for</span> (CachePut cachePut : cachePuts) &#123;</span><br><span class="line">            ops.add(parsePutAnnotation(ae, defaultConfig, cachePut));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>JSR(JCP  Java Community Process)文档查询地址，例如JSR107规范，servlet规范等等，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/web.html</span><br></pre></td></tr></table></figure><p>以及各类中文版在线开发文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//www.docs4dev.com/docs</span></span><br></pre></td></tr></table></figure><p>对了本次的主题虽然是Servlet,但不全是Servlet,都是用servlet带出来的,比如现在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DynamicThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="keyword">boolean</span> waitForTasksToCompleteOnShutdown,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="keyword">long</span> awaitTerminationMillis,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="meta">@NonNull</span> BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="meta">@NonNull</span> String threadPoolId,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="meta">@NonNull</span> ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="meta">@NonNull</span> RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, waitForTasksToCompleteOnShutdown, awaitTerminationMillis, workQueue, threadPoolId, threadFactory, handler);</span><br><span class="line">       <span class="keyword">this</span>.threadPoolId = threadPoolId;</span><br><span class="line"></span><br><span class="line">       RejectedExecutionHandler rejectedProxy = (RejectedExecutionHandler) Proxy</span><br><span class="line">               .newProxyInstance(</span><br><span class="line">                       handler.getClass().getClassLoader(),</span><br><span class="line">                       <span class="keyword">new</span> Class[]&#123;RejectedExecutionHandler.class&#125;,</span><br><span class="line">                       <span class="keyword">new</span> RejectedProxyInvocationHandler(handler, rejectCount));</span><br><span class="line">       setRejectedExecutionHandler(rejectedProxy);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>mybatis动态代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">newInstance</span><span class="params">(MapperProxy&lt;T&gt; mapperProxy)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里使用JDK动态代理，通过Proxy.newProxyInstance生成动态代理类</span></span><br><span class="line">    <span class="comment">// newProxyInstance的参数：类加载器、接口类、InvocationHandler接口实现类</span></span><br><span class="line">    <span class="comment">// 动态代理可以将所有接口的调用重定向到调用处理器InvocationHandler，调用它的invoke方法</span></span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), <span class="keyword">new</span> Class[] &#123; mapperInterface &#125;, mapperProxy);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MapperProxy&lt;T&gt; mapperProxy = <span class="keyword">new</span> MapperProxy&lt;&gt;(sqlSession, mapperInterface, methodCache);</span><br><span class="line">    <span class="keyword">return</span> newInstance(mapperProxy);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>问题： 一个接口方法,返回值相同,方法相同,参数为Person,现在有子类PersonMan和PersonWoman,如何对接口进行适配？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonMan</span> <span class="keyword">extends</span>  <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String character;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonWoman</span>  <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String constellation;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在泛型类型中支持class等，以及省去参数转换的上界通配符&lt;? extends E&gt;：上界通配符，表明参数化类型可能是所指定的类型，或者此类型的子类；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ElementType</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class="line">    TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Field declaration (includes enum constants) */</span></span><br><span class="line">    FIELD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Method declaration */</span></span><br><span class="line">    METHOD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Formal parameter declaration */</span></span><br><span class="line">    PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Constructor declaration */</span></span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Local variable declaration */</span></span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Annotation type declaration */</span></span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Package declaration */</span></span><br><span class="line">    PACKAGE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Type parameter declaration</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use of a type</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_USE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public interface PersonService &#123;</span><br><span class="line"></span><br><span class="line">    public void  queryPerson(List&lt;? extends Person&gt; list);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class PersonServiceImpl implements PersonService&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void queryPerson(List&lt;? extends Person&gt; list) &#123;</span><br><span class="line">        System.out.println(JSONObject.toJSONString(list));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;Person&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//List&lt;PersonMan&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//List&lt;PersonWoman&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">personService.queryPerson(list);</span><br></pre></td></tr></table></figure><p>那么如果参数类型为注解呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryPerson</span><span class="params">(List&lt;? extends Person&gt; list,Class&lt;? extends Annotation&gt; t)</span> </span>&#123;</span><br><span class="line">        System.out.println(JSONObject.toJSONString(list));</span><br><span class="line">       </span><br><span class="line">        System.out.println(cast.annotationType());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>那么为什么上面的parsePutAnnotation不用呢？<br>NONONO,其实是用了的,只不过方法不同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private static final Set&lt;Class&lt;? extends Annotation&gt;&gt; CACHE_OPERATION_ANNOTATIONS = new LinkedHashSet&lt;&gt;(8);</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        CACHE_OPERATION_ANNOTATIONS.add(Cacheable.class);</span><br><span class="line">        CACHE_OPERATION_ANNOTATIONS.add(CacheEvict.class);</span><br><span class="line">        CACHE_OPERATION_ANNOTATIONS.add(CachePut.class);</span><br><span class="line">        CACHE_OPERATION_ANNOTATIONS.add(Caching.class);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其实我就是看他的写的emoj,而且在caching这个注解里他包含了4种注解,然后统一进行管理的。</p><p>插播：Dbeaver中普通操作都会,安利一个类似idea的快捷键功能，Template—&gt;SQL编辑器中可设置常用SQL,快捷键加Tab唤出.</p><h3 id="国际化包含文本的国际化和时区的国际化"><a href="#国际化包含文本的国际化和时区的国际化" class="headerlink" title="国际化包含文本的国际化和时区的国际化"></a>国际化包含文本的国际化和时区的国际化</h3><h3 id="Repository-VS-NoRepositoryBean"><a href="#Repository-VS-NoRepositoryBean" class="headerlink" title="@Repository VS  @NoRepositoryBean"></a>@Repository VS  @NoRepositoryBean</h3><p>回到cache相关中，在开启缓存时提示错误需要加入@Enablecahing注解，而在验证缓存注解时，在接口加了NoRepositoryBean，那么NoRepositoryBean又是什么？跟@Repository有何不同？<br>NoRepositoryBean：见名知意就是不需要创建的bean，在Springboot jpa中标识，雷同与不需要序列化的字段标识transient；<br>NoRepositoryBean用做标记当前接口或者类（抽象）不应该作为RepositoryBean被注册到Spring上下文，Springdata提供了自动代理的机制</p><h2 id="JMS-java-message-service-JSR-914"><a href="#JMS-java-message-service-JSR-914" class="headerlink" title="JMS(java  message service)JSR-914"></a>JMS(java  message service)JSR-914</h2><p>1.JMS：用于应用程序之间，或在分布式系统中发送消息。而一些生产者，消费者，消息等不是消息队列的特指，而是JMS的所有特性。<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/jms.jpg" alt="Liucheng"><br>2.AMQP：(Advanced Message Queuing Protocol)<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/AMQP.png" alt="Liucheng"><br>消息队列协议,中文规范，消息代理(message brokers) 从发布者（publisher）亦称作生产者（producers）接受消息，根据<br>不同的路由规则（Routing Rule）把接受到的消息发送给处理消息的消费者（consumers）；</p><h1 id="3-kafka-零拷贝？-哎嗨，重点来了"><a href="#3-kafka-零拷贝？-哎嗨，重点来了" class="headerlink" title="3.kafka? 零拷贝？ 哎嗨，重点来了"></a>3.kafka? 零拷贝？ 哎嗨，重点来了</h1><p>官网：<a href="https://kafka.apache.org/">https://kafka.apache.org/</a><br>Kafka是一个分布式的基于发布/订阅模式的消息队列（Message Queue），主要应用于大数据实时处理领域。<br>其实大多数的消息队列的实时性只能保持在秒级，而在银行是能够在纳秒之间的，kafka2.8.x之前是基于zookeeper的，<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/kafka.png" alt="kafka"><br>架构图<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/kafka2.png" alt="kafka"></p><p>默认分区内存大小32M，每个批次大小是16K<br>1.批次数据满了才会发送，16K<br>2.linger.ms批次数据未满时，延迟发送时间<br>Sender数据拉取<br>同步vs异步发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>配置</span><br><span class="line"><span class="number">2.</span>连接集群</span><br><span class="line"><span class="number">3.</span>指定序列化类型</span><br><span class="line"><span class="number">4.</span>创建生产者</span><br><span class="line"><span class="number">5.</span>发送数据</span><br><span class="line"><span class="number">6.</span>关闭资源</span><br></pre></td></tr></table></figure><p>分区自定义，合理使用资源，负载均衡<br>可配置类都要放到统一类管理<br>1.指定分区的情况<br>2.没有指定分区，带key，key的hash值与topic的分区值取模<br>3.没有指定分区，不带key，粘性分区，随机选择一个分区，尽可能一直使用该分区<br>自定义分区器：实现分区器接口<br>一般会说那个表名作为key<br>自定义分区器：<br>恰好达到批次大小就进行发送<br>导致数据延迟：<br>生产环境配置5-100ms之间<br>压缩类型snappy<br>提供生产者吞吐量<br>应答ack  0   1  -1<br>动态ISR replica.lag.time.max.ms默认30s，超出则踢出<br>数据完全可靠条件：<br><font color="red"> ACK级别设置为1 +分区副本大于等于2 +ISR应答最小副本数量大于等于2  </font><br>要求可靠性<br>要求速度<br>默认值为int最大值<br>ack和重试数据<br>幂等性和事务:保证单分区单回话内不会重复<br>开启事务，必须开启幂等性<br>指定事务id<br>数据有序<br>单分区有序：<br>多分区有序：<br>数据乱序<br>kafka1.x前后差别：<br>是否开启幂等性区别：<br>其中一个出现异常则先缓存，后落盘<br>zookeeper中存放的信息<br>工具：prettyzoo</p><p>1、brokerid<br>2、主题<br>3.消费者信息</p><p><font color="green">AR:是kafka中你那个所有分区副本的总称</font><br><font color="green">ISR:leader和follower之间正常通讯的节点</font><br>除了基础知识点之外我最想看的就是kafka的零拷贝跟netty的关系。</p><blockquote><p>DMA<br>在介绍零拷贝之前，我们先来看一个技术名词DMA（Direct Memory Access<br>直接内存访问）。它是现代电脑的重要特征之一，允许不同速度的硬件之间直接交互，而不需要占用CPU的中断负载。DMA传输将一个地址空间复制到另一个地址空间，当CPU<br>初始化这个传输之后，实际的数据传输是有DMA设备之间完成，这样可以大大的减少CPU的消耗。我们常见的硬件设备都支持DMA</p></blockquote><p>零拷贝有两种方式：mmap/sendfile，而直接内存的方式跟Netty也是如出一辙。<br>关于压缩类型snappy,他是Java提供的实现，在maven以来中可在kafka中看到<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/snappy.png" alt="kafka"></p><h3 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">org.apache.kafka.clients.producer.ProducerRecord</span><br><span class="line">    可指定主题</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String topic;</span><br><span class="line">    分区</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer partition;</span><br><span class="line">    头信息</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Headers headers;</span><br><span class="line">    key</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> K key;</span><br><span class="line">    value</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> V value;</span><br><span class="line">    linger.ms</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Long timestamp;</span><br></pre></td></tr></table></figure><p>构造器有几种，对于发送消息就有几种类型，consumerRecord同理，key和value需要指定序列化类。<br>所有的配置项存放在ProducerConfig中,本来想看几个代表性参数就可以了,但是后续的调优参数有很多配置是用的到的,还是要仔细看看。<br>比如每个batchsize批次内存大小默认是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.define(BATCH_SIZE_CONFIG, Type.INT, 16384, atLeast(0), Importance.MEDIUM, BATCH_SIZE_DOC)</span><br></pre></td></tr></table></figure><p>16384/1024=16k<br>比如linger.ms默认为0ms</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.define(LINGER_MS_CONFIG, Type.LONG, 0, atLeast(0), Importance.MEDIUM, LINGER_MS_DOC)</span><br></pre></td></tr></table></figure><p>key指定的序列化类为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Serializer class for key that implements the &lt;code&gt;org.apache.kafka.common.serialization.Serializer&lt;/code&gt; interface.</span><br><span class="line">如果在配置文件中指定则需要全限定类名</span><br></pre></td></tr></table></figure><h3 id="zookeeper中存放的信息"><a href="#zookeeper中存放的信息" class="headerlink" title="zookeeper中存放的信息"></a>zookeeper中存放的信息</h3><p>broker启动后在zookeeper中注册<br>controller将节点信息记录到zookeeper中，推荐使用工具链接prettyzoo，存放brokerid，topic，消费者信息等。</p><h3 id="Linux新增知识点"><a href="#Linux新增知识点" class="headerlink" title="Linux新增知识点"></a>Linux新增知识点</h3><p>kafka 搭配 xcall jps ，查看集群下机器节点</p><h3 id="kafka服务器挂了怎么办？"><a href="#kafka服务器挂了怎么办？" class="headerlink" title="kafka服务器挂了怎么办？"></a>kafka服务器挂了怎么办？</h3><p>1.先尝试重启，重启成功直接解决<br>2.增加内存，CPU，宽带<br>3.如果副本数大于等于2，可以按照服役新节点方法执行，并配置负载均衡</p><h3 id="Broker中的重要参数"><a href="#Broker中的重要参数" class="headerlink" title="Broker中的重要参数"></a>Broker中的重要参数</h3><table><thead><tr><th align="left">参数名称</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">replica.lag.time.max.ms</td><td align="left">ISR 中，如果 Follower 长时间未向 Leader 发送通信请求或同步数据，则该 Follower 将被踢出 ISR。该时间阈值，<font color="red">默认30s</font> 。</td></tr><tr><td align="left">auto.leader.rebalance.enable</td><td align="left"><font color="red">默认是 true</font>。 自动 Leader Partition 平衡。</td></tr><tr><td align="left">leader.imbalance.per.broker.percentage</td><td align="left"><font color="red">默认是 10%</font>。每个 broker 允许的不平衡的 leader的比率。如果每个 broker 超过了这个值，控制器会触发 leader 的平衡。</td></tr><tr><td align="left">leader.imbalance.check.interval.seconds</td><td align="left"><font color="red">认值 300 秒 </font>。检查 leader 负载是否平衡的间隔时间。</td></tr><tr><td align="left">log.segment.bytes</td><td align="left">Kafka 中 log 日志是分成一块块存储的，此配置是指 log 日志划分 成块的大小，<font color="red">默认值 1G</font>。</td></tr><tr><td align="left">log.index.interval.bytes</td><td align="left"><font color="red">默认 4kb</font>，kafka 里面每当写入了 4kb 大小的日志（.log），然后就往 index 文件里面记录一个索引</td></tr><tr><td align="left">log.retention.hours</td><td align="left">Kafka 中数据保存的时间，<font color="red">默认7天</font>。</td></tr><tr><td align="left">log.retention.minutes</td><td align="left">Kafka 中数据保存的时间，分钟级别，<font color="red">默认关闭</font>。</td></tr></tbody></table><h3 id="文件清理策略"><a href="#文件清理策略" class="headerlink" title="文件清理策略"></a>文件清理策略</h3><p>Kafka 中默认的日志保存时间为<font color="red">7天</font>。<br>日志删除策略</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;If-I-have-seen-further-it-is-by-standing-on-the-shoulders-of-giants&quot;&gt;&lt;a href=&quot;#If-I-have-seen-further-it-is-by-standing-on-the-shoul</summary>
      
    
    
    
    
    <category term="Springboot" scheme="https://zkkget.github.io/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>如何删除valine评论</title>
    <link href="https://zkkget.github.io/2022/01/26/%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4valine%E8%AF%84%E8%AE%BA/"/>
    <id>https://zkkget.github.io/2022/01/26/%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4valine%E8%AF%84%E8%AE%BA/</id>
    <published>2022-01-26T03:29:50.000Z</published>
    <updated>2022-01-26T03:36:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.登陆leancloud</p><p>2.找到结构话数据–comment<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/cloud.png" alt="流程"><br>3.将测试数据一一删掉</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.登陆leancloud&lt;/p&gt;
&lt;p&gt;2.找到结构话数据–comment&lt;br&gt;&lt;img src=&quot;https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/cloud.png&quot; alt=&quot;流程&quot;&gt;&lt;br&gt;3.将测试数据一一删</summary>
      
    
    
    
    
    <category term="valine" scheme="https://zkkget.github.io/tags/valine/"/>
    
  </entry>
  
  <entry>
    <title>开源堡垒机jumpserver安装部署</title>
    <link href="https://zkkget.github.io/2022/01/14/%E5%BC%80%E6%BA%90%E5%A0%A1%E5%9E%92%E6%9C%BAjumpserver%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <id>https://zkkget.github.io/2022/01/14/%E5%BC%80%E6%BA%90%E5%A0%A1%E5%9E%92%E6%9C%BAjumpserver%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</id>
    <published>2022-01-14T07:18:48.000Z</published>
    <updated>2022-01-14T07:25:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="临时高可用架构方案如下"><a href="#临时高可用架构方案如下" class="headerlink" title="临时高可用架构方案如下"></a>临时高可用架构方案如下</h1><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E5%A0%A1%E5%9E%92%E6%9C%BA.png" alt="流程"></p><p>一，安装mysql数据库</p><p>1 ，安装（步骤省略）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">yum -y localinstall http:<span class="comment">//mirrors.ustc.edu.cn/mysql-repo/mysql57-community-release-el7.rpm</span></span><br><span class="line"></span><br><span class="line">yum install -y mysql-community-server</span><br><span class="line"></span><br><span class="line">systemctl enable mysqld</span><br><span class="line"></span><br><span class="line">systemctl start mysqld</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> ，数据库授权</span><br><span class="line"></span><br><span class="line">mysql –uroot</span><br><span class="line"></span><br><span class="line">create database jumpserver <span class="keyword">default</span> charset <span class="string">&#x27;utf8&#x27;</span> ;</span><br><span class="line"></span><br><span class="line">set global validate_password_policy = LOW ;</span><br><span class="line"></span><br><span class="line">create user <span class="string">&#x27;jumpserver&#x27;</span> @<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27; z&amp;cemb2iqYPiC$N3&#x27;</span> ;</span><br><span class="line"></span><br><span class="line">grant all on jumpserver . * to <span class="string">&#x27;jumpserver&#x27;</span> @<span class="string">&#x27;%&#x27;</span> ;</span><br><span class="line"></span><br><span class="line">flush privileges ;</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>二，安装jumperver</p><p>1 ，下载安装包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /data</span><br><span class="line"></span><br><span class="line">wget https:<span class="comment">//github.com/jumpserver/installer/releases/download/v2.16.3/jumpserver-installer-v2.16.3.tar.gz</span></span><br><span class="line"></span><br><span class="line">tar -xf jumpserver-installer-v2<span class="number">.16</span><span class="number">.3</span>.tar.gz</span><br><span class="line"></span><br><span class="line">cd jumpserver-installer-v2<span class="number">.16</span><span class="number">.3</span></span><br></pre></td></tr></table></figure><p>2 ，调整配置模板</p><h1 id="根据需要修改配置文件模板-如果不清楚用途可以跳过修改"><a href="#根据需要修改配置文件模板-如果不清楚用途可以跳过修改" class="headerlink" title="根据需要修改配置文件模板, 如果不清楚用途可以跳过修改"></a>根据需要修改配置文件模板, 如果不清楚用途可以跳过修改</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat config-example.txt</span><br></pre></td></tr></table></figure><h1 id="以下设置如果为空系统会自动生成随机字符串填入"><a href="#以下设置如果为空系统会自动生成随机字符串填入" class="headerlink" title="以下设置如果为空系统会自动生成随机字符串填入"></a>以下设置如果为空系统会自动生成随机字符串填入</h1><h2 id="迁移请修改-SECRET-KEY-和-BOOTSTRAP-TOKEN-为原来的设置"><a href="#迁移请修改-SECRET-KEY-和-BOOTSTRAP-TOKEN-为原来的设置" class="headerlink" title="迁移请修改 SECRET_KEY 和 BOOTSTRAP_TOKEN 为原来的设置"></a>迁移请修改 SECRET_KEY 和 BOOTSTRAP_TOKEN 为原来的设置</h2><h2 id="完整参数文档-https-docs-jumpserver-org-zh-master-admin-guide-env"><a href="#完整参数文档-https-docs-jumpserver-org-zh-master-admin-guide-env" class="headerlink" title="完整参数文档 https://docs.jumpserver.org/zh/master/admin-guide/env/"></a>完整参数文档 <a href="https://docs.jumpserver.org/zh/master/admin-guide/env/">https://docs.jumpserver.org/zh/master/admin-guide/env/</a></h2><h2 id="MySQL-配置-USE-EXTERNAL-MYSQL-1-表示使用外置数据库-请输入正确的-MySQL-信息"><a href="#MySQL-配置-USE-EXTERNAL-MYSQL-1-表示使用外置数据库-请输入正确的-MySQL-信息" class="headerlink" title="MySQL 配置, USE_EXTERNAL_MYSQL=1 表示使用外置数据库, 请输入正确的 MySQL 信息"></a>MySQL 配置, USE_EXTERNAL_MYSQL=1 表示使用外置数据库, 请输入正确的 MySQL 信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">USE_EXTERNAL_MYSQL=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">DB_HOST= <span class="number">10.0</span><span class="number">.77</span><span class="number">.38</span></span><br><span class="line"></span><br><span class="line">DB_PORT= <span class="number">3306</span></span><br><span class="line"></span><br><span class="line">DB_USER= jumpserver</span><br><span class="line"></span><br><span class="line">DB_PASSWORD= z&amp;cemb2iqYPiC$N3</span><br><span class="line"></span><br><span class="line">DB_NAME= jumpserver</span><br><span class="line"></span><br><span class="line">  （ # 主要关注数据库相关配置文件）</span><br></pre></td></tr></table></figure><p>3 ，安装 jumpserver 服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="meta">@jumpserver</span>-slave /data/jumpserver-installer-v2<span class="number">.16</span><span class="number">.3</span>]$ ./jmsctl.sh install</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       ██╗██╗   ██╗███╗   ███╗██████╗ ███████╗███████╗██████╗ ██╗   ██╗███████╗██████╗</span><br><span class="line"></span><br><span class="line">       ██║██║   ██║████╗ ████║██╔══██╗██╔════╝██╔════╝██╔══██╗██║   ██║██╔════╝██╔══██╗</span><br><span class="line"></span><br><span class="line">       ██║██║   ██║██╔████╔██║██████╔╝███████╗█████╗  ██████╔╝██║   ██║█████╗  ██████╔╝</span><br><span class="line"></span><br><span class="line">  ██   ██║██║   ██║██║╚██╔╝██║██╔═══╝ ╚════██║██╔══╝  ██╔══██╗╚██╗ ██╔╝██╔══╝  ██╔══██╗</span><br><span class="line"></span><br><span class="line">  ╚█████╔╝╚██████╔╝██║ ╚═╝ ██║██║     ███████║███████╗██║  ██║ ╚████╔╝ ███████╗██║  ██║</span><br><span class="line"></span><br><span class="line">   ╚════╝  ╚═════╝ ╚═╝     ╚═╝╚═╝     ╚══════╝╚══════╝╚═╝  ╚═╝  ╚═══╝  ╚══════╝╚═╝  ╚═╝</span><br><span class="line"></span><br><span class="line">                                                                     Version:  v2<span class="number">.16</span><span class="number">.3</span></span><br><span class="line"></span><br><span class="line">需要手动操作的内容如下：</span><br><span class="line"></span><br><span class="line">    是否需要自定义 docker 存储目录, 默认将使用目录 /<span class="keyword">var</span>/lib/docker? (y/n)  (默认为 n): n</span><br><span class="line"></span><br><span class="line">    是否需要支持 IPv6? (y/n)  (默认为 n): n</span><br><span class="line"></span><br><span class="line">   是否需要自定义持久化存储, 默认将使用目录 /opt/jumpserver? (y/n)  (默认为 n): <span class="function">y</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   Persistent storage <span class="title">directory</span> <span class="params">(<span class="keyword">default</span> /opt/jumpserver)</span>: /data/jumpserver</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   是否使用外部 MySQL? <span class="params">(y/n)</span>  <span class="params">(默认为 n)</span>: y</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   请输入 MySQL 的主机地址 <span class="params">(无默认值)</span>: 10.0.77.38</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   请输入 MySQL 的端口 <span class="params">(默认为<span class="number">3306</span>)</span>: 3306</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   请输入 MySQL 的数据库<span class="params">(事先做好授权)</span> <span class="params">(默认为jumpserver)</span>: jumpserver</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   请输入 MySQL 的用户名 <span class="params">(无默认值)</span>: jumpserver</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   请输入 MySQL 的密码 <span class="params">(无默认值)</span>: z&amp;cemb2iqYPiC$N3</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    是否使用外部 Redis? <span class="params">(y/n)</span>  <span class="params">(默认为 n)</span>: n</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    是否需要配置 JumpServer 对外访问端口? <span class="params">(y/n)</span>  <span class="params">(默认为 n)</span>: n</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><p>三，修改docker数据目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#默认docker安装的数据目录为/var/lib/docker，需要迁移到数据盘/data/目录下</span><br><span class="line"></span><br><span class="line">mv -f /var/lib/docker /data/docker</span><br><span class="line"></span><br><span class="line">ln -sf /data/docker /var/lib/docker</span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>四，启动服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 安装完成后配置文件 /opt/jumpserver/config/config.txt</span><br><span class="line"></span><br><span class="line">cd /data/jumpserver-installer-v2.16.3</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line"></span><br><span class="line">./jmsctl.sh start</span><br><span class="line"></span><br><span class="line"># 其他常用操作</span><br><span class="line"></span><br><span class="line"># 停止</span><br><span class="line"></span><br><span class="line">./jmsctl.sh down</span><br><span class="line"></span><br><span class="line"># 卸载</span><br><span class="line"></span><br><span class="line">./jmsctl.sh uninstall</span><br><span class="line"></span><br><span class="line"># 帮助</span><br><span class="line"></span><br><span class="line">./jmsctl.sh –h</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>五，登录验证服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">登录：localhost</span><br><span class="line"></span><br><span class="line">默认账号：admin   默认密码：admin</span><br></pre></td></tr></table></figure><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E5%A0%A1%E5%9E%92%E6%9C%BA1.png" alt="流程"></p><p>六，部署高可用jumpserver服务</p><p>另外一台服务器上部署jumpserver服务，连接第一台服务器得mysql数据库</p><p>部署步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 ，下载安装包</span><br><span class="line"></span><br><span class="line">cd /data</span><br><span class="line"></span><br><span class="line">wget https://github.com/jumpserver/installer/releases/download/v2.16.3/jumpserver-installer-v2.16.3.tar.gz</span><br><span class="line"></span><br><span class="line">tar -xf jumpserver-installer-v2.16.3.tar.gz</span><br><span class="line"></span><br><span class="line">cd jumpserver-installer-v2.16.3</span><br></pre></td></tr></table></figure><p>2 ，安装服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@jumpserver-slave /data/jumpserver-installer-v2.16.3]$ ./jmsctl.sh install</span><br><span class="line"></span><br><span class="line">是否需要自定义 docker 存储目录, 默认将使用目录 /var/lib/docker? (y/n)  (默认为 n): n</span><br><span class="line"></span><br><span class="line">是否需要支持 IPv6? (y/n)  (默认为 n): n</span><br><span class="line"></span><br><span class="line">是否需要自定义持久化存储, 默认将使用目录 /opt/jumpserver? (y/n)  (默认为 n): y</span><br><span class="line"></span><br><span class="line">   Persistent storage directory (default /opt/jumpserver): /data/jumpserver</span><br><span class="line"></span><br><span class="line">是否使用外部 MySQL? (y/n)  (默认为 n): y</span><br><span class="line"></span><br><span class="line">   请输入 MySQL 的主机地址 (无默认值): 10.0.77.38</span><br><span class="line"></span><br><span class="line">   请输入 MySQL 的端口 (默认为3306): 3306</span><br><span class="line"></span><br><span class="line">   请输入 MySQL 的数据库(事先做好授权) (默认为jumpserver): jumpserver</span><br><span class="line"></span><br><span class="line">   请输入 MySQL 的用户名 (无默认值): jumpserver</span><br><span class="line"></span><br><span class="line">   请输入 MySQL 的密码 (无默认值): z&amp;cemb2iqYPiC$N3</span><br></pre></td></tr></table></figure><p>3 ，修改 docker 默认数据目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mv -f /var/lib/docker /data/docker</span><br><span class="line"></span><br><span class="line">ln -sf /data/docker /var/lib/docker</span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>4 ，启动服务</p><h1 id="安装完成后配置文件-opt-jumpserver-config-config-txt"><a href="#安装完成后配置文件-opt-jumpserver-config-config-txt" class="headerlink" title="安装完成后配置文件 /opt/jumpserver/config/config.txt"></a>安装完成后配置文件 /opt/jumpserver/config/config.txt</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/jumpserver-installer-v2.16.3</span><br></pre></td></tr></table></figure><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./jmsctl.sh start</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;临时高可用架构方案如下&quot;&gt;&lt;a href=&quot;#临时高可用架构方案如下&quot; class=&quot;headerlink&quot; title=&quot;临时高可用架构方案如下&quot;&gt;&lt;/a&gt;临时高可用架构方案如下&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://zkk-1300025204.c</summary>
      
    
    
    
    
    <category term="堡垒机" scheme="https://zkkget.github.io/tags/%E5%A0%A1%E5%9E%92%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>还在手动维护Yapi?</title>
    <link href="https://zkkget.github.io/2022/01/06/%E8%BF%98%E5%9C%A8%E6%89%8B%E5%8A%A8%E7%BB%B4%E6%8A%A4Yapi/"/>
    <id>https://zkkget.github.io/2022/01/06/%E8%BF%98%E5%9C%A8%E6%89%8B%E5%8A%A8%E7%BB%B4%E6%8A%A4Yapi/</id>
    <published>2022-01-06T08:56:46.000Z</published>
    <updated>2022-03-02T01:56:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【置顶】-留言请点击友链留言室或者在文章底部留言"><a href="#【置顶】-留言请点击友链留言室或者在文章底部留言" class="headerlink" title="【置顶】 留言请点击友链留言室或者在文章底部留言"></a>【置顶】 留言请点击友链留言室或者在文章底部留言</h1><p>因前后端人员通过接口定义字段，返回值等对接时非常苦恼，没有一个很好的平台维护，后端每次迭代都要写开发文档，需求变化，多系统联调等，给前后端联调造成阻塞。</p><h1 id="1、后端开发文档编写规范"><a href="#1、后端开发文档编写规范" class="headerlink" title="1、后端开发文档编写规范"></a>1、后端开发文档编写规范</h1><p>1）文档模板统一使用：xxx系统开发文档-模板.docx<br>2）后端每次迭代需要编写开发文档，并进行技术评审（前端、后端、测试、产品参与）<br>3）文档的命名方式：《产品名称-V版本号-设计开发文档-编写人》<br>4) 文档统一保存<br>5）后端必须在编写业务代码前，优先设计API（Swagger），并提供给测试和前端，最大化并行迭代。<br>6）允许特殊情况延期提供API，如：需求变化、多系统联调等。</p><h1 id="Swagger使用规范"><a href="#Swagger使用规范" class="headerlink" title="Swagger使用规范"></a>Swagger使用规范</h1><p>1）后端开发人员必须使用Swagger<br>2）API接口定义参数时，要明确备注信息和是否必须，样例如下：<br>public class SupplierReq {<br>   @NotEmpty(message = “姓名必填”)<br>   @ApiModelProperty(value = “员工姓名”, required = true)<br>   private String name;</p><p>   @Size(min = 6, max = 64, message = “手机号或工号不能为空，长度介于6~64之间”)<br>   @ApiModelProperty(value = “手机号”, required = true)<br>   private String telephone;<br>}<br>3）API定义业务方法时(Controller层)，使用Swagger注解@ApiOperation明确业务方法信息，样例如下：<br>@PostMapping(“/updateCatRateLimit”)<br>@ApiOperation(“设置监控项流控QPS”)<br>public CommonResponse<String> updateCatRateLimit(@RequestBody Req req) {<br>    return super.visit(() -&gt; mcenterRateLimitService.updateCatRateLimit(req));<br>}<br>具体swagger详细接口请参考：<a href="https://swagger.io/docs/">https://swagger.io/docs/</a></p><h1 id="后端接口输出太慢？"><a href="#后端接口输出太慢？" class="headerlink" title="后端接口输出太慢？"></a>后端接口输出太慢？</h1><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/image.png" alt="流程"><br>当接到新需求，进行产品需求评审–&gt;技术文档编写–&gt;数据库设计–&gt;业务梳理–&gt;测试用例评审等等流程下来，很难在短时间内给出接口，但即便如此，我也没听说过谁会因为后端给不出接口耽误前端开发进度<br>为了更快速的输出接口等响应，推荐api管理工具APIpost,swagger,Yapi等~<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/apipost.png" alt="apipost"></p><h1 id="Swagger遇见Yapi"><a href="#Swagger遇见Yapi" class="headerlink" title="Swagger遇见Yapi"></a>Swagger遇见Yapi</h1><h3 id="一-YapiUpload"><a href="#一-YapiUpload" class="headerlink" title="一 YapiUpload"></a>一 YapiUpload</h3><p>1、在IDEA-&gt;Preferences-&gt;Plugins中 输入YapiUpload插件，点击Install，重启IDEA后可以使用。<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/a4a92829-a7d3-4758-ad34-6b715fd4bd05.png" alt="流程"><br>2、配置项目<br>在我们已经从git同步的项目，打开.idea文件夹下的misc.xml，添加如下配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;component name=<span class="string">&quot;yapi&quot;</span>&gt;</span><br><span class="line">  &lt;option name=<span class="string">&quot;projectToken&quot;</span>&gt;yapi中获取项目token&lt;/option&gt;</span><br><span class="line">  &lt;option name=<span class="string">&quot;projectId&quot;</span>&gt;项目ID&lt;/option&gt;</span><br><span class="line">  &lt;option name=<span class="string">&quot;yapiUrl&quot;</span>&gt;http:<span class="comment">//mock.xxx.com&lt;/option&gt;</span></span><br><span class="line">  &lt;option name=<span class="string">&quot;projectType&quot;</span>&gt;api&lt;/option&gt;</span><br><span class="line">&lt;/component&gt;</span><br></pre></td></tr></table></figure><p>完整配置如下所示:<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E5%AE%8C%E6%95%B4%E9%85%8D%E7%BD%AE.png" alt="流程"><br> 获取配置信息:<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E8%8E%B7%E5%8F%96%E9%85%8D%E7%BD%AE.png" alt="流程"><br>3、接口上传<br>这一步是我们日常工作经常使用的操作，在我们编写好的接口类文件中，我们只需选中类名或者选中要上传接口的方法名右键选择“UploadToYapi”，两者的区别是，选择类名会上传此类中的全部接口，选择方法名仅上传单个接口，按需选择即可。参数非空需要加入 @NotNull或@NotEmpty。如果需要将接口传入指定目录下，需要在类上添加注释</p><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/c6418ea5-b7e2-41de-9582-3e82e717a8a9.png" alt="流程"></p><h3 id="批量上传"><a href="#批量上传" class="headerlink" title="批量上传"></a>批量上传</h3><p>将本地或者服务器环境生成的swagger.doc/swagger.json地址复制<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/import.png" alt="上传"><br>即可批量上传至Yapi~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【置顶】-留言请点击友链留言室或者在文章底部留言&quot;&gt;&lt;a href=&quot;#【置顶】-留言请点击友链留言室或者在文章底部留言&quot; class=&quot;headerlink&quot; title=&quot;【置顶】 留言请点击友链留言室或者在文章底部留言&quot;&gt;&lt;/a&gt;【置顶】 留言请点击友链留言</summary>
      
    
    
    
    
    <category term="Yapi" scheme="https://zkkget.github.io/tags/Yapi/"/>
    
  </entry>
  
  <entry>
    <title>RocketMq从入门到放弃</title>
    <link href="https://zkkget.github.io/2021/10/28/RocketMq%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    <id>https://zkkget.github.io/2021/10/28/RocketMq%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</id>
    <published>2021-10-28T07:46:52.000Z</published>
    <updated>2022-01-12T02:48:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【置顶】-留言请点击友链留言室或者在文章底部留言"><a href="#【置顶】-留言请点击友链留言室或者在文章底部留言" class="headerlink" title="【置顶】 留言请点击友链留言室或者在文章底部留言"></a>【置顶】 留言请点击友链留言室或者在文章底部留言</h1><h1 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h1><p><a href="http://rocketmq.apache.org/release_notes/release-notes-4.3.2/">http://rocketmq.apache.org/release_notes/release-notes-4.3.2/</a></p><h1 id="中文文档"><a href="#中文文档" class="headerlink" title="中文文档"></a>中文文档</h1><p><a href="https://rocketmq-1.gitbook.io/rocketmq-connector/quick-start/qian-qi-zhun-bei/dan-ji-huan-jing">https://rocketmq-1.gitbook.io/rocketmq-connector/quick-start/qian-qi-zhun-bei/dan-ji-huan-jing</a></p><h1 id="idea调试工具"><a href="#idea调试工具" class="headerlink" title="idea调试工具"></a>idea调试工具</h1><p><a href="https://www.jetbrains.com/help/idea/2019.1/debug-tool-window.html">https://www.jetbrains.com/help/idea/2019.1/debug-tool-window.html</a><br><a href="https://github.com/DillonDong/notes">https://github.com/DillonDong/notes</a></p><h1 id="Windows环境下安装RocketMQ"><a href="#Windows环境下安装RocketMQ" class="headerlink" title="Windows环境下安装RocketMQ"></a>Windows环境下安装RocketMQ</h1><p>一.预备环境<br>1.系统<br>Windows<br>2. 环境<br>JDK1.8、Maven、Git<br>二. RocketMQ部署<br>1.下载<br>1.1地址：<a href="http://rocketmq.apache.org/release_notes/release-notes-4.3.0/">http://rocketmq.apache.org/release_notes/release-notes-4.3.0/</a><br>1.2选择‘Binary’进行下载<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/rocktmq1.jpg" alt="rocketMq"><br>1.3解压已下载工程<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/rocktmq2.jpg" alt="rocketMq"><br>2. 配置<br>2.1 系统环境变量配置<br>变量名：ROCKETMQ_HOME<br>变量值：MQ解压路径\MQ文件夹名<br>eg、ROCKETMQ_HOME=D:\dev\rocketmq-all-4.3.0-bin-release<br>3. 启动<br>3.1 启动NAMESERVER<br>Cmd命令框执行进入至‘MQ文件夹\bin’下，然后执行‘start mqnamesrv.cmd’，启动NAMESERVER。成功后会弹出提示框，此框勿关闭。<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/rocktmq3.jpg" alt="rocketMq"><br>3.2 启动BROKER<br>Cmd命令框执行进入至‘MQ文件夹\bin’下，然后执行‘start mqbroker.cmd -n 127.0.0.1:9876 autoCreateTopicEnable=true’，启动BROKER。成功后会弹出提示框，此框勿关闭</p><ol start="2"><li>编译启动<br>用CMD进入‘\rocketmq-externals\rocketmq-console’文件夹，执行‘mvn clean package -Dmaven.test.skip=true’，编译生成。<br>编译成功之后，Cmd进入‘target’文件夹，执行‘java -jar rocketmq-console-ng-1.0.0.jar’，启动‘rocketmq-console-ng-1.0.0.jar’。</li><li>测试<br>浏览器中输入‘127.0.0.1:配置端口’，成功后即可查看。<br>eg：<a href="http://127.0.0.1:8088/">http://127.0.0.1:8088</a><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/rocketmq4.jpg" alt="rocketMq"></li></ol><h1 id="基本配置项"><a href="#基本配置项" class="headerlink" title="基本配置项"></a>基本配置项</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server.contextPath=</span><br><span class="line">server.port=8088</span><br><span class="line">#spring.application.index=true</span><br><span class="line">spring.application.name=rocketmq-console</span><br><span class="line">spring.http.encoding.charset=UTF-8</span><br><span class="line">spring.http.encoding.enabled=true</span><br><span class="line">spring.http.encoding.force=true</span><br><span class="line">logging.config=classpath:logback.xml</span><br><span class="line">#if this value is empty,use env value rocketmq.config.namesrvAddr  NAMESRV_ADDR | now, you can set it in ops page.default localhost:9876</span><br><span class="line">rocketmq.config.namesrvAddr=127.0.0.1:9876</span><br><span class="line">#if you use rocketmq version &lt; 3.5.8, rocketmq.config.isVIPChannel should be false.default true</span><br><span class="line">rocketmq.config.isVIPChannel=</span><br><span class="line">#rocketmq-console&#x27;s data path:dashboard/monitor</span><br><span class="line">rocketmq.config.dataPath=/tmp/rocketmq-console/data</span><br><span class="line">#set it false if you don&#x27;t want use dashboard.default true</span><br><span class="line">rocketmq.config.enableDashBoardCollect=true</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="java整合MQ"><a href="#java整合MQ" class="headerlink" title="java整合MQ"></a>java整合MQ</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RockermqproducerApplicationTests</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;apache.rocketmq.producer.producerGroup&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String producerGroup;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * NameServer 地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;apache.rocketmq.namesrvAddr&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String namesrvAddr;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//生产者的组名</span></span><br><span class="line">        DefaultMQProducer producer=<span class="keyword">new</span> DefaultMQProducer(producerGroup);</span><br><span class="line">        <span class="comment">//指定NameServer地址，多个地址以 ; 隔开</span></span><br><span class="line">        producer.setNamesrvAddr(namesrvAddr);</span><br><span class="line">        <span class="comment">//消息发送失败重试次数</span></span><br><span class="line">        producer.setRetryTimesWhenSendFailed(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//异步发送失败重试次数</span></span><br><span class="line">        producer.setRetryTimesWhenSendAsyncFailed(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//消息没有发送成功，是否发送到另外一个Broker中</span></span><br><span class="line">        producer.setRetryAnotherBrokerWhenNotStoreOK(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * Producer对象在使用之前必须要调用start初始化，初始化一次即可</span></span><br><span class="line"><span class="comment">             * 注意：切记不可以在每次发送消息时，都调用start方法</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            producer.start();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">10000</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Message msg=<span class="keyword">new</span> Message(<span class="string">&quot;topic_example_java&quot;</span>,<span class="string">&quot;TagA&quot;</span>,(<span class="string">&quot;Hello Java Demo RocketMQ:&quot;</span>+i).getBytes(Charset.defaultCharset()));</span><br><span class="line">                SendResult result=producer.send(msg);</span><br><span class="line">                System.out.println(<span class="string">&quot;消息发送结果：&quot;</span>+result);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            producer.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>消息消费顺序：全局消息顺序<br>  局部消息顺序</p><p>保证局部消息的顺序<br>只在一个队列保证一个人消费<br>消费时，同一个OrderId获取到的肯定是同一个队列。</p><p>消息存储结构</p><p>刷盘机制：同步刷盘<br>异步刷盘<br>RocketMQ的消息是存储到磁盘上的，这样既能保证断电后恢复， 又可以让存储的消息量超出内存的限制。RocketMQ为了提高性能，会尽可能地保证磁盘的<br>顺序写。消息在通过Producer写入RocketMQ的时 候，有两种写磁盘方式，分布式同步刷盘和异步刷盘<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/rocketmq5.jpg" alt="rocketMq"></p><p>顺序消息消费及时监控处理<br>对于顺序消息，当消费者消费消息失败后，消息队列 RocketMQ 会自动不断进行消息重试（每次间隔时间为 1 秒），这时，应用会出现消息消费被阻塞的情况。因此，在使用顺序消息时，务必保证应用能够及时监控并处理消费失败的情况，避免阻塞现象的发生<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/rocketmq6.jpg" alt="rocketMq"></p><p>消费幂等：若某操作执行多次或一次对系统产生的结果是相同的，则称该操作是幂等的<br>例如支付场景，因为网络原因导致二次消费，会不会造成重复扣款</p><blockquote><p>RocketMq的文件存储系统有两点优化以保证性能：</p></blockquote><blockquote><p>消息存储（顺序写）：RocketMQ的消息用顺序写,保证了消息存储的速度。目前的高性能磁盘，顺序写速度可以达到600MB/s，<br>超过了一般网卡的传输速度，但是磁盘随机写的速度只有大概100KB/s<br>消息发送（零拷贝）：将本机磁盘文件的内容发送到客户端需要进行多次复制，比如从磁盘复制数据到内核态内存；从内核态内存复制到用户态内存；从用户态内存复制到网络驱动，&gt;最后从网络驱动复制到网卡中。RocketMq采用Java中零拷贝的技术，让从内核态内存复制到用户态内存这一步省略，直接赋值到网络驱动中<br>零拷贝技术有个限制是不能超过2G，所以RocketMQ默认设置单个CommitLog日志数据文件为1G</p></blockquote><p>RokectMq架构<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/rocketmq7.jpg" alt="rocketMq"></p><h1 id="存储结构是什么样的？"><a href="#存储结构是什么样的？" class="headerlink" title="存储结构是什么样的？"></a>存储结构是什么样的？</h1><p>RocketMQ消息的存储是由ConsumeQueue和CommitLog配合完成的</p><p>CommitLog：消息真正的物理存储文件是CommitLog，默认一个文件一个G，存储的是Topic，QueueId和Message，一个存储满了会自动创建一个新的。<br>ConsumeQueue：是消息的逻辑队列，类似数据库的索引文件，存储的是指向物理存储的地址，为了加快消息的读取速度。消费者消费某条消息时，先查询索引获取CommitLog的对应的物理地址。每个Topic下的每个Message Queue都有一个对应的ConsumeQueue文件，文件很小，通常会加载到内存中。如果该文件丢失或者损坏，可以通过CommitLog恢复<br>IndexFile：也是个索引文件，为了消息查询提供了一种通过key或时间区间来查询消息的方法，这种通过IndexFile来查找消息的方法不影响发送与消费消息的主流程</p><h1 id="如何保证消息不丢失？"><a href="#如何保证消息不丢失？" class="headerlink" title="如何保证消息不丢失？"></a>如何保证消息不丢失？</h1><p>RocketMq提供消息持久化机制，消息的刷盘策略分为同步刷盘和异步刷盘。同步刷盘即刷盘成功后再返回一个成功信息，能够保证数据一定保存成功，但是会降低系统吞吐量，异步刷盘与同步刷盘相反，我一般会采用同步刷盘的策略来保证消息不会丢失。<br>RocketMq采用的文件系统存储而不是关系型数据库存储，因为在一般情况下文件系统的性能是比数据库性能高的<br>而RocketMq为了提高文件系统的读写的高性能，做了两点优化。第一点是采用顺序写的方式，这样可以大大提高磁盘写的性能。第二点采用了零拷贝，原来的文件读取流程是：从磁盘复制数据到内核态内存；从内核态内存复制到用户态内存；从用户态内存复制到网络驱动，最后从网络驱动复制到网卡中发送，零拷贝则省去了从内核态内存复制到用户态内存的这一过程，提高了读取的性能，但是零拷贝对文件大小有要求，所以RocketMq的持久化文件<font color=#0099ff size=3 face="黑体">commitlog默认为1G</font>。<br>commitlog是存储了RocketMq的消息等核心信息，除此之外，还提供可一个ConsumeQueue作为持久化文件的索引，提高查询的效率，一般文件比较小，都是加载在内存中。除了ConsumeQueue之外，还会存储一个IndexFile文件，用来提供针对某一个key或者时间区间的查询。</p><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><h2 id="Producer负载均衡"><a href="#Producer负载均衡" class="headerlink" title="Producer负载均衡"></a>Producer负载均衡</h2><p>Producer端，每个实例在发消息的时候，默认会轮询所有的message queue发送，以达到让消息平均落在不同的queue上。而由于queue可以散落在不同的broker，所以消息就发送到不同的broker下</p><h2 id="Consumer负载均衡"><a href="#Consumer负载均衡" class="headerlink" title="Consumer负载均衡"></a>Consumer负载均衡</h2><p>如果consumer实例的数量比message queue的总数量还多的话，多出来的consumer实例将无法分到queue，也就无法消费到消息，也就无法起到分摊负载的作用了。所以需要控制让queue的总数量大于等于consumer的数量。</p><p>消费者的集群模式–启动多个消费者就可以保证消费者的负载均衡（均摊队列）</p><p>默认使用的是均摊队列：会按照queue的数量和实例的数量平均分配queue给每个实例，这样每个消费者可以均摊消费的队列</p><h1 id="消息重试机制"><a href="#消息重试机制" class="headerlink" title="消息重试机制"></a>消息重试机制</h1><h2 id="1-顺序消息的重试"><a href="#1-顺序消息的重试" class="headerlink" title="1. 顺序消息的重试"></a>1. 顺序消息的重试</h2><p>对于顺序消息，当消费者消费消息失败后，消息队列 RocketMQ 会自动不断进行消息重试（每次间隔时间为 1 秒），这时，应用会出现消息消费被阻塞的情况。</p><p>因此，在使用顺序消息时，务必保证应用能够及时监控并处理消费失败的情况，避免阻塞现象的发生。</p><h2 id="2-无序消息的重试"><a href="#2-无序消息的重试" class="headerlink" title="2. 无序消息的重试"></a>2. 无序消息的重试</h2><p>对于无序消息（普通、定时、延时、事务消息），当消费者消费消息失败时，您可以通过设置返回状态达到消息重试的结果。</p><p>无序消息的重试只针对集群消费方式生效；广播方式不提供失败重试特性，即消费失败后，失败消息不再重试，继续消费新的消息。</p><p>消息队列 RocketMQ 默认允许每条消息最多重试 16 次，将会在接下来的 4 小时 46 分钟之内进行 16 次重试，如果依然失败就会进入死信队列。</p><p>一条消息无论重试多少次，这些重试消息的 Message ID 不会改变。</p><p>也可以通过配置，让其不再重试，但是不建议这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageListenerImpl</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Action <span class="title">consume</span><span class="params">(Message message, ConsumeContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            doConsumeMessage(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="comment">//捕获消费逻辑中的所有异常，并返回 Action.CommitMessage;</span></span><br><span class="line">            <span class="keyword">return</span> Action.CommitMessage;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//消息处理正常，直接返回 Action.CommitMessage;</span></span><br><span class="line">        <span class="keyword">return</span> Action.CommitMessage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="消费幂等"><a href="#消费幂等" class="headerlink" title="消费幂等"></a>消费幂等</h1><p>消息队列 RocketMQ 消费者在接收到消息以后，有必要根据业务上的唯一 Key 对消息做幂等处理的必要性。</p><h2 id="1-什么时候产生重复消息？"><a href="#1-什么时候产生重复消息？" class="headerlink" title="1. 什么时候产生重复消息？"></a>1. 什么时候产生重复消息？</h2><p>在互联网应用中，尤其在网络不稳定的情况下，消息队列 RocketMQ 的消息有可能会出现重复，这个重复简单可以概括为以下情况：</p><p>发送时消息重复</p><p>当一条消息已被成功发送到服务端并完成持久化，此时出现了网络闪断或者客户端宕机，导致服务端对客户端应答失败。 如果此时生产者意识到消息发送失败并尝试再次发送消息，消费者后续会收到两条内容相同并且 Message ID 也相同的消息。</p><p>消费时消息重复</p><p>消息消费的场景下，消息已投递到消费者并完成业务处理，当客户端给服务端反馈应答的时候网络闪断。 为了保证消息至少被消费一次，消息队列 RocketMQ 的服务端将在网络恢复后再次尝试投递之前已被处理过的消息，消费者后续会收到两条内容相同并且 Message ID 也相同的消息。</p><p>负载均衡时消息重复（包括但不限于网络抖动、Broker 重启以及订阅方应用重启）</p><p>当消息队列 RocketMQ 的 Broker 或客户端重启、扩容或缩容时，会触发 Rebalance，此时消费者可能会收到重复消息。</p><h2 id="2-处理方式"><a href="#2-处理方式" class="headerlink" title="2. 处理方式"></a>2. 处理方式</h2><p>因为 Message ID 有可能出现冲突（重复）的情况，所以真正安全的幂等处理，不建议以 Message ID 作为处理依据。 最好的方式是以业务唯一标识作为幂等处理的关键依据，而业务的唯一标识可以通过消息 Key 进行设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Message message = <span class="keyword">new</span> Message();</span><br><span class="line">message.setKey(<span class="string">&quot;ORDERID_100&quot;</span>);</span><br><span class="line">SendResult sendResult = producer.send(message);</span><br></pre></td></tr></table></figure><p>订阅方收到消息时可以根据消息的 Key 进行幂等处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">consumer.subscribe(<span class="string">&quot;ons_test&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Action <span class="title">consume</span><span class="params">(Message message, ConsumeContext context)</span> </span>&#123;</span><br><span class="line">        String key = message.getKey()</span><br><span class="line">        <span class="comment">// 根据业务唯一标识的 key 做幂等处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>接下来，就需要根据业务进行处理：</p><p>拿个数据要写库，先根据主键查一下，如果这数据都有了，你就别插入了，只需要更新一下；或者可以设置一个唯一索引<br>如果是写Redis，每次操作都是set，天然可以保证幂等性<br>如果不是上面两种场景，需要让生产者发送每条数据的时候，里面加一个全局唯一的id，类似订单id之类的东西；<strong>消费者需要先根据这个id去比如redis里查一下，之前消费过吗？</strong>如果没有消费过，你就处理，然后这个id写redis。如果消费过了，那你就别处理了，保证别重复处理相同的消息即可。<br>如何解决消息积压的问题？<br>这个可能出现在消费端出了问题，不消费了，或者消费的极其极其慢，导致大量的消息无法消费，最后消息队列集群的磁盘都快写满了</p><p>首先最重要的就是修复消费者，接着最大的问题就是在消费者重启后，如何快速处理积压的消息？</p><p>新建一个topic，临时建立好原先10倍或者20倍的queue数量<br>接着扩容临时的consumer，此时消费速度是原来的十几倍<br>等快速消费完积压数据之后，得恢复原先部署架构，重新用原先的consumer机器来消费消息</p><h1 id="如何设计一个Mq？"><a href="#如何设计一个Mq？" class="headerlink" title="如何设计一个Mq？"></a>如何设计一个Mq？</h1><p>是上面内容的一个总结，需要分点进行设计</p><p>扩展性</p><p>生产者的扩展性<br>消息队列的扩展性<br>消费者的扩展性<br>高可用性</p><p>如何设计刷盘策略？<br>如何保证消息0丢失？<br>如何保证在其中有机器宕机时，保障服务可用？<br>消息重试机制</p><p>当一个消息没有被消费时，如何进行重试，保证消息一定被消费？<br>当消费端不可用时，如何保证消费端重启后，依然可以消费消息？<br>心跳检测机制</p><p>如何检测生产者、消息队列和消费者是否宕机？<br>负载均衡模式</p><p>如何做到消息生产以及消费的负载均衡？<br>顺序消息</p><p>如何实现顺序消息？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【置顶】-留言请点击友链留言室或者在文章底部留言&quot;&gt;&lt;a href=&quot;#【置顶】-留言请点击友链留言室或者在文章底部留言&quot; class=&quot;headerlink&quot; title=&quot;【置顶】 留言请点击友链留言室或者在文章底部留言&quot;&gt;&lt;/a&gt;【置顶】 留言请点击友链留言</summary>
      
    
    
    
    <category term="MQ" scheme="https://zkkget.github.io/categories/MQ/"/>
    
    
    <category term="MQ" scheme="https://zkkget.github.io/tags/MQ/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赵KK个人博客第三站</title>
  
  <subtitle>纠结体本体,同步记录日常笔记，Write the code, Change the world！</subtitle>
  <link href="https://zkkget.github.io/atom.xml" rel="self"/>
  
  <link href="https://zkkget.github.io/"/>
  <updated>2022-07-25T08:24:40.644Z</updated>
  <id>https://zkkget.github.io/</id>
  
  <author>
    <name>赵KK</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mysql海量数据存储与优化</title>
    <link href="https://zkkget.github.io/2022/07/25/Mysql%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E4%BC%98%E5%8C%96/"/>
    <id>https://zkkget.github.io/2022/07/25/Mysql%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E4%BC%98%E5%8C%96/</id>
    <published>2022-07-25T08:17:47.000Z</published>
    <updated>2022-07-25T08:24:40.644Z</updated>
    
    <content type="html"><![CDATA[<p>我坚信，机会永远属于有准备的人，我们与其羡慕他人的成功，不如从此刻起，积累足够多的知识和面试经验，为将来进入更好的公司做充足的准备<br>本片文章将会根据资料学习深入Mysql的设计与优化<br>1、Mysql基础知识</p><p>2、Mysql架构原理和存储机制</p><p>3、Mysql高可用方案</p><p>4、Mysql企业面试真题分享</p><p>Mysql基础知识<br>MySQL起源和分支<br>MySQL 是最流行的关系型数据库软件之一，由于其体积小、速度快、开源免费、简单易用、维护成本<br>低等，在集群架构中易于扩展、高可用，因此深受开发者和企业的欢迎。<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/mysql1.jpg" alt="流程"><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/mysql2.jpg" alt="流程"></p><p>MySQL体系架构<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/mysql3.jpg" alt="流程"></p><p>MySQL Server架构自顶向下大致可以分网络连接层、服务层、存储引擎层和系统文件层。<br>一、网络连接层<br>客户端连接器（Client Connectors）：提供与MySQL服务器建立的支持。目前几乎支持所有主流<br>的服务端编程技术，例如常见的 Java、C、Python、.NET等，它们通过各自API技术与MySQL建立<br>连接。<br>二、服务层（MySQL Server）<br>服务层是MySQL Server的核心，主要包含系统管理和控制工具、连接池、SQL接口、解析器、查询优<br>化器和缓存六个部分。<br>连接池（Connection Pool）：负责存储和管理客户端与数据库的连接，一个线程负责管理一个连接。<br>系统管理和控制工具（Management Services &amp; Utilities）：例如备份恢复、安全管理、集群<br>管理等<br>SQL接口（SQL Interface）：用于接受客户端发送的各种SQL命令，并且返回用户需要查询的结<br>果。比如DML、DDL、存储过程、视图、触发器等。<br>解析器（Parser）：负责将请求的SQL解析生成一个”解析树”。然后根据一些MySQL规则进一步<br>检查解析树是否合法。<br>查询优化器（Optimizer）：当“解析树”通过解析器语法检查后，将交由优化器将其转化成执行计<br>划，然后与存储引擎交互。<br>select uid,name from user where gender=1;<br>选取–》投影–》联接 策略<br>1）select先根据where语句进行选取，并不是查询出全部数据再过滤<br>2）select查询根据uid和name进行属性投影，并不是取出所有字段<br>3）将前面选取和投影联接起来最终生成查询结果<br>缓存（Cache&amp;Buffer）： 缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，权限缓<br>存，引擎缓存等。如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据。<br>三、存储引擎层（Pluggable Storage Engines）<br>存储引擎负责MySQL中数据的存储与提取，与底层系统文件进行交互。MySQL存储引擎是插件式的，<br>服务器中的查询执行引擎通过接口与存储引擎进行通信，接口屏蔽了不同存储引擎之间的差异 。现在有<br>很多种存储引擎，各有各的特点，最常见的是MyISAM和InnoDB。<br>四、系统文件层（File System）<br>该层负责将数据库的数据和日志存储在文件系统之上，并完成与存储引擎的交互，是文件的物理存储<br>层。主要包含日志文件，数据文件，配置文件，pid 文件，socket 文件等。<br>日志文件<br>错误日志（Error log）<br>默认开启，show variables like ‘%log_error%’<br>通用查询日志（General query log）<br>记录一般查询语句，show variables like ‘%general%’;<br>二进制日志（binary log）<br>记录了对MySQL数据库执行的更改操作，并且记录了语句的发生时间、执行时长；但是它不<br>记录select、show等不修改数据库的SQL。主要用于数据库恢复和主从复制。<br>show variables like ‘%log_bin%’; //是否开启<br>show variables like ‘%binlog%’; //参数查看<br>show binary logs;//查看日志文件<br>慢查询日志（Slow query log）<br>记录所有执行时间超时的查询SQL，默认是10秒。<br>show variables like ‘%slow_query%’; //是否开启<br>show variables like ‘%long_query_time%’; //时长<br>配置文件<br>用于存放MySQL所有的配置信息文件，比如my.cnf、my.ini等。<br>数据文件<br>db.opt 文件：记录这个库的默认使用的字符集和校验规则。<br>frm 文件：存储与表相关的元数据（meta）信息，包括表结构的定义信息等，每一张表都会<br>有一个frm 文件。<br>MYD 文件：MyISAM 存储引擎专用，存放 MyISAM 表的数据（data)，每一张表都会有一个<br>.MYD 文件。<br>MYI 文件：MyISAM 存储引擎专用，存放 MyISAM 表的索引相关信息，每一张 MyISAM 表对<br>应一个 .MYI 文件。<br>ibd文件和 IBDATA 文件：存放 InnoDB 的数据文件（包括索引）。InnoDB 存储引擎有两种<br>表空间方式：独享表空间和共享表空间。独享表空间使用 .ibd 文件来存放数据，且每一张<br>InnoDB 表对应一个 .ibd 文件。共享表空间使用 .ibdata 文件，所有表共同使用一个（或多<br>个，自行配置）.ibdata 文件。<br>ibdata1 文件：系统表空间数据文件，存储表元数据、Undo日志等 。<br>ib_logfile0、ib_logfile1 文件：Redo log 日志文件。<br>pid 文件<br>pid 文件是 mysqld 应用程序在 Unix/Linux 环境下的一个进程文件，和许多其他 Unix/Linux 服务<br>端程序一样，它存放着自己的进程 id。<br>socket 文件<br>socket 文件也是在 Unix/Linux 环境下才有的，用户在 Unix/Linux 环境下客户端连接可以不通过<br>TCP/IP 网络而直接使用 Unix Socket 来连接 MySQL</p><p>MySQL运行机制<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/mysql4.jpg" alt="流程"></p><p>①建立连接（Connectors&amp;Connection Pool），通过客户端/服务器通信协议与MySQL建立连<br>接。MySQL 客户端与服务端的通信方式是 “ 半双工 ”。对于每一个 MySQL 的连接，时刻都有一个<br>线程状态来标识这个连接正在做什么。<br>通讯机制：<br>全双工：能同时发送和接收数据，例如平时打电话。<br>半双工：指的某一时刻，要么发送数据，要么接收数据，不能同时。例如早期对讲机<br>单工：只能发送数据或只能接收数据。例如单行道<br>线程状态：<br>show processlist; //查看用户正在运行的线程信息，root用户能查看所有线程，其他用户只能看自<br>己的<br>id：线程ID，可以使用kill xx；<br>user：启动这个线程的用户<br>Host：发送请求的客户端的IP和端口号<br>db：当前命令在哪个库执行<br>Command：该线程正在执行的操作命令<br>Create DB：正在创建库操作<br>Drop DB：正在删除库操作<br>Execute：正在执行一个PreparedStatement<br>Close Stmt：正在关闭一个PreparedStatement<br>Query：正在执行一个语句<br>Sleep：正在等待客户端发送语句<br>Quit：正在退出<br>Shutdown：正在关闭服务器<br>Time：表示该线程处于当前状态的时间，单位是秒<br>State：线程状态<br>Updating：正在搜索匹配记录，进行修改<br>Sleeping：正在等待客户端发送新请求<br>Starting：正在执行请求处理<br>Checking table：正在检查数据表<br>Closing table : 正在将表中数据刷新到磁盘中<br>Locked：被其他查询锁住了记录<br>Sending Data：正在处理Select查询，同时将结果发送给客户端<br>Info：一般记录线程执行的语句，默认显示前100个字符。想查看完整的使用show full<br>processlist;<br>②查询缓存（Cache&amp;Buffer），这是MySQL的一个可优化查询的地方，如果开启了查询缓存且在<br>查询缓存过程中查询到完全相同的SQL语句，则将查询结果直接返回给客户端；如果没有开启查询<br>缓存或者没有查询到完全相同的 SQL 语句则会由解析器进行语法语义解析，并生成“解析树”。<br>缓存Select查询的结果和SQL语句<br>执行Select查询时，先查询缓存，判断是否存在可用的记录集，要求是否完全相同（包括参<br>数值），这样才会匹配缓存数据命中。<br>即使开启查询缓存，以下SQL也不能缓存<br>查询语句使用SQL_NO_CACHE<br>查询的结果大于query_cache_limit设置<br>查询中有一些不确定的参数，比如now()<br>show variables like ‘%query_cache%’; //查看查询缓存是否启用，空间大小，限制等<br>show status like ‘Qcache%’; //查看更详细的缓存参数，可用缓存空间，缓存块，缓存多少等<br>③解析器（Parser）将客户端发送的SQL进行语法解析，生成”解析树”。预处理器根据一些MySQL<br>规则进一步检查“解析树”是否合法，例如这里将检查数据表和数据列是否存在，还会解析名字和别<br>名，看看它们是否有歧义，最后生成新的“解析树”。<br>④查询优化器（Optimizer）根据“解析树”生成最优的执行计划。MySQL使用很多优化策略生成最<br>优的执行计划，可以分为两类：静态优化（编译时优化）、动态优化（运行时优化）。<br>等价变换策略<br>5=5 and a&gt;5 改成 a &gt; 5<br>a &lt; b and a=5 改成b&gt;5 and a=5<br>基于联合索引，调整条件位置等<br>优化count、min、max等函数<br>InnoDB引擎min函数只需要找索引最左边<br>InnoDB引擎max函数只需要找索引最右边<br>MyISAM引擎count(*)，不需要计算，直接返回<br>提前终止查询<br>使用了limit查询，获取limit所需的数据，就不在继续遍历后面数据<br>in的优化<br>MySQL对in查询，会先进行排序，再采用二分法查找数据。比如where id in (2,1,3)，变<br>成 in (1,2,3)<br>⑤查询执行引擎负责执行 SQL 语句，此时查询执行引擎会根据 SQL 语句中表的存储引擎类型，以<br>及对应的API接口与底层存储引擎缓存或者物理文件的交互，得到查询结果并返回给客户端。若开<br>启用查询缓存，这时会将SQL 语句和结果完整地保存到查询缓存（Cache&amp;Buffer）中，以后若有<br>相同的 SQL 语句执行则直接返回结果。<br>如果开启了查询缓存，先将查询结果做缓存操作<br>返回结果过多，采用增量模式返回</p><p>MySQL存储引擎<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/mysql5.jpg" alt="流程"></p><p>存储引擎在MySQL的体系架构中位于第三层，负责MySQL中的数据的存储和提取，是与文件打交道的<br>子系统，它是根据MySQL提供的文件访问层抽象接口定制的一种文件访问机制，这种机制就叫作存储引<br>擎。<br>使用show engines命令，就可以查看当前数据库支持的引擎信息。<br>在5.5版本之前默认采用MyISAM存储引擎，从5.5开始采用InnoDB存储引擎。<br>InnoDB：支持事务，具有提交，回滚和崩溃恢复能力，事务安全<br>MyISAM：不支持事务和外键，访问速度快<br>Memory：利用内存创建表，访问速度非常快，因为数据在内存，而且默认使用Hash索引，但是<br>一旦关闭，数据就会丢失<br>Archive：归档类型引擎，仅能支持insert和select语句<br>Csv：以CSV文件进行数据存储，由于文件限制，所有列必须强制指定not null，另外CSV引擎也不<br>支持索引和分区，适合做数据交换的中间表<br>BlackHole: 黑洞，只进不出，进来消失，所有插入数据都不会保存<br>Federated：可以访问远端MySQL数据库中的表。一个本地表，不保存数据，访问远程表内容。<br>MRG_MyISAM：一组MyISAM表的组合，这些MyISAM表必须结构相同，Merge表本身没有数据，<br>对Merge操作可以对一组MyISAM表进行操作。<br>3.1 InnoDB和MyISAM对比<br>InnoDB和MyISAM是使用MySQL时最常用的两种引擎类型，我们重点来看下两者区别。<br>事务和外键<br>InnoDB支持事务和外键，具有安全性和完整性，适合大量insert或update操作<br>MyISAM不支持事务和外键，它提供高速存储和检索，适合大量的select查询操作<br>锁机制<br>InnoDB支持行级锁，锁定指定记录。基于索引来加锁实现。<br>MyISAM支持表级锁，锁定整张表。<br>索引结构<br>InnoDB使用聚集索引（聚簇索引），索引和记录在一起存储，既缓存索引，也缓存记录。<br>MyISAM使用非聚集索引（非聚簇索引），索引和记录分开。<br>并发处理能力<br>MyISAM使用表锁，会导致写操作并发率低，读之间并不阻塞，读写阻塞。<br>InnoDB读写阻塞可以与隔离级别有关，可以采用多版本并发控制（MVCC）来支持高并发<br>存储文件<br>InnoDB表对应两个文件，一个.frm表结构文件，一个.ibd数据文件。InnoDB表最大支持64TB；<br>MyISAM表对应三个文件，一个.frm表结构文件，一个MYD表数据文件，一个.MYI索引文件。从<br>MySQL5.0开始默认限制是256TB。<br>适用场景<br>MyISAM<br>不需要事务支持（不支持）<br>并发相对较低（锁定机制问题）<br>数据修改相对较少，以读为主<br>数据一致性要求不高<br>InnoDB<br>需要事务支持（具有较好的事务特性）<br>行级锁定对高并发有很好的适应能力<br>数据更新较为频繁的场景<br>数据一致性要求较高<br>硬件设备内存较大，可以利用InnoDB较好的缓存能力来提高内存利用率，减少磁盘IO<br>总结<br>两种引擎该如何选择？<br>是否需要事务？有，InnoDB<br>是否存在并发修改？有，InnoDB<br>是否追求快速查询，且数据修改少？是，MyISAM<br>在绝大多数情况下，推荐使用InnoDB</p><p>InnoDB存储结构<br>从MySQL 5.5版本开始默认使用InnoDB作为引擎，它擅长处理事务，具有自动崩溃恢复的特性，在日<br>常开发中使用非常广泛。下面是官方的InnoDB引擎架构图，主要分为内存结构和磁盘结构两大部分</p><p>内存结构主要包括Buffer Pool、Change Buffer、Adaptive Hash Index和Log Buffer四大组件。<br>Buffer Pool：缓冲池，简称BP。BP以Page页为单位，默认大小16K，BP的底层采用链表数<br>据结构管理Page。在InnoDB访问表记录和索引时会在Page页中缓存，以后使用可以减少磁<br>盘IO操作，提升效率。<br>Page管理机制<br>Page根据状态可以分为三种类型：<br>free page ： 空闲page，未被使用<br>clean page：被使用page，数据没有被修改过<br>dirty page：脏页，被使用page，数据被修改过，页中数据和磁盘的数据产生了不<br>一致<br>针对上述三种page类型，InnoDB通过三种链表结构来维护和管理<br>free list ：表示空闲缓冲区，管理free page<br>flush list：表示需要刷新到磁盘的缓冲区，管理dirty page，内部page按修改时间<br>排序。脏页即存在于flush链表，也在LRU链表中，但是两种互不影响，LRU链表负<br>责管理page的可用性和释放，而flush链表负责管理脏页的刷盘操作。<br>lru list：表示正在使用的缓冲区，管理clean page和dirty page，缓冲区以<br>midpoint为基点，前面链表称为new列表区，存放经常访问的数据，占63%；后<br>面的链表称为old列表区，存放使用较少数据，占37%。<br>改进型LRU算法维护<br>普通LRU：末尾淘汰法，新数据从链表头部加入，释放空间时从末尾淘汰<br>改性LRU：链表分为new和old两个部分，加入元素时并不是从表头插入，而是从中间<br>midpoint位置插入，如果数据很快被访问，那么page就会向new列表头部移动，如果<br>数据没有被访问，会逐步向old尾部移动，等待淘汰。<br>每当有新的page数据读取到buffer pool时，InnoDb引擎会判断是否有空闲页，是否足<br>够，如果有就将free page从free list列表删除，放入到LRU列表中。没有空闲页，就会<br>根据LRU算法淘汰LRU链表默认的页，将内存空间释放分配给新的页。<br>Buffer Pool配置参数<br>show variables like ‘%innodb_page_size%’; //查看page页大小<br>show variables like ‘%innodb_old%’; //查看lru list中old列表参数<br>show variables like ‘%innodb_buffer%’; //查看buffer pool参数<br>建议：将innodb_buffer_pool_size设置为总内存大小的60%-80%，<br>innodb_buffer_pool_instances可以设置为多个，这样可以避免缓存争夺。<br>Change Buffer：写缓冲区，简称CB。在进行DML操作时，如果BP没有其相应的Page数据，<br>并不会立刻将磁盘页加载到缓冲池，而是在CB记录缓冲变更，等未来数据被读取时，再将数<br>据合并恢复到BP中。<br>ChangeBuffer占用BufferPool空间，默认占25%，最大允许占50%，可以根据读写业务量来<br>进行调整。参数innodb_change_buffer_max_size;<br>当更新一条记录时，该记录在BufferPool存在，直接在BufferPool修改，一次内存操作。如<br>果该记录在BufferPool不存在（没有命中），会直接在ChangeBuffer进行一次内存操作，不<br>用再去磁盘查询数据，避免一次磁盘IO。当下次查询记录时，会先进性磁盘读取，然后再从<br>ChangeBuffer中读取信息合并，最终载入BufferPool中。<br>写缓冲区，仅适用于非唯一普通索引页，为什么？<br>如果在索引设置唯一性，在进行修改时，InnoDB必须要做唯一性校验，因此必须查询磁盘，<br>做一次IO操作。会直接将记录查询到BufferPool中，然后在缓冲池修改，不会在<br>ChangeBuffer操作。<br>Adaptive Hash Index：自适应哈希索引，用于优化对BP数据的查询。InnoDB存储引擎会监<br>控对表索引的查找，如果观察到建立哈希索引可以带来速度的提升，则建立哈希索引，所以<br>称之为自适应。InnoDB存储引擎会自动根据访问的频率和模式来为某些页建立哈希索引。<br>Log Buffer：日志缓冲区，用来保存要写入磁盘上log文件（Redo/Undo）的数据，日志缓冲<br>区的内容定期刷新到磁盘log文件中。日志缓冲区满时会自动将其刷新到磁盘，当遇到BLOB<br>或多行更新的大事务操作时，增加日志缓冲区可以节省磁盘I/O。<br>LogBuffer主要是用于记录InnoDB引擎日志，在DML操作时会产生Redo和Undo日志。<br>LogBuffer空间满了，会自动写入磁盘。可以通过将innodb_log_buffer_size参数调大，减少<br>磁盘IO频率<br>innodb_flush_log_at_trx_commit参数控制日志刷新行为，默认为1<br>0 ： 每隔1秒写日志文件和刷盘操作（写日志文件LogBuffer–&gt;OS cache，刷盘OS<br>cache–&gt;磁盘文件），最多丢失1秒数据<br>1：事务提交，立刻写日志文件和刷盘，数据不丢失，但是会频繁IO操作<br>2：事务提交，立刻写日志文件，每隔1秒钟进行刷盘操作</p><p>InnoDB磁盘结构<br>InnoDB磁盘主要包含Tablespaces，InnoDB Data Dictionary，Doublewrite Buffer、Redo Log<br>和Undo Logs。<br>表空间（Tablespaces）：用于存储表结构和数据。表空间又分为系统表空间、独立表空间、<br>通用表空间、临时表空间、Undo表空间等多种类型；<br>系统表空间（The System Tablespace）<br>包含InnoDB数据字典，Doublewrite Buffer，Change Buffer，Undo Logs的存储区<br>域。系统表空间也默认包含任何用户在系统表空间创建的表数据和索引数据。系统表空<br>间是一个共享的表空间因为它是被多个表共享的。该空间的数据文件通过参数<br>innodb_data_file_path控制，默认值是ibdata1:12M:autoextend(文件名为ibdata1、<br>12MB、自动扩展)。<br>独立表空间（File-Per-Table Tablespaces）<br>默认开启，独立表空间是一个单表表空间，该表创建于自己的数据文件中，而非创建于<br>系统表空间中。当innodb_file_per_table选项开启时，表将被创建于表空间中。否则，<br>innodb将被创建于系统表空间中。每个表文件表空间由一个.ibd数据文件代表，该文件<br>默认被创建于数据库目录中。表空间的表文件支持动态（dynamic）和压缩<br>（commpressed）行格式。<br>通用表空间（General Tablespaces）<br>通用表空间为通过create tablespace语法创建的共享表空间。通用表空间可以创建于<br>mysql数据目录外的其他表空间，其可以容纳多张表，且其支持所有的行格式。<br>撤销表空间（Undo Tablespaces）<br>撤销表空间由一个或多个包含Undo日志文件组成。在MySQL 5.7版本之前Undo占用的<br>是System Tablespace共享区，从5.7开始将Undo从System Tablespace分离了出来。<br>InnoDB使用的undo表空间由innodb_undo_tablespaces配置选项控制，默认为0。参<br>数值为0表示使用系统表空间ibdata1;大于0表示使用undo表空间undo_001、<br>undo_002等。<br>临时表空间（Temporary Tablespaces） CREATE TABLESPACE ts1 ADD DATAFILE ts1.ibd Engine=InnoDB; //创建表空 间ts1 CREATE TABLE t1 (c1 INT PRIMARY KEY) TABLESPACE ts1; //将表添加到ts1 表空间<br>分为session temporary tablespaces 和global temporary tablespace两种。session<br>temporary tablespaces 存储的是用户创建的临时表和磁盘内部的临时表。global<br>temporary tablespace储存用户临时表的回滚段（rollback segments ）。mysql服务<br>器正常关闭或异常终止时，临时表空间将被移除，每次启动时会被重新创建。<br>数据字典（InnoDB Data Dictionary）<br>InnoDB数据字典由内部系统表组成，这些表包含用于查找表、索引和表字段等对象的元数<br>据。元数据物理上位于InnoDB系统表空间中。由于历史原因，数据字典元数据在一定程度上<br>与InnoDB表元数据文件（.frm文件）中存储的信息重叠。<br>双写缓冲区（Doublewrite Buffer）<br>位于系统表空间，是一个存储区域。在BufferPage的page页刷新到磁盘真正的位置前，会先<br>将数据存在Doublewrite 缓冲区。如果在page页写入过程中出现操作系统、存储子系统或<br>mysqld进程崩溃，InnoDB可以在崩溃恢复期间从Doublewrite 缓冲区中找到页面的一个好<br>备份。在大多数情况下，默认情况下启用双写缓冲区，要禁用Doublewrite 缓冲区，可以将<br>innodb_doublewrite设置为0。使用Doublewrite 缓冲区时建议将innodb_flush_method设<br>置为O_DIRECT。<br>MySQL的innodb_flush_method这个参数控制着innodb数据文件及redo log的打开、<br>刷写模式。有三个值：fdatasync(默认)，O_DSYNC，O_DIRECT。设置O_DIRECT表示<br>数据文件写入操作会通知操作系统不要缓存数据，也不要用预读，直接从Innodb<br>Buffer写到磁盘文件。<br>默认的fdatasync意思是先写入操作系统缓存，然后再调用fsync()函数去异步刷数据文<br>件与redo log的缓存信息。<br>重做日志（Redo Log）<br>重做日志是一种基于磁盘的数据结构，用于在崩溃恢复期间更正不完整事务写入的数据。<br>MySQL以循环方式写入重做日志文件，记录InnoDB中所有对Buffer Pool修改的日志。当出<br>现实例故障（像断电），导致数据未能更新到数据文件，则数据库重启时须redo，重新把数<br>据更新到数据文件。读写事务在执行的过程中，都会不断的产生redo log。默认情况下，重<br>做日志在磁盘上由两个名为ib_logfile0和ib_logfile1的文件物理表示。<br>撤销日志（Undo Logs）<br>撤消日志是在事务开始之前保存的被修改数据的备份，用于例外情况时回滚事务。撤消日志<br>属于逻辑日志，根据每行记录进行记录。撤消日志存在于系统表空间、撤消表空间和临时表<br>空间中。<br>MySQL 5.7 版本<br>将 Undo日志表空间从共享表空间 ibdata 文件中分离出来，可以在安装 MySQL 时由用<br>户自行指定文件大小和数量。<br>增加了 temporary 临时表空间，里面存储着临时表或临时查询结果集的数据。<br>Buffer Pool 大小可以动态修改，无需重启数据库实例。<br>MySQL 8.0 版本<br>将InnoDB表的数据字典和Undo都从共享表空间ibdata中彻底分离出来了，以前需要<br>ibdata中数据字典与独立表空间ibd文件中数据字典一致才行，8.0版本就不需要了。<br>temporary 临时表空间也可以配置多个物理文件，而且均为 InnoDB 存储引擎并能创建<br>索引，这样加快了处理的速度。<br>用户可以像 Oracle 数据库那样设置一些表空间，每个表空间对应多个物理文件，每个<br>表空间可以给多个表使用，但一个表只能存储在一个表空间中。<br>将Doublewrite Buffer从共享表空间ibdata中也分离出来了</p><p>InnoDB线程模型<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/mysql6.jpg" alt="流程"></p><p>IO Thread<br>在InnoDB中使用了大量的AIO（Async IO）来做读写处理，这样可以极大提高数据库的性能。在<br>InnoDB1.0版本之前共有4个IO Thread，分别是write，read，insert buffer和log thread，后来<br>版本将read thread和write thread分别增大到了4个，一共有10个了。<br>read thread ： 负责读取操作，将数据从磁盘加载到缓存page页。4个<br>write thread：负责写操作，将缓存脏页刷新到磁盘。4个<br>log thread：负责将日志缓冲区内容刷新到磁盘。1个<br>insert buffer thread ：负责将写缓冲内容刷新到磁盘。1个<br>Purge Thread<br>事务提交之后，其使用的undo日志将不再需要，因此需要Purge Thread回收已经分配的undo<br>页。<br>show variables like ‘%innodb_purge_threads%’;<br>Page Cleaner Thread<br>作用是将脏数据刷新到磁盘，脏数据刷盘后相应的redo log也就可以覆盖，即可以同步数据，又能<br>达到redo log循环使用的目的。会调用write thread线程处理。<br>show variables like ‘%innodb_page_cleaners%’;<br>Master Thread<br>Master thread是InnoDB的主线程，负责调度其他各线程，优先级最高。作用是将缓冲池中的数<br>据异步刷新到磁盘 ，保证数据的一致性。包含：脏页的刷新（page cleaner thread）、undo页<br>回收（purge thread）、redo日志刷新（log thread）、合并写缓冲等。内部有两个主处理，分别<br>是每隔1秒和10秒处理。<br>每1秒的操作：<br>刷新日志缓冲区，刷到磁盘<br>合并写缓冲区数据，根据IO读写压力来决定是否操作<br>刷新脏页数据到磁盘，根据脏页比例达到75%才操作（innodb_max_dirty_pages_pct，<br>innodb_io_capacity） 每10秒的操作：<br>刷新脏页数据到磁盘<br>合并写缓冲区数据<br>刷新日志缓冲区<br>删除无用的undo页</p><p>Undolog and binlog and redoLog<br>Undo Log<br>3.5.1 Undo Log介绍<br>Undo：意为撤销或取消，以撤销操作为目的，返回指定某个状态的操作。<br>Undo Log：数据库事务开始之前，会将要修改的记录存放到 Undo 日志里，当事务回滚时或者数<br>据库崩溃时，可以利用 Undo 日志，撤销未提交事务对数据库产生的影响。<br>Undo Log产生和销毁：Undo Log在事务开始前产生；事务在提交时，并不会立刻删除undo<br>log，innodb会将该事务对应的undo log放入到删除列表中，后面会通过后台线程purge thread进<br>行回收处理。Undo Log属于逻辑日志，记录一个变化过程。例如执行一个delete，undolog会记<br>录一个insert；执行一个update，undolog会记录一个相反的update。<br>Undo Log存储：undo log采用段的方式管理和记录。在innodb数据文件中包含一种rollback<br>segment回滚段，内部包含1024个undo log segment。可以通过下面一组参数来控制Undo log存<br>储。<br>3.5.2 Undo Log作用<br>实现事务的原子性<br>Undo Log 是为了实现事务的原子性而出现的产物。事务处理过程中，如果出现了错误或者用户执<br>行了 ROLLBACK 语句，MySQL 可以利用 Undo Log 中的备份将数据恢复到事务开始之前的状态。<br>实现多版本并发控制（MVCC）<br>Undo Log 在 MySQL InnoDB 存储引擎中用来实现多版本并发控制。事务未提交之前，Undo Log<br>保存了未提交之前的版本数据，Undo Log 中的数据可作为数据旧版本快照供其他并发事务进行快<br>照读。<br>事务A手动开启事务，执行更新操作，首先会把更新命中的数据备份到 Undo Buffer 中。<br>事务B手动开启事务，执行查询操作，会读取 Undo 日志数据返回，进行快照读<br>3.6 Redo Log和Binlog<br>Redo Log和Binlog是MySQL日志系统中非常重要的两种机制，也有很多相似之处，下面介绍下两者细<br>节和区别。<br>3.6.1 Redo Log日志<br>Redo Log介绍<br>show variables like ‘%innodb_undo%’;<br>Redo：顾名思义就是重做。以恢复操作为目的，在数据库发生意外时重现操作。<br>Redo Log：指事务中修改的任何数据，将最新的数据备份存储的位置（Redo Log），被称为重做<br>日志。<br>Redo Log 的生成和释放：随着事务操作的执行，就会生成Redo Log，在事务提交时会将产生<br>Redo Log写入Log Buffer，并不是随着事务的提交就立刻写入磁盘文件。等事务操作的脏页写入<br>到磁盘之后，Redo Log 的使命也就完成了，Redo Log占用的空间就可以重用（被覆盖写入）。<br>Redo Log工作原理<br>Redo Log 是为了实现事务的持久性而出现的产物。防止在发生故障的时间点，尚有脏页未写入表<br>的 IBD 文件中，在重启 MySQL 服务的时候，根据 Redo Log 进行重做，从而达到事务的未入磁盘<br>数据进行持久化这一特性。<br>Redo Log写入机制<br>Redo Log 文件内容是以顺序循环的方式写入文件，写满时则回溯到第一个文件，进行覆盖写。<br>如图所示：<br>write pos 是当前记录的位置，一边写一边后移，写到最后一个文件末尾后就回到 0 号文件开<br>头；<br>checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数<br>据文件；<br>write pos 和 checkpoint 之间还空着的部分，可以用来记录新的操作。如果 write pos 追上<br>checkpoint，表示写满，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 checkpoint<br>推进一下。<br>Redo Log相关配置参数<br>每个InnoDB存储引擎至少有1个重做日志文件组（group），每个文件组至少有2个重做日志文<br>件，默认为ib_logfile0和ib_logfile1。可以通过下面一组参数控制Redo Log存储：<br>show variables like ‘%innodb_log%’;<br>Redo Buffer 持久化到 Redo Log 的策略，可通过 Innodb_flush_log_at_trx_commit 设置：<br>0：每秒提交 Redo buffer -&gt;OS cache -&gt; flush cache to disk，可能丢失一秒内的事务数<br>据。由后台Master线程每隔 1秒执行一次操作。<br>1（默认值）：每次事务提交执行 Redo Buffer -&gt; OS cache -&gt; flush cache to disk，最安<br>全，性能最差的方式。<br>2：每次事务提交执行 Redo Buffer -&gt; OS cache，然后由后台Master线程再每隔1秒执行OS<br>cache -&gt; flush cache to disk 的操作。<br>一般建议选择取值2，因为 MySQL 挂了数据没有损失，整个服务器挂了才会损失1秒的事务提交数<br>据。<br>3.6.2 Binlog日志<br>Binlog记录模式<br>Redo Log 是属于InnoDB引擎所特有的日志，而MySQL Server也有自己的日志，即 Binary<br>log（二进制日志），简称Binlog。Binlog是记录所有数据库表结构变更以及表数据修改的二进制<br>日志，不会记录SELECT和SHOW这类操作。Binlog日志是以事件形式记录，还包含语句所执行的<br>消耗时间。开启Binlog日志有以下两个最重要的使用场景。<br>主从复制：在主库中开启Binlog功能，这样主库就可以把Binlog传递给从库，从库拿到<br>Binlog后实现数据恢复达到主从数据一致性。<br>数据恢复：通过mysqlbinlog工具来恢复数据。<br>Binlog文件名默认为“主机名_binlog-序列号”格式，例如oak_binlog-000001，也可以在配置文件<br>中指定名称。文件记录模式有STATEMENT、ROW和MIXED三种，具体含义如下。<br>ROW（row-based replication, RBR）：日志中会记录每一行数据被修改的情况，然后在<br>slave端对相同的数据进行修改。<br>优点：能清楚记录每一个行数据的修改细节，能完全实现主从数据同步和数据的恢复。<br>缺点：批量操作，会产生大量的日志，尤其是alter table会让日志暴涨。<br>STATMENT（statement-based replication, SBR）：每一条被修改数据的SQL都会记录到<br>master的Binlog中，slave在复制的时候SQL进程会解析成和原来master端执行过的相同的<br>SQL再次执行。简称SQL语句复制。<br>优点：日志量小，减少磁盘IO，提升存储和恢复速度<br>缺点：在某些情况下会导致主从数据不一致，比如last_insert_id()、now()等函数。<br>MIXED（mixed-based replication, MBR）：以上两种模式的混合使用，一般会使用<br>STATEMENT模式保存binlog，对于STATEMENT模式无法复制的操作使用ROW模式保存<br>binlog，MySQL会根据执行的SQL语句选择写入模式。<br>Binlog文件结构<br>MySQL的binlog文件中记录的是对数据库的各种修改操作，用来表示修改操作的数据结构是Log<br>event。不同的修改操作对应的不同的log event。比较常用的log event有：Query event、Row event、Xid event等。binlog文件的内容就是各种Log event的集合。<br>Binlog文件中Log event结构如下图所示：<br>Binlog写入机制<br>根据记录模式和操作触发event事件生成log event（事件触发执行机制）<br>将事务执行过程中产生log event写入缓冲区，每个事务线程都有一个缓冲区<br>Log Event保存在一个binlog_cache_mngr数据结构中，在该结构中有两个缓冲区，一个是<br>stmt_cache，用于存放不支持事务的信息；另一个是trx_cache，用于存放支持事务的信息。<br>事务在提交阶段会将产生的log event写入到外部binlog文件中。<br>不同事务以串行方式将log event写入binlog文件中，所以一个事务包含的log event信息在<br>binlog文件中是连续的，中间不会插入其他事务的log event。<br>Binlog文件操作<br>Binlog状态查看<br>show variables like ‘log_bin’;<br>开启Binlog功能<br>mysql&gt; set global log_bin=mysqllogbin; ERROR 1238 (HY000): Variable ‘log_bin’ is a read only variable<br>需要修改my.cnf或my.ini配置文件，在[mysqld]下面增加log_bin=mysql_bin_log，重启<br>MySQL服务。<br>#log-bin=ON #log-bin-basename=mysqlbinlog binlog-format=ROW log-bin=mysqlbinlog<br>使用show binlog events命令<br>show binary logs; //等价于show master logs; show master status; show binlog events; show binlog events in ‘mysqlbinlog.000001’;<br>使用mysqlbinlog 命令<br>mysqlbinlog “文件名” mysqlbinlog “文件名” &gt; “test.sql”<br>使用 binlog 恢复数据<br>//按指定时间恢复 mysqlbinlog –start-datetime=”2020-04-25 18:00:00” –stop- datetime=”2020-04-26 00:00:00” mysqlbinlog.000002 | mysql -uroot -p1234 //按事件位置号恢复 mysqlbinlog –start-position=154 –stop-position=957 mysqlbinlog.000002 | mysql -uroot -p1234<br>mysqldump：定期全部备份数据库数据。mysqlbinlog可以做增量备份和恢复操作。<br>删除Binlog文件<br>purge binary logs to ‘mysqlbinlog.000001’; //删除指定文件 purge binary logs before ‘2020-04-28 00:00:00’; //删除指定时间之前的文件 reset master; //清除所有文件<br>可以通过设置expire_logs_days参数来启动自动清理功能。默认值为0表示没启用。设置为1表示超<br>出1天binlog文件会自动删除掉。<br>Redo Log和Binlog区别<br>Redo Log是属于InnoDB引擎功能，Binlog是属于MySQL Server自带功能，并且是以二进制<br>文件记录。<br>Redo Log属于物理日志，记录该数据页更新状态内容，Binlog是逻辑日志，记录更新过程。<br>Redo Log日志是循环写，日志空间大小是固定，Binlog是追加写入，写完一个写下一个，不<br>会覆盖使用。<br>Redo Log作为服务器异常宕机后事务数据自动恢复使用，Binlog可以作为主从复制和数据恢<br>复使用。Binlog没有自动crash-safe能力。</p><p>MySQL索引原理<br>索引类型<br>索引可以提升查询速度，会影响where查询，以及order by排序。MySQL索引类型如下：<br>从索引存储结构划分：B Tree索引、Hash索引、FULLTEXT全文索引、R Tree索引<br>从应用层次划分：普通索引、唯一索引、主键索引、复合索引<br>从索引键值类型划分：主键索引、辅助索引（二级索引）<br>从数据存储和索引键值逻辑关系划分：聚集索引（聚簇索引）、非聚集索引（非聚簇索引）<br>普通索引<br>这是最基本的索引类型，基于普通字段建立的索引，没有任何限制。<br>创建普通索引的方法如下：<br>CREATE INDEX &lt;索引的名字&gt; ON tablename (字段名);<br>ALTER TABLE tablename ADD INDEX [索引的名字] (字段名);<br>CREATE TABLE tablename ( […], INDEX [索引的名字] (字段名) );<br>1.2 唯一索引<br>与”普通索引”类似，不同的就是：索引字段的值必须唯一，但允许有空值 。在创建或修改表时追加唯一<br>约束，就会自动创建对应的唯一索引。<br>创建唯一索引的方法如下：<br>CREATE UNIQUE INDEX &lt;索引的名字&gt; ON tablename (字段名);<br>ALTER TABLE tablename ADD UNIQUE INDEX [索引的名字] (字段名);<br>CREATE TABLE tablename ( […], UNIQUE [索引的名字] (字段名) ;<br>1.3 主键索引<br>它是一种特殊的唯一索引，不允许有空值。在创建或修改表时追加主键约束即可，每个表只能有一个主<br>键。<br>创建主键索引的方法如下：<br>CREATE TABLE tablename ( […], PRIMARY KEY (字段名) );<br>ALTER TABLE tablename ADD PRIMARY KEY (字段名);<br>1.4 复合索引<br>单一索引是指索引列为一列的情况，即新建索引的语句只实施在一列上；用户可以在多个列上建立索<br>引，这种索引叫做组复合索引（组合索引）。复合索引可以代替多个单一索引，相比多个单一索引复合<br>索引所需的开销更小。<br>索引同时有两个概念叫做窄索引和宽索引，窄索引是指索引列为1-2列的索引，宽索引也就是索引列超<br>过2列的索引，设计索引的一个重要原则就是能用窄索引不用宽索引，因为窄索引往往比组合索引更有<br>效。<br>创建组合索引的方法如下：<br>CREATE INDEX &lt;索引的名字&gt; ON tablename (字段名1，字段名2…);<br>ALTER TABLE tablename ADD INDEX [索引的名字] (字段名1，字段名2…);<br>CREATE TABLE tablename ( […], INDEX [索引的名字] (字段名1，字段名2…) );<br>复合索引使用注意事项：<br>何时使用复合索引，要根据where条件建索引，注意不要过多使用索引，过多使用会对更新操作效<br>率有很大影响。<br>如果表已经建立了(col1，col2)，就没有必要再单独建立（col1）；如果现在有(col1)索引，如果查<br>询需要col1和col2条件，可以建立(col1,col2)复合索引，对于查询有一定提高。<br>1.5 全文索引<br>查询操作在数据量比较少时，可以使用like模糊查询，但是对于大量的文本数据检索，效率很低。如果<br>使用全文索引，查询速度会比like快很多倍。在MySQL 5.6 以前的版本，只有MyISAM存储引擎支持全<br>文索引，从MySQL 5.6开始MyISAM和InnoDB存储引擎均支持。<br>创建全文索引的方法如下：<br>CREATE FULLTEXT INDEX &lt;索引的名字&gt; ON tablename (字段名);<br>ALTER TABLE tablename ADD FULLTEXT [索引的名字] (字段名);<br>CREATE TABLE tablename ( […], FULLTEXT KEY [索引的名字] (字段名) ;<br>和常用的like模糊查询不同，全文索引有自己的语法格式，使用 match 和 against 关键字，比如<br>全文索引使用注意事项：<br>全文索引必须在字符串、文本字段上建立。<br>全文索引字段值必须在最小字符和最大字符之间的才会有效。（innodb：3-84；myisam：4-<br>84）<br>全文索引字段值要进行切词处理，按syntax字符进行切割，例如b+aaa，切分成b和aaa<br>全文索引匹配查询，默认使用的是等值匹配，例如a匹配a，不会匹配ab,ac。如果想匹配可以在布<br>尔模式下搜索a*<br>第2节 索引原理<br>MySQL官方对索引定义：是存储引擎用于快速查找记录的一种数据结构。需要额外开辟空间和数据维护<br>工作。<br>索引是物理数据页存储，在数据文件中（InnoDB，ibd文件），利用数据页(page)存储。<br>索引可以加快检索速度，但是同时也会降低增删改操作速度，索引维护需要代价。<br>索引涉及的理论知识：二分查找法、Hash和B+Tree。<br>2.1 二分查找法<br>二分查找法也叫作折半查找法，它是在有序数组中查找指定数据的搜索算法。它的优点是等值查询、范<br>围查询性能优秀，缺点是更新数据、新增数据、删除数据维护成本高。<br>首先定位left和right两个指针<br>select * from user where match(name) against(‘aaa’); select * from user where match(name) against(‘a*’ in boolean mode);<br>计算(left+right)/2<br>判断除2后索引位置值与目标值的大小比对<br>索引位置值大于目标值就-1，right移动；如果小于目标值就+1，left移动<br>举个例子，下面的有序数组有17 个值，查找的目标值是7，过程如下：<br>第一次查找<br>第二次查找<br>第三次查找<br>第四次查找<br>2.2 Hash结构<br>Hash底层实现是由Hash表来实现的，是根据键值 &lt;key,value&gt; 存储数据的结构。非常适合根据key查找<br>value值，也就是单个key查询，或者说等值查询。其结构如下所示：<br>从上面结构可以看出，Hash索引可以方便的提供等值查询，但是对于范围查询就需要全表扫描了。<br>Hash索引在MySQL 中Hash结构主要应用在Memory原生的Hash索引 、InnoDB 自适应哈希索引。<br>InnoDB提供的自适应哈希索引功能强大，接下来重点描述下InnoDB 自适应哈希索引。<br>InnoDB自适应哈希索引是为了提升查询效率，InnoDB存储引擎会监控表上各个索引页的查询，当<br>InnoDB注意到某些索引值访问非常频繁时，会在内存中基于B+Tree索引再创建一个哈希索引，使得内<br>存中的 B+Tree 索引具备哈希索引的功能，即能够快速定值访问频繁访问的索引页。<br>InnoDB自适应哈希索引：在使用Hash索引访问时，一次性查找就能定位数据，等值查询效率要优于<br>B+Tree。<br>自适应哈希索引的建立使得InnoDB存储引擎能自动根据索引页访问的频率和模式自动地为某些热点页<br>建立哈希索引来加速访问。另外InnoDB自适应哈希索引的功能，用户只能选择开启或关闭功能，无法<br>进行人工干涉。<br>show engine innodb status \G; show variables like ‘%innodb_adaptive%’;<br>2.3 B+Tree结构<br>MySQL数据库索引采用的是B+Tree结构，在B-Tree结构上做了优化改造。<br>B-Tree结构<br>索引值和data数据分布在整棵树结构中<br>每个节点可以存放多个索引值及对应的data数据<br>树节点中的多个索引值从左到右升序排列<br>B树的搜索：从根节点开始，对节点内的索引值序列采用二分法查找，如果命中就结束查找。没有<br>命中会进入子节点重复查找过程，直到所对应的的节点指针为空，或已经是叶子节点了才结束。<br>B+Tree结构<br>非叶子节点不存储data数据，只存储索引值，这样便于存储更多的索引值<br>叶子节点包含了所有的索引值和data数据<br>叶子节点用指针连接，提高区间的访问性能<br>相比B树，B+树进行范围查找时，只需要查找定位两个节点的索引值，然后利用叶子节点的指针进<br>行遍历即可。而B树需要遍历范围内所有的节点和数据，显然B+Tree效率高。<br>2.4 聚簇索引和辅助索引<br>聚簇索引和非聚簇索引：B+Tree的叶子节点存放主键索引值和行记录就属于聚簇索引；如果索引值和行<br>记录分开存放就属于非聚簇索引。<br>主键索引和辅助索引：B+Tree的叶子节点存放的是主键字段值就属于主键索引；如果存放的是非主键值<br>就属于辅助索引（二级索引）。<br>在InnoDB引擎中，主键索引采用的就是聚簇索引结构存储。<br>聚簇索引（聚集索引）<br>聚簇索引是一种数据存储方式，InnoDB的聚簇索引就是按照主键顺序构建 B+Tree结构。B+Tree<br>的叶子节点就是行记录，行记录和主键值紧凑地存储在一起。 这也意味着 InnoDB 的主键索引就<br>是数据表本身，它按主键顺序存放了整张表的数据，占用的空间就是整个表数据量的大小。通常说<br>的主键索引就是聚集索引。<br>InnoDB的表要求必须要有聚簇索引：<br>如果表定义了主键，则主键索引就是聚簇索引<br>如果表没有定义主键，则第一个非空unique列作为聚簇索引<br>否则InnoDB会从建一个隐藏的row-id作为聚簇索引<br>辅助索引<br>InnoDB辅助索引，也叫作二级索引，是根据索引列构建 B+Tree结构。但在 B+Tree 的叶子节点中<br>只存了索引列和主键的信息。二级索引占用的空间会比聚簇索引小很多， 通常创建辅助索引就是<br>为了提升查询效率。一个表InnoDB只能创建一个聚簇索引，但可以创建多个辅助索引。<br>非聚簇索引<br>与InnoDB表存储不同，MyISAM数据表的索引文件和数据文件是分开的，被称为非聚簇索引结<br>构。</p><p>查询优化<br>MySQL 提供了一个 EXPLAIN 命令，它可以对 SELECT 语句进行分析，并输出 SELECT 执行的详细信<br>息，供开发人员有针对性的优化。例如：<br>EXPLAIN 命令的输出内容大致如下：<br>select_type<br>表示查询的类型。常用的值如下：<br>SIMPLE ： 表示查询语句不包含子查询或union<br>PRIMARY：表示此查询是最外层的查询<br>UNION：表示此查询是UNION的第二个或后续的查询<br>EXPLAIN SELECT * from user WHERE id &lt; 3;<br>DEPENDENT UNION：UNION中的第二个或后续的查询语句，使用了外面查询结果<br>UNION RESULT：UNION的结果<br>SUBQUERY：SELECT子查询语句<br>DEPENDENT SUBQUERY：SELECT子查询语句依赖外层查询的结果。<br>最常见的查询类型是SIMPLE，表示我们的查询没有子查询也没用到UNION查询。<br>type<br>表示存储引擎查询数据时采用的方式。比较重要的一个属性，通过它可以判断出查询是全表扫描还<br>是基于索引的部分扫描。常用属性值如下，从上至下效率依次增强。<br>ALL：表示全表扫描，性能最差。<br>index：表示基于索引的全表扫描，先扫描索引再扫描全表数据。<br>range：表示使用索引范围查询。使用&gt;、&gt;=、&lt;、&lt;=、in等等。<br>ref：表示使用非唯一索引进行单值查询。<br>eq_ref：一般情况下出现在多表join查询，表示前面表的每一个记录，都只能匹配后面表的一<br>行结果。<br>const：表示使用主键或唯一索引做等值查询，常量查询。<br>NULL：表示不用访问表，速度最快。<br>possible_keys<br>表示查询时能够使用到的索引。注意并不一定会真正使用，显示的是索引名称。<br>key<br>表示查询时真正使用到的索引，显示的是索引名称。<br>rows<br>MySQL查询优化器会根据统计信息，估算SQL要查询到结果需要扫描多少行记录。原则上rows是<br>越少效率越高，可以直观的了解到SQL效率高低。<br>key_len<br>表示查询使用了索引的字节数量。可以判断是否全部使用了组合索引。<br>key_len的计算规则如下：<br>字符串类型<br>字符串长度跟字符集有关：latin1=1、gbk=2、utf8=3、utf8mb4=4<br>char(n)：n*字符集长度<br>varchar(n)：n * 字符集长度 + 2字节<br>数值类型<br>TINYINT：1个字节<br>SMALLINT：2个字节<br>MEDIUMINT：3个字节<br>INT、FLOAT：4个字节<br>BIGINT、DOUBLE：8个字节<br>时间类型<br>DATE：3个字节<br>TIMESTAMP：4个字节<br>DATETIME：8个字节<br>字段属性<br>NULL属性占用1个字节，如果一个字段设置了NOT NULL，则没有此项。<br>Extra<br>Extra表示很多额外的信息，各种操作会在Extra提示相关信息，常见几种如下：<br>Using where<br>表示查询需要通过索引回表查询数据。<br>Using index<br>表示查询需要通过索引，索引就可以满足所需数据。<br>Using filesort<br>表示查询出来的结果需要额外排序，数据量小在内存，大的话在磁盘，因此有Using filesort<br>建议优化。<br>Using temprorary<br>查询使用到了临时表，一般出现于去重、分组等操作。<br>3.2 回表查询<br>在之前介绍过，InnoDB索引有聚簇索引和辅助索引。聚簇索引的叶子节点存储行记录，InnoDB必须要<br>有，且只有一个。辅助索引的叶子节点存储的是主键值和索引字段值，通过辅助索引无法直接定位行记<br>录，通常情况下，需要扫码两遍索引树。先通过辅助索引定位主键值，然后再通过聚簇索引定位行记<br>录，这就叫做回表查询，它的性能比扫一遍索引树低。<br>总结：通过索引查询主键值，然后再去聚簇索引查询记录信息<br>3.3 覆盖索引<br>在SQL-Server官网的介绍如下：<br>在MySQL官网，类似的说法出现在explain查询计划优化章节，即explain的输出结果Extra字段为Using<br>index时，能够触发索引覆盖。<br>不管是SQL-Server官网，还是MySQL官网，都表达了：只需要在一棵索引树上就能获取SQL所需的所<br>有列数据，无需回表，速度更快，这就叫做索引覆盖。<br>实现索引覆盖最常见的方法就是：将被查询的字段，建立到组合索引。<br>3.4 最左前缀原则<br>复合索引使用时遵循最左前缀原则，最左前缀顾名思义，就是最左优先，即查询中使用到最左边的列，<br>那么查询就会使用到索引，如果从索引的第二列开始查找，索引将失效。<br>3.5 LIKE查询<br>面试题：MySQL在使用like模糊查询时，索引能不能起作用？<br>回答：MySQL在使用Like模糊查询时，索引是可以被使用的，只有把%字符写在后面才会使用到索引。<br>select * from user where name like ‘%o%’; //不起作用<br>select * from user where name like ‘o%’; //起作用<br>select * from user where name like ‘%o’; //不起作用<br>3.6 NULL查询<br>面试题：如果MySQL表的某一列含有NULL值，那么包含该列的索引是否有效？<br>对MySQL来说，NULL是一个特殊的值，从概念上讲，NULL意味着“一个未知值”，它的处理方式与其他<br>值有些不同。比如：不能使用=，&lt;，&gt;这样的运算符，对NULL做算术运算的结果都是NULL，count时<br>不会包括NULL行等，NULL比空字符串需要更多的存储空间等。<br>NULL列需要增加额外空间来记录其值是否为NULL。对于MyISAM表，每一个空列额外占用一位，四舍<br>五入到最接近的字节。<br>虽然MySQL可以在含有NULL的列上使用索引，但NULL和其他数据还是有区别的，不建议列上允许为<br>NULL。最好设置NOT NULL，并给一个默认值，比如0和 ‘’ 空字符串等，如果是datetime类型，也可以<br>设置系统当前时间或某个固定的特殊值，例如’1970-01-01 00:00:00’。 “NULL columns require additional space in the row to record whether their values are NULL. For MyISAM tables, each NULL column takes one bit extra, rounded up to the nearest byte.”<br>3.7 索引与排序<br>MySQL查询支持filesort和index两种方式的排序，filesort是先把结果查出，然后在缓存或磁盘进行排序<br>操作，效率较低。使用index是指利用索引自动实现排序，不需另做排序操作，效率会比较高。<br>filesort有两种排序算法：双路排序和单路排序。<br>双路排序：需要两次磁盘扫描读取，最终得到用户数据。第一次将排序字段读取出来，然后排序；第二<br>次去读取其他字段数据。<br>单路排序：从磁盘查询所需的所有列数据，然后在内存排序将结果返回。如果查询数据超出缓存<br>sort_buffer，会导致多次磁盘读取操作，并创建临时表，最后产生了多次IO，反而会增加负担。解决方<br>案：少使用select *；增加sort_buffer_size容量和max_length_for_sort_data容量。<br>如果我们Explain分析SQL，结果中Extra属性显示Using filesort，表示使用了filesort排序方式，需要优<br>化。如果Extra属性显示Using index时，表示覆盖索引，也表示所有操作在索引上完成，也可以使用<br>index排序方式，建议大家尽可能采用覆盖索引。<br>以下几种情况，会使用index方式的排序。<br>ORDER BY 子句索引列组合满足索引最左前列<br>WHERE子句+ORDER BY子句索引列组合满足索引最左前列<br>以下几种情况，会使用filesort方式的排序。<br>对索引列同时使用了ASC和DESC<br>WHERE子句和ORDER BY子句满足最左前缀，但where子句使用了范围查询（例如&gt;、&lt;、in<br>等）<br>ORDER BY或者WHERE+ORDER BY索引列没有满足索引最左前列<br>使用了不同的索引，MySQL每次只采用一个索引，ORDER BY涉及了两个索引<br>WHERE子句与ORDER BY子句，使用了不同的索引<br>explain select id from user order by id; //对应(id)、(id,name)索引有效 explain select id from user where age=18 order by name; //对应 (age,name)索引 explain select id from user order by age asc,name desc; //对应 (age,name)索引 explain select id from user where age&gt;10 order by name; //对应 (age,name)索引 explain select id from user order by name; //对应(age,name)索引 explain select id from user order by name,age; //对应(name)、(age)两个索 引explain select id from user where name=’tom’ order by age; //对应 (name)、(age)索引<br>WHERE子句或者ORDER BY子句中索引列使用了表达式，包括函数表达式<br>第4节 查询优化<br>4.1 慢查询定位<br>开启慢查询日志<br>查看 MySQL 数据库是否开启了慢查询日志和慢查询日志文件的存储位置的命令如下：<br>通过如下命令开启慢查询日志：<br>long_query_time：指定慢查询的阀值，单位秒。如果SQL执行时间超过阀值，就属于慢查询<br>记录到日志文件中。<br>log_queries_not_using_indexes：表示会记录没有使用索引的查询SQL。前提是slow_query_log<br>的值为ON，否则不会奏效。<br>查看慢查询日志<br>文本方式查看<br>直接使用文本编辑器打开slow.log日志即可。<br>time：日志记录的时间<br>User@Host：执行的用户及主机<br>Query_time：执行的时间<br>Lock_time：锁表时间<br>Rows_sent：发送给请求方的记录数，结果数量<br>Rows_examined：语句扫描的记录条数<br>SET timestamp：语句执行的时间点<br>select….：执行的具体的SQL语句<br>使用mysqldumpslow查看<br>MySQL 提供了一个慢查询日志分析工具mysqldumpslow，可以通过该工具分析慢查询日志<br>内容。<br>在 MySQL bin目录下执行下面命令可以查看该使用格式。<br>运行如下命令查看慢查询日志信息：<br>explain select id from user order by abs(age); //对应(age)索引 SHOW VARIABLES LIKE ‘slow_query_log%’ SET global slow_query_log = ON; SET global slow_query_log_file = ‘OAK-slow.log’; SET global log_queries_not_using_indexes = ON; SET long_query_time = 10; perl mysqldumpslow.pl –help<br>除了使用mysqldumpslow工具，也可以使用第三方分析工具，比如pt-query-digest、<br>mysqlsla等。<br>4.2 慢查询优化<br>索引和慢查询<br>如何判断是否为慢查询？<br>MySQL判断一条语句是否为慢查询语句，主要依据SQL语句的执行时间，它把当前语句的执<br>行时间跟 long_query_time 参数做比较，如果语句的执行时间 &gt; long_query_time，就会把<br>这条执行语句记录到慢查询日志里面。long_query_time 参数的默认值是 10s，该参数值可<br>以根据自己的业务需要进行调整。<br>如何判断是否应用了索引？<br>SQL语句是否使用了索引，可根据SQL语句执行过程中有没有用到表的索引，可通过 explain<br>命令分析查看，检查结果中的 key 值，是否为NULL。<br>应用了索引是否一定快？<br>下面我们来看看下面语句的 explain 的结果，你觉得这条语句有用上索引吗？比如<br>虽然使用了索引，但是还是从主键索引的最左边的叶节点开始向右扫描整个索引树，进行了<br>全表扫描，此时索引就失去了意义。<br>而像 select * from user where id = 2; 这样的语句，才是我们平时说的使用了索引。它表示<br>的意思是，我们使用了索引的快速搜索功能，并且有效地减少了扫描行数。<br>查询是否使用索引，只是表示一个SQL语句的执行过程；而是否为慢查询，是由它执行的时间决定<br>的，也就是说是否使用了索引和是否是慢查询两者之间没有必然的联系。<br>我们在使用索引时，不要只关注是否起作用，应该关心索引是否减少了查询扫描的数据行数，如果<br>扫描行数减少了，效率才会得到提升。对于一个大表，不止要创建索引，还要考虑索引过滤性，过<br>滤性好，执行速度才会快。<br>提高索引过滤性<br>假如有一个5000万记录的用户表，通过sex=’男’索引过滤后，还需要定位3000万，SQL执行速度也<br>不会很快。其实这个问题涉及到索引的过滤性，比如1万条记录利用索引过滤后定位10条、100<br>条、1000条，那他们过滤性是不同的。索引过滤性与索引字段、表的数据量、表设计结构都有关<br>系。<br>下面我们看一个案例：<br>优化1 perl mysqldumpslow.pl -t 5 -s at C:\ProgramData\MySQL\Data\OAK-slow.log select * from user where id&gt;0; 表：student 字段：id,name,sex,age 造数据：insert into student (name,sex,age) select name,sex,age from student; SQL案例：select * from student where age=18 and name like ‘张%’;（全表扫 描）alter table student add index(name); //追加name索引<br>优化3<br>慢查询原因总结<br>全表扫描：explain分析type属性all<br>全索引扫描：explain分析type属性index<br>索引过滤性不好：靠索引字段选型、数据量和状态、表设计<br>频繁的回表查询开销：尽量少用select *，使用覆盖索引<br>4.3 分页查询优化<br>一般性分页<br>般的分页查询使用简单的 limit 子句就可以实现。limit格式如下：<br>第一个参数指定第一个返回记录行的偏移量，注意从0开始；<br>第二个参数指定返回记录行的最大数目；<br>如果只给定一个参数，它表示返回最大的记录行数目；<br>思考1：如果偏移量固定，返回记录量对执行时间有什么影响？<br>结果：在查询记录时，返回记录量低于100条，查询时间基本没有变化，差距不大。随着查询记录<br>量越大，所花费的时间也会越来越多。<br>思考2：如果查询偏移量变化，返回记录数固定对执行时间有什么影响？</p><p>优化2 alter table student add index(age,name); //追加age,name索引 可以看到，index condition pushdown 优化的效果还是很不错的。再进一步优化，我们可以把名 字的第一个字和年龄做一个联合索引，这里可以使用 MySQL 5.7 引入的虚拟列来实现。 //为user表添加first_name虚拟列，以及联合索引(first_name,age) alter table student add first_name varchar(2) generated always as (left(name, 1)), add index(first_name, age); explain select * from student where first_name=’张’ and age=18; SELECT * FROM 表名 LIMIT [offset,] rows select * from user limit 10000,1; select * from user limit 10000,10; select * from user limit 10000,100; select * from user limit 10000,1000; select * from user limit 10000,10000;<br>结果：在查询记录时，如果查询记录量相同，偏移量超过100后就开始随着偏移量增大，查询时间<br>急剧的增加。（这种分页查询机制，每次都会从数据库第一条记录开始扫描，越往后查询越慢，而<br>且查询的数据越多，也会拖慢总查询速度。）<br>分页优化方案<br>第一步：利用覆盖索引优化<br>第二步：利用子查询优化<br>原因：使用了id做主键比较(id&gt;=)，并且子查询使用了覆盖索引进行优化。<br>MySQL事务和锁<br>第1节 ACID 特性<br>在关系型数据库管理系统中，一个逻辑工作单元要成为事务，必须满足这 4 个特性，即所谓的 ACID：<br>原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability）。</p><p>1.1 原子性<br>原子性：事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。<br>修改—》Buffer Pool修改—》刷盘。可能会有下面两种情况：<br>事务提交了，如果此时Buffer Pool的脏页没有刷盘，如何保证修改的数据生效？ Redo<br>如果事务没提交，但是Buffer Pool的脏页刷盘了，如何保证不该存在的数据撤销？Undo<br>每一个写事务，都会修改BufferPool，从而产生相应的Redo/Undo日志，在Buffer Pool 中的页被刷到<br>磁盘之前，这些日志信息都会先写入到日志文件中，如果 Buffer Pool 中的脏页没有刷成功，此时数据<br>库挂了，那在数据库再次启动之后，可以通过 Redo 日志将其恢复出来，以保证脏页写的数据不会丢<br>失。如果脏页刷新成功，此时数据库挂了，就需要通过Undo来实现了。<br>1.2 持久性<br>持久性：指的是一个事务一旦提交，它对数据库中数据的改变就应该是永久性的，后续的操作或故障不<br>应该对其有任何影响，不会丢失。<br>如下图所示，一个“提交”动作触发的操作有：binlog落地、发送binlog、存储引擎提交、flush_logs，<br>check_point、事务提交标记等。这些都是数据库保证其数据完整性、持久性的手段。<br>select * from user limit 1,100; select * from user limit 10,100; select * from user limit 100,100; select * from user limit 1000,100; select * from user limit 10000,100; select * from user limit 10000,100; select id from user limit 10000,100; select * from user limit 10000,100; select * from user where id&gt;= (select id from user limit 10000,1) limit 100;<br>MySQL的持久性也与WAL技术相关，redo log在系统Crash重启之类的情况时，可以修复数据，从而保<br>障事务的持久性。通过原子性可以保证逻辑上的持久性，通过存储引擎的数据刷盘可以保证物理上的持<br>久性。<br>1.3 隔离性<br>隔离性：指的是一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对其他的并<br>发事务是隔离的。<br>InnoDB 支持的隔离性有 4 种，隔离性从低到高分别为：读未提交、读提交、可重复读、可串行化。锁<br>和多版本控制（MVCC）技术就是用于保障隔离性的（后面课程详解）。<br>1.4 一致性<br>一致性：指的是事务开始之前和事务结束之后，数据库的完整性限制未被破坏。一致性包括两方面的内<br>容，分别是约束一致性和数据一致性。<br>约束一致性：创建表结构时所指定的外键、Check、唯一索引等约束，可惜在 MySQL 中不支持<br>Check 。<br>数据一致性：是一个综合性的规定，因为它是由原子性、持久性、隔离性共同保证的结果，而不是<br>单单依赖于某一种技术。<br>一致性也可以理解为数据的完整性。数据的完整性是通过原子性、隔离性、持久性来保证的，而这3个<br>特性又是通过 Redo/Undo 来保证的。逻辑上的一致性，包括唯一索引、外键约束、check 约束，这属<br>于业务逻辑范畴。<br>ACID 及它们之间的关系如下图所示，4个特性中有3个与 WAL 有关系，都需要通过 Redo、Undo 日志<br>来保证等。<br>WAL的全称为Write-Ahead Logging，先写日志，再写磁盘。<br>第2节 事务控制的演进<br>2.1 并发事务<br>事务并发处理可能会带来一些问题，比如：更新丢失、脏读、不可重复读、幻读等。<br>更新丢失<br>当两个或多个事务更新同一行记录，会产生更新丢失现象。可以分为回滚覆盖和提交覆盖。<br>回滚覆盖：一个事务回滚操作，把其他事务已提交的数据给覆盖了。<br>提交覆盖：一个事务提交操作，把其他事务已提交的数据给覆盖了。<br>脏读<br>一个事务读取到了另一个事务修改但未提交的数据。<br>不可重复读<br>一个事务中多次读取同一行记录不一致，后面读取的跟前面读取的不一致。<br>幻读<br>一个事务中多次按相同条件查询，结果不一致。后续查询的结果和面前查询结果不同，多了或少了<br>几行记录。<br>2.3 排队<br>最简单的方法，就是完全顺序执行所有事务的数据库操作，不需要加锁，简单的说就是全局排队。序列<br>化执行所有的事务单元，数据库某个时刻只处理一个事务操作，特点是强一致性，处理性能低。<br>2.2 排他锁<br>引入锁之后就可以支持并发处理事务，如果事务之间涉及到相同的数据项时，会使用排他锁，或叫互斥<br>锁，先进入的事务独占数据项以后，其他事务被阻塞，等待前面的事务释放锁。<br>注意，在整个事务1结束之前，锁是不会被释放的，所以，事务2必须等到事务1结束之后开始。<br>2.3 读写锁<br>读和写操作：读读、写写、读写、写读。<br>读写锁就是进一步细化锁的颗粒度，区分读操作和写操作，让读和读之间不加锁，这样下面的两个事务<br>就可以同时被执行了。<br>读写锁，可以让读和读并行，而读和写、写和读、写和写这几种之间还是要加排他锁。<br>2.4 MVCC<br>多版本控制MVCC，也就是Copy on Write的思想。MVCC除了支持读和读并行，还支持读和写、写和读<br>的并行，但为了保证一致性，写和写是无法并行的。<br>在事务1开始写操作的时候会copy一个记录的副本，其他事务读操作会读取这个记录副本，因此不会影<br>响其他事务对此记录的读取，实现写和读并行。<br>一、MVCC概念<br>MVCC（Multi Version Concurrency Control）被称为多版本控制，是指在数据库中为了实现高并发的<br>数据访问，对数据进行多版本处理，并通过事务的可见性来保证事务能看到自己应该看到的数据版本。<br>多版本控制很巧妙地将稀缺资源的独占互斥转换为并发，大大提高了数据库的吞吐量及读写性能。<br>如何生成的多版本？每次事务修改操作之前，都会在Undo日志中记录修改之前的数据状态和事务号，<br>该备份记录可以用于其他事务的读取，也可以进行必要时的数据回滚。<br>二、MVCC实现原理<br>MVCC最大的好处是读不加锁，读写不冲突。在读多写少的系统应用中，读写不冲突是非常重要的，极<br>大的提升系统的并发性能，这也是为什么现阶段几乎所有的关系型数据库都支持 MVCC 的原因，不过目<br>前MVCC只在 Read Commited 和 Repeatable Read 两种隔离级别下工作。<br>在 MVCC 并发控制中，读操作可以分为两类: 快照读（Snapshot Read）与当前读 （Current Read）。<br>快照读：读取的是记录的快照版本（有可能是历史版本），不用加锁。（select）<br>当前读：读取的是记录的最新版本，并且当前读返回的记录，都会加锁，保证其他事务不会再并发<br>修改这条记录。（select… for update 或lock in share mode，insert/delete/update）<br>为了让大家更直观地理解 MVCC 的实现原理，举一个记录更新的案例来讲解 MVCC 中多版本的实现。<br>假设 F1～F6 是表中字段的名字，1～6 是其对应的数据。后面三个隐含字段分别对应该行的隐含ID、事<br>务号和回滚指针，如下图所示。<br>具体的更新过程如下：<br>假如一条数据是刚 INSERT 的，DB_ROW_ID 为 1，其他两个字段为空。当事务 1 更改该行的数据值<br>时，会进行如下操作，如下图所示。<br>用排他锁锁定该行；记录 Redo log；<br>把该行修改前的值复制到 Undo log，即图中下面的行；<br>修改当前行的值，填写事务编号，使回滚指针指向 Undo log 中修改前的行。<br>接下来事务2操作，过程与事务 1 相同，此时 Undo log 中会有两行记录，并且通过回滚指针连在一<br>起，通过当前记录的回滚指针回溯到该行创建时的初始内容，如下图所示。<br>MVCC已经实现了读读、读写、写读并发处理，如果想进一步解决写写冲突，可以采用下面两种方案：<br>乐观锁<br>悲观锁<br>第3节 事务隔离级别<br>3.1 隔离级别类型<br>前面提到的“更新丢失”、”脏读”、“不可重复读”和“幻读”等并发事务问题，其实都是数据库一致性问题，<br>为了解决这些问题，MySQL数据库是通过事务隔离级别来解决的，数据库系统提供了以下 4 种事务隔<br>离级别供用户选择。<br>读未提交<br>Read Uncommitted 读未提交：解决了回滚覆盖类型的更新丢失，但可能发生脏读现象，也就是<br>可能读取到其他会话中未提交事务修改的数据。<br>已提交读<br>Read Committed 读已提交：只能读取到其他会话中已经提交的数据，解决了脏读。但可能发生<br>不可重复读现象，也就是可能在一个事务中两次查询结果不一致。<br>可重复度<br>Repeatable Read 可重复读：解决了不可重复读，它确保同一事务的多个实例在并发读取数据<br>时，会看到同样的数据行。不过理论上会出现幻读，简单的说幻读指的的当用户读取某一范围的数<br>据行时，另一个事务又在该范围插入了新行，当用户在读取该范围的数据时会发现有新的幻影行。<br>可串行化<br>Serializable 串行化：所有的增删改查串行执行。它通过强制事务排序，解决相互冲突，从而解决<br>幻度的问题。这个级别可能导致大量的超时现象的和锁竞争，效率低下。<br>数据库的事务隔离级别越高，并发问题就越小，但是并发处理能力越差（代价）。读未提交隔离级别最<br>低，并发问题多，但是并发处理能力好。以后使用时，可以根据系统特点来选择一个合适的隔离级别，<br>比如对不可重复读和幻读并不敏感，更多关心数据库并发处理能力，此时可以使用Read Commited隔<br>离级别。<br>事务隔离级别，针对Innodb引擎，支持事务的功能。像MyISAM引擎没有关系。<br>事务隔离级别和锁的关系<br>1）事务隔离级别是SQL92定制的标准，相当于事务并发控制的整体解决方案，本质上是对锁和MVCC使<br>用的封装，隐藏了底层细节。<br>2）锁是数据库实现并发控制的基础，事务隔离性是采用锁来实现，对相应操作加不同的锁，就可以防<br>止其他事务同时对数据进行读写操作。<br>3）对用户来讲，首先选择使用隔离级别，当选用的隔离级别不能解决并发问题或需求时，才有必要在<br>开发中手动的设置锁。<br>MySQL默认隔离级别：可重复读<br>Oracle、SQLServer默认隔离级别：读已提交<br>一般使用时，建议采用默认隔离级别，然后存在的一些并发问题，可以通过悲观锁、乐观锁等实现处<br>理。<br>3.2 MySQL隔离级别控制<br>MySQL默认的事务隔离级别是Repeatable Read，查看MySQL当前数据库的事务隔离级别命令如下：<br>或show variables like ‘tx_isolation’;<br>设置事务隔离级别可以如下命令：<br>第4节 锁机制和实战<br>4.1 锁分类<br>在 MySQL中锁有很多不同的分类。<br>从操作的粒度可分为表级锁、行级锁和页级锁。<br>表级锁：每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。应用在<br>MyISAM、InnoDB、BDB 等存储引擎中。<br>行级锁：每次操作锁住一行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。应<br>用在InnoDB 存储引擎中。<br>页级锁：每次锁定相邻的一组记录，锁定粒度界于表锁和行锁之间，开销和加锁时间界于表<br>锁和行锁之间，并发度一般。应用在BDB 存储引擎中。<br>从操作的类型可分为读锁和写锁。<br>读锁（S锁）：共享锁，针对同一份数据，多个读操作可以同时进行而不会互相影响。<br>写锁（X锁）：排他锁，当前写操作没有完成前，它会阻断其他写锁和读锁。<br>IS锁、IX锁：意向读锁、意向写锁，属于表级锁，S和X主要针对行级锁。在对表记录添加S或X锁之<br>前，会先对表添加IS或IX锁。<br>S锁：事务A对记录添加了S锁，可以对记录进行读操作，不能做修改，其他事务可以对该记录追加<br>S锁，但是不能追加X锁，需要追加X锁，需要等记录的S锁全部释放。<br>X锁：事务A对记录添加了X锁，可以对记录进行读和修改操作，其他事务不能对记录做读和修改操<br>作。<br>从操作的性能可分为乐观锁和悲观锁。<br>乐观锁：一般的实现方式是对记录数据版本进行比对，在数据更新提交的时候才会进行冲突<br>检测，如果发现冲突了，则提示错误信息。<br>悲观锁：在对一条数据修改的时候，为了避免同时被其他人修改，在修改数据之前先锁定，<br>再修改的控制方式。共享锁和排他锁是悲观锁的不同实现，但都属于悲观锁范畴。<br>4.2 行锁原理<br>在InnoDB引擎中，我们可以使用行锁和表锁，其中行锁又分为共享锁和排他锁。InnoDB行锁是通过对<br>索引数据页上的记录加锁实现的，主要实现算法有 3 种：Record Lock、Gap Lock 和 Next-key Lock。 select @@tx_isolation; set tx_isolation=’READ-UNCOMMITTED’; set tx_isolation=’READ-COMMITTED’; set tx_isolation=’REPEATABLE-READ’; set tx_isolation=’SERIALIZABLE’;<br>RecordLock锁：锁定单个行记录的锁。（记录锁，RC、RR隔离级别都支持）<br>GapLock锁：间隙锁，锁定索引记录间隙，确保索引记录的间隙不变。（范围锁，RR隔离级别支<br>持）<br>Next-key Lock 锁：记录锁和间隙锁组合，同时锁住数据，并且锁住数据前后范围。（记录锁+范<br>围锁，RR隔离级别支持）<br>在RR隔离级别，InnoDB对于记录加锁行为都是先采用Next-Key Lock，但是当SQL操作含有唯一索引<br>时，Innodb会对Next-Key Lock进行优化，降级为RecordLock，仅锁住索引本身而非范围。<br>1）select … from 语句：InnoDB引擎采用MVCC机制实现非阻塞读，所以对于普通的select语句，<br>InnoDB不加锁<br>2）select … from lock in share mode语句：追加了共享锁，InnoDB会使用Next-Key Lock锁进行处<br>理，如果扫描发现唯一索引，可以降级为RecordLock锁。<br>3）select … from for update语句：追加了排他锁，InnoDB会使用Next-Key Lock锁进行处理，如果扫<br>描发现唯一索引，可以降级为RecordLock锁。<br>4）update … where 语句：InnoDB会使用Next-Key Lock锁进行处理，如果扫描发现唯一索引，可以<br>降级为RecordLock锁。<br>5）delete … where 语句：InnoDB会使用Next-Key Lock锁进行处理，如果扫描发现唯一索引，可以降<br>级为RecordLock锁。<br>6）insert语句：InnoDB会在将要插入的那一行设置一个排他的RecordLock锁。<br>下面以“update t1 set name=‘XX’ where id=10”操作为例，举例子分析下 InnoDB 对不同索引的加锁行<br>为，以RR隔离级别为例。<br>主键加锁<br>加锁行为：仅在id=10的主键索引记录上加X锁。<br>唯一键加锁<br>加锁行为：现在唯一索引id上加X锁，然后在id=10的主键索引记录上加X锁。<br>非唯一键加锁<br>加锁行为：对满足id=10条件的记录和主键分别加X锁，然后在(6,c)-(10,b)、(10,b)-(10,d)、(10,d)-<br>(11,f)范围分别加Gap Lock。<br>无索引加锁<br>加锁行为：表里所有行和间隙都会加X锁。（当没有索引时，会导致全表锁定，因为InnoDB引擎<br>锁机制是基于索引实现的记录锁定）。<br>4.3 悲观锁<br>悲观锁（Pessimistic Locking），是指在数据处理过程，将数据处于锁定状态，一般使用数据库的锁机<br>制实现。从广义上来讲，前面提到的行锁、表锁、读锁、写锁、共享锁、排他锁等，这些都属于悲观锁<br>范畴。<br>表级锁<br>表级锁每次操作都锁住整张表，并发度最低。常用命令如下：<br>手动增加表锁<br>查看表上加过的锁<br>删除表锁<br>表级读锁：当前表追加read锁，当前连接和其他的连接都可以读操作；但是当前连接增删改操作<br>会报错，其他连接增删改会被阻塞。<br>lock table 表名称 read|write,表名称2 read|write; show open tables; unlock tables;<br>表级写锁：当前表追加write锁，当前连接可以对表做增删改查操作，其他连接对该表所有操作都<br>被阻塞（包括查询）。<br>总结：表级读锁会阻塞写操作，但是不会阻塞读操作。而写锁则会把读和写操作都阻塞。<br>共享锁（行级锁-读锁）<br>共享锁又称为读锁，简称S锁。共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数<br>据，但是只能读不能修改。使用共享锁的方法是在select … lock in share mode，只适用查询语<br>句。<br>总结：事务使用了共享锁（读锁），只能读取，不能修改，修改操作被阻塞。<br>排他锁（行级锁-写锁）<br>排他锁又称为写锁，简称X锁。排他锁就是不能与其他锁并存，如一个事务获取了一个数据行的排<br>他锁，其他事务就不能对该行记录做其他操作，也不能获取该行的锁。<br>使用排他锁的方法是在SQL末尾加上for update，innodb引擎默认会在update，delete语句加上<br>for update。行级锁的实现其实是依靠其对应的索引，所以如果操作没用到索引的查询，那么会锁<br>住全表记录。<br>总结：事务使用了排他锁（写锁），当前事务可以读取和修改，其他事务不能修改，也不能获取记录<br>锁（select… for update）。如果查询没有使用到索引，将会锁住整个表记录。<br>4.4 乐观锁<br>乐观锁是相对于悲观锁而言的，它不是数据库提供的功能，需要开发者自己去实现。在数据库操作时，<br>想法很乐观，认为这次的操作不会导致冲突，因此在数据库操作时并不做任何的特殊处理，即不加锁，<br>而是在进行事务提交时再去判断是否有冲突了。<br>乐观锁实现的关键点：冲突的检测。<br>悲观锁和乐观锁都可以解决事务写写并发，在应用中可以根据并发处理能力选择区分，比如对并发率要<br>求高的选择乐观锁；对于并发率要求低的可以选择悲观锁。<br>乐观锁实现原理<br>使用版本字段（version）<br>先给数据表增加一个版本(version) 字段，每操作一次，将那条记录的版本号加 1。version<br>是用来查看被读的记录有无变化，作用是防止记录在业务处理期间被其他事务修改。<br>使用时间戳（Timestamp）<br>与使用version版本字段相似，同样需要给在数据表增加一个字段，字段类型使用timestamp<br>时间戳。也是在更新提交的时候检查当前数据库中数据的时间戳和自己更新前取到的时间戳<br>进行对比，如果一致则提交更新，否则就是版本冲突，取消操作。<br>乐观锁案例<br>下面我们使用下单过程作为案例，描述下乐观锁的使用。<br>第一步：查询商品信息<br>第二部：根据商品信息生成订单<br>第三部：修改商品库存<br>除了自己手动实现乐观锁之外，许多数据库访问框架也封装了乐观锁的实现，比如<br>hibernate框架。MyBatis框架大家可以使用OptimisticLocker插件来扩展。<br>4.5 死锁与解决方案<br>下面介绍几种常见的死锁现象和解决方案：<br>一、表锁死锁<br>产生原因：<br>select (quantity,version) from products where id=1; insert into orders … insert into items … update products set quantity=quantity-1,version=version+1 where id=1 and version=#{version};<br>用户A访问表A（锁住了表A），然后又访问表B；另一个用户B访问表B（锁住了表B），然后企图<br>访问表A；这时用户A由于用户B已经锁住表B，它必须等待用户B释放表B才能继续，同样用户B要<br>等用户A释放表A才能继续，这就死锁就产生了。<br>用户A–》A表（表锁）–》B表（表锁）<br>用户B–》B表（表锁）–》A表（表锁）<br>解决方案：<br>这种死锁比较常见，是由于程序的BUG产生的，除了调整的程序的逻辑没有其它的办法。仔细分<br>析程序的逻辑，对于数据库的多表操作时，尽量按照相同的顺序进行处理，尽量避免同时锁定两个<br>资源，如操作A和B两张表时，总是按先A后B的顺序处理， 必须同时锁定两个资源时，要保证在任<br>何时刻都应该按照相同的顺序来锁定资源。<br>二、行级锁死锁<br>产生原因1：<br>如果在事务中执行了一条没有索引条件的查询，引发全表扫描，把行级锁上升为全表记录锁定（等<br>价于表级锁），多个这样的事务执行后，就很容易产生死锁和阻塞，最终应用系统会越来越慢，发<br>生阻塞或死锁。<br>解决方案1：<br>SQL语句中不要使用太复杂的关联多表的查询；使用explain“执行计划”对SQL语句进行分析，对于<br>有全表扫描和全表锁定的SQL语句，建立相应的索引进行优化。<br>产生原因2：<br>两个事务分别想拿到对方持有的锁，互相等待，于是产生死锁。<br>解决方案2：<br>在同一个事务中，尽可能做到一次锁定所需要的所有资源<br>按照id对资源排序，然后按顺序进行处理<br>三、共享锁转换为排他锁<br>产生原因：<br>事务A 查询一条纪录，然后更新该条纪录；此时事务B 也更新该条纪录，这时事务B 的排他锁由于<br>事务A 有共享锁，必须等A 释放共享锁后才可以获取，只能排队等待。事务A 再执行更新操作时，<br>此处发生死锁，因为事务A 需要排他锁来做更新操作。但是，无法授予该锁请求，因为事务B 已经<br>有一个排他锁请求，并且正在等待事务A 释放其共享锁。<br>事务A: select * from dept where deptno=1 lock in share mode; //共享锁,1<br>update dept set dname=’java’ where deptno=1;//排他锁,3<br>事务B: update dept set dname=’Java’ where deptno=1;//由于1有共享锁，没法获取排他锁，需<br>等待，2<br>解决方案：<br>对于按钮等控件，点击立刻失效，不让用户重复点击，避免引发同时对同一条记录多次操<br>作；<br>使用乐观锁进行控制。乐观锁机制避免了长事务中的数据库加锁开销，大大提升了大并发量<br>下的系统性能。需要注意的是，由于乐观锁机制是在我们的系统中实现，来自外部系统的用<br>户更新操作不受我们系统的控制，因此可能会造成脏数据被更新到数据库中；<br>四、死锁排查<br>MySQL提供了几个与锁有关的参数和命令，可以辅助我们优化锁操作，减少死锁发生。<br>查看死锁日志<br>通过show engine innodb status\G命令查看近期死锁日志信息。<br>使用方法：1、查看近期死锁日志信息；2、使用explain查看下SQL执行计划<br>查看锁状态变量<br>通过show status like’innodb_row_lock%‘命令检查状态变量，分析系统中的行锁的争夺<br>情况<br>Innodb_row_lock_current_waits：当前正在等待锁的数量<br>Innodb_row_lock_time：从系统启动到现在锁定总时间长度<br>Innodb_row_lock_time_avg： 每次等待锁的平均时间<br>Innodb_row_lock_time_max：从系统启动到现在等待最长的一次锁的时间<br>Innodb_row_lock_waits：系统启动后到现在总共等待的次数<br>如果等待次数高，而且每次等待时间长，需要分析系统中为什么会有如此多的等待，然后着<br>手定制优化</p><p>除了自己手动实现乐观锁之外，许多数据库访问框架也封装了乐观锁的实现，比如<br>hibernate框架。MyBatis框架大家可以使用OptimisticLocker插件来扩展。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我坚信，机会永远属于有准备的人，我们与其羡慕他人的成功，不如从此刻起，积累足够多的知识和面试经验，为将来进入更好的公司做充足的准备&lt;br&gt;本片文章将会根据资料学习深入Mysql的设计与优化&lt;br&gt;1、Mysql基础知识&lt;/p&gt;
&lt;p&gt;2、Mysql架构原理和存储机制&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="Mysql" scheme="https://zkkget.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>主站博客迁移之线上对事务的处理</title>
    <link href="https://zkkget.github.io/2022/07/25/%E4%B8%BB%E7%AB%99%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%B9%8B%E7%BA%BF%E4%B8%8A%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <id>https://zkkget.github.io/2022/07/25/%E4%B8%BB%E7%AB%99%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%B9%8B%E7%BA%BF%E4%B8%8A%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%A4%84%E7%90%86/</id>
    <published>2022-07-25T08:15:07.000Z</published>
    <updated>2022-07-25T08:17:19.220Z</updated>
    
    <content type="html"><![CDATA[<p>事务是我们平时项目中对数据操作最为直接、常用的方式，现在无论是大小公司都离不开对事务的操作，伴随业务的提升，客户量的积累也大大增加了对事务管理的难度。<br>在本章节中将会讲到如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、线上环境对roll back only 的处理</span><br><span class="line"></span><br><span class="line">2、线上环境对嵌套事务的解决方案</span><br><span class="line"></span><br><span class="line">3、11个demo分析事务失效的场景</span><br><span class="line"></span><br><span class="line">4、分布式事务</span><br><span class="line"></span><br><span class="line">5、事务也能异步</span><br></pre></td></tr></table></figure><p>1、线上环境对roll back only 的处理与产生</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.dao.CannotAcquireLockException: </span><br><span class="line">### Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MySQLTransactionRollbackException: Lock wait timeout exceeded; <span class="keyword">try</span> restarting transaction</span><br><span class="line">### The error may involve xxxMapper.insert-Inline</span><br><span class="line">### The error occurred <span class="keyword">while</span> setting parameters</span><br><span class="line">### SQL: INSERT INTO xxx</span><br><span class="line">### Cause: com.mysql.cj.jdbc.exceptions.MySQLTransactionRollbackException: Lock wait timeout exceeded; <span class="keyword">try</span> restarting transaction</span><br><span class="line">; Lock wait timeout exceeded; <span class="keyword">try</span> restarting transaction; nested exception is com.mysql.cj.jdbc.exceptions.MySQLTransactionRollbackException: Lock wait timeout exceeded; <span class="keyword">try</span> restarting transaction</span><br></pre></td></tr></table></figure><p>产生原因：<br>事务嵌套，内层事务将异常捕获未抛出。</p><p>2、线上环境对嵌套事务的解决方案<br>优化点可以从以下几点进行考虑：<br>最为直接的方法便是去掉嵌套事务，在controller层统一决定异常处理<br>对于类似开发过程中，需考虑将相关方法长事务中查询方法剔除，将方法内事务缩短为最小事务<br>出现突发情况，应提供最为简单有效的方案，让业务正常操作，不受影响<br>开发应对当时的技术方案告知相关测试<br>在代码层面,后续代码需要前面操作事务释放锁<br>无需等待插入结果   直接插入后续数据<br>将查询放在事务外面尽量将大事务变为小事务<br>捕获异常  自动重试<br>但是短时间内我还没有时间进行整改，在不影响主流程的情况下未进行整改，但我后续才知道大错特错。<br>排查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@timestamp</span> September 1st <span class="number">2021</span>, <span class="number">10</span>:<span class="number">20</span>:<span class="number">24.637</span></span><br><span class="line"># <span class="meta">@version</span>  <span class="number">1</span></span><br><span class="line">t LOG_DATEFORMAT_PATTERN    yyyy-MM-dd HH:mm:ss.SSS</span><br><span class="line">t LOG_LEVEL_PATTERN %5p</span><br><span class="line">t _id   VMaG</span><br><span class="line">t _index    applog-<span class="number">2021.09</span><span class="number">.01</span></span><br><span class="line"># _score    <span class="number">1</span></span><br><span class="line">t _type doc</span><br><span class="line">t appindex  applog</span><br><span class="line">t appname   app</span><br><span class="line">t host  <span class="number">10.0</span><span class="number">.74</span><span class="number">.157</span></span><br><span class="line">t level ERROR</span><br><span class="line"># level_value   <span class="number">40</span>,<span class="number">000</span></span><br><span class="line">t logger_name   ExceptionLogCollector</span><br><span class="line">t message   未知异常[<span class="number">500</span>] =&gt; Transaction rolled back because it has been marked as rollback-only</span><br><span class="line"># port  <span class="number">10</span>,<span class="number">792</span></span><br><span class="line">t stack_trace   org.springframework.transaction.UnexpectedRollbackException: Transaction rolled back because it has been marked as rollback-only</span><br><span class="line">at org.springframework.transaction.support.AbstractPlatformTransactionManager.processRollback(AbstractPlatformTransactionManager.java:<span class="number">873</span>) ~[spring-tx-<span class="number">5.1</span><span class="number">.4</span>.RELEASE.jar!/:<span class="number">5.1</span><span class="number">.4</span>.RELEASE]</span><br><span class="line">at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:<span class="number">710</span>) ~[spring-tx-<span class="number">5.1</span><span class="number">.4</span>.RELEASE.jar!/:<span class="number">5.1</span><span class="number">.4</span>.RELEASE]</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:<span class="number">533</span>) ~[spring-tx-<span class="number">5.1</span><span class="number">.4</span>.RELEASE.jar!/:<span class="number">5.1</span><span class="number">.4</span>.RELEASE]</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:<span class="number">304</span>) ~[spring-tx-<span class="number">5.1</span><span class="number">.4</span>.RELEASE.jar!/:<span class="number">5.1</span><span class="number">.4</span>.RELEASE]</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:<span class="number">98</span>) ~[spring-tx-<span class="number">5.1</span><span class="number">.4</span>.RELEASE.jar!/:<span class="number">5.1</span><span class="number">.4</span>.RELEASE]</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:<span class="number">186</span>) ~[spring-aop-<span class="number">5.1</span><span class="number">.4</span>.RELEASE.jar!/:<span class="number">5.1</span><span class="number">.4</span>.RELEASE]</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:<span class="number">688</span>) ~[spring-aop-<span class="number">5.1</span><span class="number">.4</span>.RELEASE.jar!/:<span class="number">5.1</span><span class="number">.4</span>.RELEASE]</span><br><span class="line">spring-tx-<span class="number">5.1</span><span class="number">.4</span>.RELEASE.jar-</span><br><span class="line">org.springframework.transaction.interceptor.TransactionInterceptor#事务拦截器</span><br><span class="line">avatar</span><br></pre></td></tr></table></figure><p>spring事务分为声明式事务和编程式事务，若目标方法存在事务，spring会对bean生成一个代理对象，从日志来看是cglib的<br>入口98行springaop事务增强 TransactionAspectSupport在事务中的调用，执行代理类的目标方法触发invoke</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">invokeWithinTransaction</span><span class="params">(Method method, <span class="meta">@Nullable</span> Class&lt;?&gt; targetClass,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">final</span> InvocationCallback invocation)</span> <span class="keyword">throws</span> Throwable</span></span><br><span class="line"><span class="function">方法为<span class="keyword">protected</span>的，根据源代码注释解析</span></span><br></pre></td></tr></table></figure><p>if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager))<br>如果事务属性为null 且事务类型是CallbackPreferringPlatformTransactionManager进入304行commitTransactionAfterReturning(txInfo);方法<br>意为事务成功后执行，有异常不执行，没有事务不执行，也就是为后面的事务方法异常时没执行进行了铺垫，533行<br>txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());事务进行commit时进行判断<br>如果不是进行全局事务提交 但是是RollbackOnly的话<br>走processRollback处理实际回滚</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (status.isCompleted()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(</span><br><span class="line">                    <span class="string">&quot;Transaction is already completed - do not call commit or rollback more than once per transaction&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status;</span><br><span class="line">        <span class="keyword">if</span> (defStatus.isLocalRollbackOnly()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (defStatus.isDebug()) &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;Transactional code has requested rollback&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            processRollback(defStatus, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!shouldCommitOnGlobalRollbackOnly() &amp;&amp; defStatus.isGlobalRollbackOnly()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (defStatus.isDebug()) &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;Global transaction is marked as rollback-only but transactional code requested commit&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            日志追踪的<span class="number">710</span>行-----记住此处传<span class="function"><span class="keyword">true</span></span></span><br><span class="line"><span class="function">            <span class="title">processRollback</span><span class="params">(defStatus, <span class="keyword">true</span>)</span></span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        processCommit(defStatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processRollback</span><span class="params">(DefaultTransactionStatus status, <span class="keyword">boolean</span> unexpected)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            入参为<span class="keyword">true</span></span><br><span class="line">            <span class="keyword">boolean</span> unexpectedRollback = unexpected;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                triggerBeforeCompletion(status);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (status.hasSavepoint()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">                        logger.debug(<span class="string">&quot;Rolling back transaction to savepoint&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    status.rollbackToHeldSavepoint();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (status.isNewTransaction()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">                        logger.debug(<span class="string">&quot;Initiating transaction rollback&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    doRollback(status);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// Participating in larger transaction</span></span><br><span class="line">                    <span class="keyword">if</span> (status.hasTransaction()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (status.isLocalRollbackOnly() || isGlobalRollbackOnParticipationFailure()) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">                                logger.debug(<span class="string">&quot;Participating transaction failed - marking existing transaction as rollback-only&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            doSetRollbackOnly(status);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">                                logger.debug(<span class="string">&quot;Participating transaction failed - letting transaction originator decide on rollback&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        logger.debug(<span class="string">&quot;Should roll back transaction but cannot - no transaction available&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// Unexpected rollback only matters here if we&#x27;re asked to fail early</span></span><br><span class="line">                    <span class="keyword">if</span> (!isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class="line">                        unexpectedRollback = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (RuntimeException | Error ex) &#123;</span><br><span class="line">                triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);</span><br><span class="line">            日志追踪的<span class="number">873</span>行  抛出异常</span><br><span class="line">            <span class="comment">// Raise UnexpectedRollbackException if we had a global rollback-only marker</span></span><br><span class="line">            <span class="keyword">if</span> (unexpectedRollback) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnexpectedRollbackException(</span><br><span class="line">                        <span class="string">&quot;Transaction rolled back because it has been marked as rollback-only&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            cleanupAfterCompletion(status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>事务这里场景和传播行为相关知识点太多了，这个后续接着分析<br>但就此场景将伪代码贴一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        methodA()</span><br><span class="line">    &#125;<span class="keyword">catch</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        methodB()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            methodC()</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    methodC() &#123;</span><br><span class="line">        当C方法抛出异常时</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>不知道大家对于rpc行为调用的接口是如何处理的，我们以前是将rpc调用的接口有Biz接收进来，进行参数处理，领域模型转换后，调取service进行内部数据处理的，但此时的接口在主流程上会伴随着另一个第三方接口的写操作，需进行事务处理，那么内层service接口为什么还要进行事务管理？在设计上理应不对rpc接口操作的service进行开放调用的，但业务上区分不同场景，不同供应商，不同酒店等对接口进行了反射调用，或者app调用，导致内层service也进行了事务操作，那么问题来了，嵌套事务时，如果内层事务注解取消不抛出<br>UnexpectedRollbackException，实际此方法内并没有完全执行完，<br>我希望是怎样的？我希望在保持事务原子性的前提，内层事务回滚则整个全局事务回滚，且不报此异常<br>第一种方法isGlobalRollbackOnParticipationFailure方法，让主事务来决定是否回滚，</p><p>改动成本大<br>而在Springaop中，被拦截的方法需要显式的抛出异常，并不能经过任何处理，这样aop才能进行回滚，默认aop是只catchruntimeException的异常 第二种方法可以在catch块里加上 TransactionAspectSupport.currentTransactionStatus().setRollbackOnly() 手动回滚 即便上层事务发生了异常，也想要最终提交整个事务呢？如果有这样的需求的话，可以给事务管理器配置一个参数 setGlobalRollbackOnParticipationFailure(false); # 改动成本大<br>解决方案：在内层方法中不进行方法的try catch，有异常操作时在外层事务进行处理，且可决定是否回滚，特定的异常也再次处理</p><p>回顾：事务的失效场景(事务不生效和事务不回滚)</p><p>3、11个demo分析事务失效的场景</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Service</span><br><span class="line">public class DemoService &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private Test1Mapper test1Mapper;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private TestMapper testMapper;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private InvalidTransactionService invalidTransactionService;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private ExecutorService executorService;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private DemoService _self;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private ValidTransactionService validTransactionService;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private RequireNewTransactionService requireNewTransactionService;</span><br><span class="line"></span><br><span class="line">/********************************************************</span><br><span class="line"> * 事务不生效场景1</span><br><span class="line"> * 相当于调用this调用，没有产生代理对象调用，解决方法，自己把自己注入以后调用</span><br><span class="line"> ********************************************************/</span><br><span class="line">public void demo1() &#123;</span><br><span class="line"></span><br><span class="line">invalidTransaction();</span><br><span class="line"></span><br><span class="line">//TODO other logic code here</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Transactional</span><br><span class="line">public void invalidTransaction() &#123;</span><br><span class="line">TestDO test = new TestDO();</span><br><span class="line">test.setName(&quot;11111&quot;);</span><br><span class="line">testMapper.insert(test);</span><br><span class="line"></span><br><span class="line">Test1DO test1 = new Test1DO();</span><br><span class="line">test1.setCust(&quot;2222&quot;);</span><br><span class="line">test1Mapper.insert(test1);</span><br><span class="line">throw new WMSException(ErrorCodeEnum.BD10001001.code(),&quot;事务不生效场景1&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/********************************************************</span><br><span class="line"> * 事务不生效场景二</span><br><span class="line"> * 这个例子的目的是为了catch住内层事务的异常，让外层事务成功，但是实际上没有内外层事务都回滚了</span><br><span class="line"> *</span><br><span class="line"> * 这里A和B都受事务控制，并且是处于同一个事务的。</span><br><span class="line"> * A调用B，A中抓了B的异常，当B发生异常的时候，B的操作应该回滚，但是A吃了异常，A方法中没有产生异常，所以A的操作又应该提交，二者是相互矛盾的。</span><br><span class="line"> * spring的事务关联拦截器在抓到B的异常后就会标记rollback-only为true，当A执行完准备提交后，发现rollback-only为true，也会回滚，并抛出异常告诉调用者。</span><br><span class="line"> *</span><br><span class="line"> * 报错提示：Transaction rolled back because it has been marked as rollback-only</span><br><span class="line"> *</span><br><span class="line"> * 如果想使外层事务生效可以把内层事务传播特性修改为：@Transactional(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line"> * </span><br><span class="line"> ********************************************************/</span><br><span class="line">@Transactional</span><br><span class="line">public void demo2() &#123;</span><br><span class="line">TestDO test = new TestDO();</span><br><span class="line">test.setName(&quot;3333&quot;);</span><br><span class="line">testMapper.insert(test);</span><br><span class="line">try &#123;</span><br><span class="line">invalidTransactionService.transaction();</span><br><span class="line">&#125;catch (Exception e) &#123;</span><br><span class="line">log.error(&quot;服务异常，异常被捕获&quot;, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/********************************************************</span><br><span class="line"> * 事务不生效场景三</span><br><span class="line"> *</span><br><span class="line"> * 因为开了线程异步执行，等于事务完全在两个线程内，不在一个线程，所以即使抛错，也是一个生效一个不生效，</span><br><span class="line"> * 事务没有回滚</span><br><span class="line"> * </span><br><span class="line"> ********************************************************/</span><br><span class="line">@Transactional</span><br><span class="line">public void demo3() &#123;</span><br><span class="line">TestDO test = new TestDO();</span><br><span class="line">test.setName(&quot;5555&quot;);</span><br><span class="line">testMapper.insert(test);</span><br><span class="line"></span><br><span class="line">executorService.execute(() -&gt; &#123;</span><br><span class="line">Test1DO test1 = new Test1DO();</span><br><span class="line">test1.setCust(&quot;6666&quot;);</span><br><span class="line">test1Mapper.insert(test1);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">throw new WMSException(ErrorCodeEnum.BD10001001.code(),&quot;事务不生效场景3&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/********************************************************</span><br><span class="line"> * 事务不生效场景八</span><br><span class="line"> * Spring默认情况下会对运行期例外(RunTimeException)进行事务回滚。这个例外是unchecked，如果遇到checked意外就不回滚。</span><br><span class="line"> * Exception包含RuntimeException体系和其他非RuntimeException的体系</span><br><span class="line"> * Error和RuntimeException及其子类成为未检查异常（unchecked），其它异常成为已检查异常（checked）。</span><br><span class="line"> * spring声明式事务管理默认对非检查型异常和运行时异常进行事务回滚，而对检查型异常则不进行回滚操作</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *那么什么是检查型异常什么又是非检查型异常呢？</span><br><span class="line"> * 1.继承自runtimeexception或error的是非检查型异常，而继承自exception的则是检查型异常（当然，runtimeexception本身也是exception的子类）。</span><br><span class="line"> * 2.对非检查型类异常可以不用捕获，而检查型异常则必须用try语句块进行处理或者把异常交给上级方法处理总之就是必须写代码处理它。所以必须在service捕获异常，然后再次抛出，这样事务方才起效。</span><br><span class="line"> *</span><br><span class="line"> * @throws IOException </span><br><span class="line"> * </span><br><span class="line"> ********************************************************/</span><br><span class="line">@Transactional</span><br><span class="line">public void demo8() throws IOException &#123;</span><br><span class="line">TestDO test = new TestDO();</span><br><span class="line">test.setName(&quot;11111&quot;);</span><br><span class="line">testMapper.insert(test);</span><br><span class="line"></span><br><span class="line">Test1DO test1 = new Test1DO();</span><br><span class="line">test1.setCust(&quot;2222&quot;);</span><br><span class="line">test1Mapper.insert(test1);</span><br><span class="line">throw new IOException(&quot;事务不生效场景8&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/********************************************************</span><br><span class="line"> * 事务不生效场景九</span><br><span class="line"> * @throws IOException </span><br><span class="line"> * </span><br><span class="line"> ********************************************************/</span><br><span class="line"></span><br><span class="line">public void demo9()&#123;</span><br><span class="line">invalidTransaction2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Transactional</span><br><span class="line">private void invalidTransaction2() &#123;</span><br><span class="line">TestDO test = new TestDO();</span><br><span class="line">test.setName(&quot;11111&quot;);</span><br><span class="line">testMapper.insert(test);</span><br><span class="line"></span><br><span class="line">Test1DO test1 = new Test1DO();</span><br><span class="line">test1.setCust(&quot;2222&quot;);</span><br><span class="line">test1Mapper.insert(test1);</span><br><span class="line">throw new WMSException(&quot;事务不生效场景9&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/********************************************************</span><br><span class="line"> * 事务生效场景1</span><br><span class="line"> * </span><br><span class="line"> ********************************************************/</span><br><span class="line">public void demo4() &#123;</span><br><span class="line"></span><br><span class="line">_self.invalidTransaction();</span><br><span class="line"></span><br><span class="line">//TODO other logic code here</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/********************************************************</span><br><span class="line"> * 事务生效场景二</span><br><span class="line"> *</span><br><span class="line"> * 因为内层没有事务控制，所以内层报错，不会混回滚，同样外层catch住，所以外层业务成功</span><br><span class="line"> ********************************************************/</span><br><span class="line">@Transactional</span><br><span class="line">public void demo5() &#123;</span><br><span class="line">TestDO test = new TestDO();</span><br><span class="line">test.setName(&quot;7777&quot;);</span><br><span class="line">testMapper.insert(test);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">validTransactionService.transaction();</span><br><span class="line">&#125;catch (Exception e) &#123;</span><br><span class="line">log.error(&quot;服务异常，异常被捕获&quot;, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/********************************************************</span><br><span class="line"> * 事务生效场景三</span><br><span class="line"> *</span><br><span class="line"> *内层事务配置的是REQUIRES_NEW，表示自己用自己的，不和外层有牵连，内层如果报错，事务会回滚</span><br><span class="line"> * 外层如果catch住了，就可以正常执行，外层生效，内层回滚</span><br><span class="line"> ********************************************************/</span><br><span class="line">@Transactional</span><br><span class="line">public void demo6() &#123;</span><br><span class="line">TestDO test = new TestDO();</span><br><span class="line">test.setName(&quot;9999&quot;);</span><br><span class="line">testMapper.insert(test);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">requireNewTransactionService.transactionWithException();</span><br><span class="line">&#125;catch (Exception e) &#123;</span><br><span class="line">log.error(&quot;服务异常，异常被捕获&quot;, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/********************************************************</span><br><span class="line"> * 独立事务</span><br><span class="line"> * 内外层事务独立，内层操作未报错，事务正常执行，外层有错，事务回滚。</span><br><span class="line"> ********************************************************/</span><br><span class="line">@Transactional</span><br><span class="line">public void demo7() &#123;</span><br><span class="line">TestDO test = new TestDO();</span><br><span class="line">test.setName(&quot;9999&quot;);</span><br><span class="line">testMapper.insert(test);</span><br><span class="line"></span><br><span class="line">requireNewTransactionService.transaction();</span><br><span class="line">throw new WMSException(ErrorCodeEnum.BD10001001.code(),&quot;独立事务&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、分布式事务以及分布式事务嵌套<br>一次业务操作需要跨多个数据源或需要垮多个系统进行远程调用,就会产生分布式事务问题<br>全局事务一致性问题<br>全局事务id+三组件 tc+tm+rm<br>Seata（AT 模式）的默认全局隔离级别是 读未提交（Read Uncommitted）</p><p>Seata 是 Simple Extensible Autonomous Transaction Architecture 的简写，由 feascar 改名而来。<br>AT模式 默认<br>TCC模式<br>XA模式<br>SAGA模式 长事务解决方案</p><p>XID 由ip 端口号 加全局事务id生成</p><p>关于分布式事务，工程领域主要讨论的是强一致性和最终一致性的解决方案。典型方案包括：<br>两阶段提交（2PC, Two-phase Commit）方案<br>eBay 事件队列方案<br>TCC 补偿模式<br>缓存数据最终一致性</p><p>一致性理论<br>分布式事务的目的是保障分库数据一致性，而跨库事务会遇到各种不可控制的问题，如个别节点永久性宕机，像单机事务一样的ACID是无法奢望的。另外，业界著名的CAP理论也告诉我们，对分布式系统，需要将数据一致性和系统可用性、分区容忍性放在天平上一起考虑。<br>两阶段提交协议（简称2PC）是实现分布式事务较为经典的方案，但2PC 的可扩展性很差，在分布式架构下应用代价较大，eBay 架构师Dan Pritchett 提出了BASE 理论，用于解决大规模分布式系统下的数据一致性问题。BASE 理论告诉我们：可以通过放弃系统在每个时刻的强一致性来换取系统的可扩展性。<br>CAP理论在分布式系统中，一致性（Consistency）、可用性（Availability）和分区容忍性（Partition Tolerance）3 个要素最多只能同时满足两个，不可兼得。<br>其中，分区容忍性又是不可或缺的。<br>avatar<br>一致性：分布式环境下多个节点的数据是否强一致。可用性：分布式服务能一直保证可用状态。当用户发出一个请求后，服务能在有限时间内返回结果。分区容忍性：特指对网络分区的容忍性。举例：Cassandra、Dynamo<br>等，默认优先选择AP，弱化C；HBase、MongoDB 等，默认优先选择CP，弱化A。<br>BASE理论核心思想：<br>基本可用（BasicallyAvailable）：指分布式系统在出现故障时，允许损失部分的可用性来保证核心可用。<br>软状态（SoftState）：指允许分布式系统存在中间状态，该中间状态不会影响到系统的整体可用性。<br>最终一致性（EventualConsistency）：指分布式系统中的所有副本数据经过一定时间后，最终能够达到一致的状态。<br>2. 一致性模型<br>数据的一致性模型可以分成以下 3 类：<br>强一致性：数据更新成功后，任意时刻所有副本中的数据都是一致的，一般采用同步的方式实现。 弱一致性：数据更新成功后，系统不承诺立即可以读到最新写入的值，也不承诺具体多久之后可以读到。 最终一致性：弱一致性的一种形式，数据更新成功后，系统不承诺立即可以返回最新写入的值，但是保证最终会返回上一次更新操作的值。 分布式系统数据的强一致性、弱一致性和最终一致性可以通过Quorum NRW算法分析。<br>3. 分布式事务解决方案<br>2PC方案——强一致性<br>2PC的核心原理是通过提交分阶段和记日志的方式，记录下事务提交所处的阶段状态，在组件宕机重启后，可通过日志恢复事务提交的阶段状态，并在这个状态节点重试，如Coordinator重启后，通过日志可以确定提交处于Prepare还是PrepareAll状态，若是前者，说明有节点可能没有Prepare成功，或所有节点Prepare成功但还没有下发Commit，状态恢复后给所有节点下发RollBack；若是PrepareAll状态，需要给所有节点下发Commit，数据库节点需要保证Commit幂等。<br>avatar<br>2PC方案的问题：同步阻塞。数据不一致。单点问题。升级的3PC方案旨在解决这些问题，主要有两个改进：增加超时机制。两阶段之间插入准备阶段。但三阶段提交也存在一些缺陷，要彻底从协议层面避免数据不一致，可以采用Paxos或者Raft算法。<br>eBay 事件队列方案——最终一致性<br>eBay 的架构师Dan Pritchett，曾在一篇解释BASE 原理的论文《Base：An Acid<br>Alternative》中提到一个eBay<br>分布式系统一致性问题的解决方案。它的核心思想是将需要分布式处理的任务通过消息或者日志的方式来异步执行，消息或日志可以存到本地文件、数据库或消息队列，再通过业务规则进行失败重试，它要求各服务的接口是幂等的。描述的场景为，有用户表user<br>和交易表transaction，用户表存储用户信息、总销售额和总购买额，交易表存储每一笔交易的流水号、买家信息、卖家信息和交易金额。如果产生了一笔交易，需要在交易表增加记录，同时还要修改用户表的金额。<br>avatar<br>论文中提出的解决方法是将更新交易表记录和用户表更新消息放在一个本地事务来完成，为了避免重复消费用户表更新消息带来的问题，增加一个操作记录表updates_applied来记录已经完成的交易相关的信息。</p><p>这个方案的核心在于第二阶段的重试和幂等执行。失败后重试，这是一种补偿机制，它是能保证系统最终一致的关键流程。<br>TCC （Try-Confirm-Cancel）补偿模式——最终一致性<br>某业务模型如图，由服务 A、服务B、服务C、服务D 共同组成的一个微服务架构系统。服务A 需要依次调用服务B、服务C 和服务D<br>共同完成一个操作。当服务A 调用服务D 失败时，若要保证整个系统数据的一致性，就要对服务B 和服务C 的invoke<br>操作进行回滚，执行反向的revert 操作。回滚成功后，整个微服务系统是数据一致的。<br>avatar<br>实现关键要素：服务调用链必须被记录下来。每个服务提供者都需要提供一组业务逻辑相反的操作，互为补偿，同时回滚操作要保证幂等。必须按失败原因执行不同的回滚策略。<br>缓存数据最终一致性<br>在我们的业务系统中，缓存（Redis 或者Memcached）通常被用在数据库前面，作为数据读取的缓冲，使得I/O<br>操作不至于直接落在数据库上。以商品详情页为例，假如卖家修改了商品信息，并写回到数据库，但是这时候用户从商品详情页看到的信息还是从缓存中拿到的过时数据，这就出现了缓存系统和数据库系统中的数据不一致的现象。<br>要解决该场景下缓存和数据库数据不一致的问题我们有以下两种解决方案：为缓存数据设置过期时间。当缓存中数据过期后，业务系统会从数据库中获取数据，并将新值放入缓存。这个过期时间就是系统可以达到最终一致的容忍时间。更新数据库数据后同时清除缓存数据。数据库数据更新后，同步删除缓存中数据，使得下次对商品详情的获取直接从数据库中获取，并同步到缓存。<br>常用组件： Seata，Sega，Atomikos<br>avatar<br>TC (Transaction Coordinator) - 事务协调者<br>维护全局和分支事务的状态，驱动全局事务提交或回滚。<br>TM (Transaction Manager) - 事务管理器<br>定义全局事务的范围：开始全局事务、提交或回滚全局事务。<br>RM (Resource Manager) - 资源管理器<br>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。<br>avatar<br>安装<br>关键注解全局@GlobalTranstional<br>1.更改事务组名称service<br>2.store更改mode 修改db<br>3.执行sql<br>4.修改注册进nacos<br>5.启动seata-server.bat<br>如何保证分布唯一全局id的生成</p><p>5、分布式事务异步方案<br>看下分布式事务的异步问题，根据事务的xid搭配future在切面里对注解进行处理，实现异步+分布式事务的并存<br>注意事项<br>这个依赖只是用来解决部分问题，不是解决全部问题<br>这个仅用于TM端，不要用来RM端(其实要实现RM端的话，可以仿照SeataAsyncAspect，写一个aspect，很简单的)<br>不要进行事务嵌套，不支持事务嵌套！！！<br>确保异步的多个操作之间是没有先后顺序的<br>这个是一个私人包装处理，仅供参考，还未应用到生产环境<br>—-待续</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;事务是我们平时项目中对数据操作最为直接、常用的方式，现在无论是大小公司都离不开对事务的操作，伴随业务的提升，客户量的积累也大大增加了对事务管理的难度。&lt;br&gt;在本章节中将会讲到如下内容：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;ta</summary>
      
    
    
    
    
    <category term="事务" scheme="https://zkkget.github.io/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>【声明】阿里云服务器导致图片不显示[可在此贴下方留言]</title>
    <link href="https://zkkget.github.io/2022/07/25/%E3%80%90%E5%A3%B0%E6%98%8E%E3%80%91%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AF%BC%E8%87%B4%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA-%E5%8F%AF%E5%9C%A8%E6%AD%A4%E8%B4%B4%E4%B8%8B%E6%96%B9%E7%95%99%E8%A8%80/"/>
    <id>https://zkkget.github.io/2022/07/25/%E3%80%90%E5%A3%B0%E6%98%8E%E3%80%91%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AF%BC%E8%87%B4%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA-%E5%8F%AF%E5%9C%A8%E6%AD%A4%E8%B4%B4%E4%B8%8B%E6%96%B9%E7%95%99%E8%A8%80/</id>
    <published>2022-07-25T08:10:26.000Z</published>
    <updated>2022-07-25T08:11:46.075Z</updated>
    
    <content type="html"><![CDATA[<p>1.图片服务器原因不定期修复…紧急修复中….<br>2.重要重要【图片不显示，请更换为火狐浏览器打开！！！或者手机在微信中打开也可食用】,放大图片更清晰<br>3.服务器内存过小,2020年10月13日后续部分内容将图片转至腾讯云<br>4.2d妹子会叫,有问题请留言</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.图片服务器原因不定期修复…紧急修复中….&lt;br&gt;2.重要重要【图片不显示，请更换为火狐浏览器打开！！！或者手机在微信中打开也可食用】,放大图片更清晰&lt;br&gt;3.服务器内存过小,2020年10月13日后续部分内容将图片转至腾讯云&lt;br&gt;4.2d妹子会叫,有问题请留言&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>主站博客迁移之字节跳动面经个人搜索答案</title>
    <link href="https://zkkget.github.io/2022/07/25/%E4%B8%BB%E7%AB%99%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%B9%8B%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%A2%E7%BB%8F%E4%B8%AA%E4%BA%BA%E6%90%9C%E7%B4%A2%E7%AD%94%E6%A1%88/"/>
    <id>https://zkkget.github.io/2022/07/25/%E4%B8%BB%E7%AB%99%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%B9%8B%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%A2%E7%BB%8F%E4%B8%AA%E4%BA%BA%E6%90%9C%E7%B4%A2%E7%AD%94%E6%A1%88/</id>
    <published>2022-07-25T07:47:01.000Z</published>
    <updated>2022-07-25T08:00:44.434Z</updated>
    
    <content type="html"><![CDATA[<p>问题来源<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E5%AD%97%E8%8A%82%E9%9D%A2%E8%AF%95%E9%A2%98.jpg" alt="流程"></p><h1 id="1-线程池参数的含义？"><a href="#1-线程池参数的含义？" class="headerlink" title="1.线程池参数的含义？"></a>1.线程池参数的含义？</h1><p>int corePoolSize：常驻线程数<br>int maximumPoolSize：线程池同时执行的最大线程数，&gt;=1<br>long keepAliveTime:空闲线程的存活时间<br>TimeUnit unit：keepAliveTime的单位<br>BlockingQueueworkQueue：被提交等待被执行的任务<br>ThreadFactory threadFactory：工作线程的线程工厂<br>RejectedExecutionHandler handler：线程池拒绝策略</p><h1 id="2-线程池拒绝策略"><a href="#2-线程池拒绝策略" class="headerlink" title="2.线程池拒绝策略"></a>2.线程池拒绝策略</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">当线程池的任务缓存队列已满并且线程池中的线程数目达到maximumPoolSize时，</span><br><span class="line">如果还有任务到来就会采取任务拒绝策略，通常有以下四种策略：</span><br><span class="line">ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。</span><br><span class="line"></span><br><span class="line">ThreadPoolExecutor.DiscardPolicy：丢弃任务，但是不抛出异常。 </span><br><span class="line"></span><br><span class="line">ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新提交被拒绝的任务 </span><br><span class="line"></span><br><span class="line">ThreadPoolExecutor.CallerRunsPolicy：由调用线程（提交任务的线程）处理该任务</span><br></pre></td></tr></table></figure><h1 id="3-线程池大小与-CPU-处理器的利用率之比可以用下面公式估算"><a href="#3-线程池大小与-CPU-处理器的利用率之比可以用下面公式估算" class="headerlink" title="3.线程池大小与 CPU 处理器的利用率之比可以用下面公式估算"></a>3.线程池大小与 CPU 处理器的利用率之比可以用下面公式估算</h1><p>CPU密集型多为cpu运算频繁的：设置CPU核数+1<br>IO密集型：设置cpu核数*10</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Support class for thread pool size</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nadeem Mohammad</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ThreadPoolUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Each tasks blocks 90% of the time, and works only 10% of its</span></span><br><span class="line"><span class="comment"> *lifetime. That is, I/O intensive pool</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> io intesive Thread pool size</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ioIntesivePoolSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> blockingCoefficient = <span class="number">0.9</span>;</span><br><span class="line"><span class="keyword">return</span> poolSize(blockingCoefficient);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Number of threads = Number of Available Cores / (1 - Blocking</span></span><br><span class="line"><span class="comment"> * Coefficient) where the blocking coefficient is between 0 and 1.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * A computation-intensive task has a blocking coefficient of 0, whereas an</span></span><br><span class="line"><span class="comment"> * IO-intensive task has a value close to 1,</span></span><br><span class="line"><span class="comment"> * so we don&#x27;t have to worry about the value reaching 1.</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@param</span> blockingCoefficient the coefficient</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@return</span> Thread pool size</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">poolSize</span><span class="params">(<span class="keyword">double</span> blockingCoefficient)</span> </span>&#123;</span><br><span class="line">           <span class="comment">//cpu核数</span></span><br><span class="line"><span class="keyword">int</span> numberOfCores = Runtime.getRuntime().availableProcessors();</span><br><span class="line">  </span><br><span class="line"><span class="keyword">int</span> poolSize = (<span class="keyword">int</span>) (numberOfCores / (<span class="number">1</span> - blockingCoefficient));</span><br><span class="line"><span class="keyword">return</span> poolSize;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-Redis的使用—分布式锁的实现"><a href="#4-Redis的使用—分布式锁的实现" class="headerlink" title="4.Redis的使用—分布式锁的实现"></a>4.Redis的使用—分布式锁的实现</h1><p>1.数据库乐观锁；<br>2.基于Redis的分布式锁；<br>3.基于ZooKeeper的分布式锁<br>4.redisson的红锁<br>一 基于数据库<br>a.数据库建一张表，字段方法名并且作为唯一性，当一个方法执行时插入，则相当于获得锁，其他线程将无法访问，方法执行完则释放锁。</p><p>但是上面这种存在问题：</p><p>1、数据库单点，出现故障则将导致系统不可用。</p><p>2、没有失效时间，一旦操作方法异常，导致一直没有解锁，也将导致其他不可用用。</p><p>b.使用select * from user u where username = ‘’ for update 来对记录加上排他锁。操作完成后使用commit命令释放锁。<br>二基于缓存 redis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_SUCCESS = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_IF_NOT_EXIST = <span class="string">&quot;NX&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_WITH_EXPIRE_TIME = <span class="string">&quot;PX&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取分布式锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis Redis客户端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey 锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId 请求标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTime 超期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否获取成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryGetDistributedLock</span><span class="params">(Jedis jedis, String lockKey, String requestId, <span class="keyword">int</span> expireTime)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String result = jedis.set(lockKey, requestId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (LOCK_SUCCESS.equals(result)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三基于zk<br>大致思路：每个客户端对某个方法加锁时，在zookeeper上的与该方法对应的指定节点的目录下，生成一个唯一的瞬时有序节点。 判断是否获取锁的方式很简单，只需要判断有序节点中序号最小的一个。 当释放锁的时候，只需将这个瞬时节点删除即可。同时，其可以避免服务宕机导致的锁无法释放，而产生的死锁问题。</p><p>ZK中创建和删除节点只能通过Leader服务器来执行，然后将数据同步到所有的Follower机器上，所以性能上不如基于缓存实现。<br>综合比较:1.3性能低，推荐redis<br>如果对数据有强一致性要求,不能放缓存</p><h1 id="5-TCP-三次握手和四次挥手"><a href="#5-TCP-三次握手和四次挥手" class="headerlink" title="5.TCP 三次握手和四次挥手"></a>5.TCP 三次握手和四次挥手</h1><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.jpg" alt="流程"></p><p>三次握手只是在建立连接。三次握手之后，才有资源的开辟。可以开始传输数据了。<br>C -&gt; S (syn, seq=j) C 说，我想连接<br>S -&gt; C (syn+ack, ack=j+1, syn=k) 发完之后，C 知道了 S 能收到自己的消息<br>C -&gt; S (ack, ack=k+1) 发完之后，S 知道了 C 能收到自己的消息（确认是双向的），这就是为什么需要第三次握手<br>三次握手之后，双方开辟资源，建立了 socket，实际应用时，第三次握手包和发送的数据包是粘连在一起的。</p><p>如果类比三次握手，在第二次挥手的时候同时发 FIN + ACK 明显不合理，因为被动方可能没有数据发送完，你这么关太草率了，所以需要四次。<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.jpg" alt="流程"><br>①客户端发送报文===&gt;<br>②服务端收到报文，结束监听，返回一段报文<br>③客户端确认收到TCP报文，并返回最后一段TCP报文<br>即SYN建立连接报文与ACK确认接收报文是在同一次”握手”当中传输的，所以”三次握手”不多也不少，正好让双方明确彼此信息互通<br>所谓的四次挥手即TCP连接的释放(解除)。连接的释放必须是一方主动释放，另一方被动释放<br>都是由客户端发起</p><h1 id="6-为什么四次分手之后，还会等两个传输时间，才会释放资源"><a href="#6-为什么四次分手之后，还会等两个传输时间，才会释放资源" class="headerlink" title="6.为什么四次分手之后，还会等两个传输时间，才会释放资源"></a>6.为什么四次分手之后，还会等两个传输时间，才会释放资源</h1><p>因为如果最后 C 端返回的 ACK 号丢失了，这时 S 端没有收到 ACK，会重发一遍 FIN，如果此时客户端的套接字已经被删除了，会发生什么呢？套接字被删除，端口被释放，这时别的应用可能创建新的套接字，恰好分配了同一个端口号，而服务器重发的 FIN 正好到达，这个 FIN 就会错误的跑到新的套接字里面，新的套接字就开始执行断开操作了。为了避免这样的误操作，C 端会等几分钟再删除套接字。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;问题来源&lt;br&gt;&lt;img src=&quot;https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E5%AD%97%E8%8A%82%E9%9D%A2%E8%AF%95%E9%A2%98.jpg&quot; alt=&quot;流程&quot;&gt;&lt;/p&gt;
&lt;h1</summary>
      
    
    
    
    
    <category term="面试,字节跳动" scheme="https://zkkget.github.io/tags/%E9%9D%A2%E8%AF%95-%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>主站博客迁移之Nginx安装与原理</title>
    <link href="https://zkkget.github.io/2022/07/25/%E4%B8%BB%E7%AB%99%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%B9%8BNginx%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8E%9F%E7%90%86/"/>
    <id>https://zkkget.github.io/2022/07/25/%E4%B8%BB%E7%AB%99%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%B9%8BNginx%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8E%9F%E7%90%86/</id>
    <published>2022-07-25T07:39:59.000Z</published>
    <updated>2022-07-25T07:41:06.698Z</updated>
    
    <content type="html"><![CDATA[<p>官网<a href="http://nginx.org/">http://nginx.org/</a><br>需要的素材</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pcre-<span class="number">8.37</span>.tar.gz</span><br><span class="line">openssl-<span class="number">1.0</span>.1t.tar.gz</span><br><span class="line">zlib-<span class="number">1.2</span><span class="number">.8</span>.tar.gz</span><br><span class="line">nginx-<span class="number">1.11</span><span class="number">.1</span>.tar.gz</span><br></pre></td></tr></table></figure><p>1.1.安装pcre<br>解压缩pcre-xx.tar.gz包<br>进入解压缩目录，执行./configure<br>如果提示，需要提前安装gcc++<br>进入安装光盘目录的软件包(/media/CentOSXX/Package)<br>执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh libstdc++-devel-<span class="number">4.4</span><span class="number">.7</span>-<span class="number">17.</span>el6.x86_64.rpm</span><br><span class="line">rpm -ivh gcc-c++-<span class="number">4.4</span><span class="number">.7</span>-<span class="number">17.</span>el6.x86_64.rpm</span><br></pre></td></tr></table></figure><p>./configure完成后，回到pcre目录下执行make，再执行make install<br>2. 安装openssl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、 解压缩openssl-xx.tar.gz包。</span><br><span class="line"><span class="number">2</span>、 进入解压缩目录，执行./config</span><br><span class="line"><span class="number">3</span>、 make &amp;&amp; make install</span><br><span class="line"><span class="number">3.</span> 安装zlib</span><br><span class="line"><span class="number">1</span>、 解压缩zlib-xx.tar.gz包。</span><br><span class="line"><span class="number">2</span>、 进入解压缩目录，执行./configure。</span><br><span class="line"><span class="number">3</span>、 make &amp;&amp; make install</span><br><span class="line"><span class="number">4.</span> 安装nginx</span><br><span class="line"><span class="number">1</span>、 解压缩nginx-xx.tar.gz包。</span><br><span class="line"><span class="number">2</span>、 进入解压缩目录，执行./configure。</span><br><span class="line"><span class="number">3</span>、 make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>nginx无法启动: libpcre.so.1/libpcre.so.0: cannot<br>open shared object file解决办法<br>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/lib/libpcre.so.1 /lib64</span><br><span class="line">32位系统则：</span><br><span class="line">ln -s /usr/local/lib/libpcre.so.1 /lib</span><br></pre></td></tr></table></figure><p>在/usr/local/nginx/sbin目录下<br>执行 ./nginx<br>启动命令 在/usr/local/nginx/sbin目录下<br>执行 ./nginx<br>关闭命令 在/usr/local/nginx/sbin目录下<br>执行 ./nginx -s stop<br>重新加载命令 在/usr/local/nginx/sbin目录下<br>执行 ./nginx -s reload<br>设置nginx为自启动服务<br>修改linux 启动脚本/etc/rc.d/rc<br>加入 :<br>/usr/local/nginx/sbin/nginx<br>5、配置nginx.conf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">......</span><br><span class="line">upstream myserver&#123;</span><br><span class="line">ip_hash;<span class="comment">//ip取哈希码  与反向代理服务器取模 分在那一台</span></span><br><span class="line">server <span class="number">115.28</span><span class="number">.52</span><span class="number">.63</span>:<span class="number">8080</span> weight=<span class="number">1</span>;</span><br><span class="line">server <span class="number">115.28</span><span class="number">.52</span><span class="number">.63</span>:<span class="number">8180</span> weight=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">.....</span><br><span class="line">server&#123;</span><br><span class="line">location / &#123;</span><br><span class="line">.........</span><br><span class="line">proxy_pass http:<span class="comment">//myserver;</span></span><br><span class="line">proxy_connect_timeout <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">.........</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>master-workers的机制的好处<br>首先，对于每个worker进程来说，独立的进程，不需要加锁，<br>所以省掉了锁带来的开销，同时在编程以及问题查找时，也会方<br>便很多。<br>其次，采用独立的进程，可以让互相之间不会影响，一个进程<br>退出后，其它进程还在工作，服务不会中断，master进程则很快启<br>动新的worker进程。当然，worker进程的异常退出，肯定是程序有<br>bug了，异常退出，会导致当前worker上的所有请求失败，不过不<br>会影响到所有请求，所以降低了风险<br>需要设置多少个worker<br>Nginx 同redis类似都采用了io多路复用机制，每个<br>worker都是一个独立的进程，但每个进程里只有一个主线<br>程，通过异步非阻塞的方式来处理请求， 即使是千上万个<br>请求也不在话下。每个worker的线程可以把一个cpu的性<br>能发挥到极致。<br>所以worker数和服务器的cpu数相等是最为适宜的。设<br>少了会浪费cpu，设多了会造成cpu频繁切换上下文带来的<br>损耗。</p><p>//静态资源请求 2个<br>//动态资源请求 4个</p><p>#设置worker数量。<br>worker_processes 4<br>#work绑定cpu(4 work绑定4cpu)。<br>worker_cpu_affinity 0001 0010 0100 1000<br>#work绑定cpu (4 work绑定8cpu中的4个) 。<br>worker_cpu_affinity 0000001 00000010 00000100<br>00001000<br>连接数worker_connection<br>• 这个值是表示每个worker进程所能建立连接的最大值，所以，一个nginx<br>能建立的最大连接数，应该是worker_connections * worker_processes。<br>当然，这里说的是最大连接数，对于HTTP请求本地资源来说，能够支持的<br>最大并发数量是worker_connections * worker_processes，如果是支持<br>http1.1的浏览器每次访问要占两个连接，所以普通的静态访问最大并发数<br>是： worker_connections * worker_processes /2，而如果是HTTP作<br>为反向代理来说，最大并发数量应该是worker_connections *<br>worker_processes/4。因为作为反向代理服务器，每个并发会建立与客<br>户端的连接和与后端服务的连接，会占用两个连接。</p><p>worker_connections * worker_processes /2 静态<br>worker_connections * worker_processes /4 动态</p><p>work最先处理请求 nobody表示权限最低 路人甲<br>use epoll</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;官网&lt;a href=&quot;http://nginx.org/&quot;&gt;http://nginx.org/&lt;/a&gt;&lt;br&gt;需要的素材&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span </summary>
      
    
    
    
    
    <category term="Nginx" scheme="https://zkkget.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>主站博客迁移之Thymleaf项目常用操作</title>
    <link href="https://zkkget.github.io/2022/07/25/%E4%B8%BB%E7%AB%99%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%B9%8BThymleaf%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://zkkget.github.io/2022/07/25/%E4%B8%BB%E7%AB%99%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%B9%8BThymleaf%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2022-07-25T07:36:44.000Z</published>
    <updated>2022-07-25T07:39:16.989Z</updated>
    
    <content type="html"><![CDATA[<p>Thymleaf搭配Springboot完成页面渲染，整理下日常开发中常见常用操作<br>1.下拉框动态被选中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;label <span class="keyword">for</span>=<span class="string">&quot;inputLevel&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-6 col-form-label form-label&quot;</span>&gt;用户等级:&lt;/label&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-6&quot;</span>&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;inputLevel&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> name=<span class="string">&quot;level&quot;</span>&gt;</span><br><span class="line">&lt;option value=<span class="string">&quot;&quot;</span></span><br><span class="line">th:selected=<span class="string">&quot;$&#123;null==req?&#x27;selected&#x27;:req.level==null?&#x27;select&#x27;:&#x27;false&#x27;&#125;&quot;</span>&gt;</span><br><span class="line">全部</span><br><span class="line">&lt;/option&gt;</span><br><span class="line">&lt;option value=<span class="string">&quot;1&quot;</span></span><br><span class="line">th:selected=<span class="string">&quot;$&#123;null==req?&#x27;false&#x27;:req.level==&#x27;1&#x27;?&#x27;select&#x27;:&#x27;false&#x27;&#125;&quot;</span>&gt;<span class="number">1</span>级</span><br><span class="line">&lt;/option&gt;</span><br><span class="line">&lt;option value=<span class="string">&quot;2&quot;</span></span><br><span class="line">th:selected=<span class="string">&quot;$&#123;null==req?&#x27;false&#x27;:req.level==&#x27;2&#x27;?&#x27;select&#x27;:&#x27;false&#x27;&#125;&quot;</span>&gt;<span class="number">2</span>级</span><br><span class="line">&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>2.动态复选框选中(判断List是否包含)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span></span><br><span class="line">  th:id=<span class="string">&quot;&#x27;checkboxResource&#x27; + $&#123;resourceEn.key&#125;&quot;</span></span><br><span class="line">  th:checked=<span class="string">&quot;$&#123;null==req.resourceIdList?&#x27;false&#x27;:#arrays.contains(req.resourceIdList, #strings.toString(resourceEn.key))?&#x27;checked&#x27;:&#x27;false&#x27;&#125;&quot;</span></span><br><span class="line">  name=<span class="string">&quot;resourceIdList&quot;</span> th:value=<span class="string">&quot;$&#123;resourceEn.key&#125;&quot;</span>&gt;</span><br><span class="line">  &lt;label th:text=<span class="string">&quot;$&#123;resourceEn.value.name&#125;&quot;</span> th:<span class="keyword">for</span>=<span class="string">&quot;&#x27;checkboxResource&#x27; + $&#123;resourceEn.key&#125;&quot;</span>&gt;&lt;/label&gt;</span><br></pre></td></tr></table></figure><p>3.onclick动态传值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=<span class="string">&quot;button&quot;</span> th:text=<span class="string">&quot;*&#123;status&#125;==0?&#x27;开启&#x27;:&#x27;关闭&#x27;&quot;</span></span><br><span class="line">th:attr=<span class="string">&quot;disabled=*&#123;status==10?true:false&#125;&quot;</span></span><br><span class="line">th:data-id=<span class="string">&quot;$&#123;supplier.id&#125;&quot;</span></span><br><span class="line">th:data-status=<span class="string">&quot;*&#123;status==0?1:0&#125;&quot;</span></span><br><span class="line">th:<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;*&#123;status ==0||status!=1&#125;?&#x27;btn btn-block btn-success&#x27;:&#x27;btn btn-block btn-danger&#x27;&quot;</span></span><br><span class="line">onclick=<span class="string">&quot;enable(this.getAttribute(&#x27;data-id&#x27;),this.getAttribute(&#x27;data-status&#x27;))&quot;</span>&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>4.日期格式化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;td th:text=<span class="string">&quot;*&#123;#dates.format(updateTime, &#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>5.保留小数点后两位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;label <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;ml-3&quot;</span> th:<span class="keyword">if</span>=<span class="string">&quot;*&#123;price ne 1.0&#125;&quot;</span> th:text=<span class="string">&quot;*&#123;#numbers.formatDecimal(price * 10,0,2)&#125;&quot;</span>&gt;&lt;/label&gt;</span><br></pre></td></tr></table></figure><p>6.点击详情/编辑回显下拉被选中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control select2bs4&quot;</span> style=<span class="string">&quot;width: 100%;&quot;</span> name=<span class="string">&quot;id&quot;</span>&gt;</span><br><span class="line">&lt;option value=<span class="string">&quot;&quot;</span> selected=<span class="string">&quot;selected&quot;</span>&gt;==请选择==&lt;/option&gt;</span><br><span class="line">&lt;option th:each=<span class="string">&quot;user : $&#123;users&#125;&quot;</span> th:selected=<span class="string">&quot;$&#123;user.id eq dept.id&#125;&quot;</span>  th:text=<span class="string">&quot;$&#123;user.Name&#125;&quot;</span>&gt;&lt;/option&gt;&lt;/select&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Thymleaf搭配Springboot完成页面渲染，整理下日常开发中常见常用操作&lt;br&gt;1.下拉框动态被选中&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class</summary>
      
    
    
    
    
    <category term="Thymleaf" scheme="https://zkkget.github.io/tags/Thymleaf/"/>
    
  </entry>
  
  <entry>
    <title>主站博客迁移之SpringCloudAlibaba服务注册新发现</title>
    <link href="https://zkkget.github.io/2022/07/25/%E4%B8%BB%E7%AB%99%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%B9%8BSpringCloudAlibaba%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E6%96%B0%E5%8F%91%E7%8E%B0/"/>
    <id>https://zkkget.github.io/2022/07/25/%E4%B8%BB%E7%AB%99%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%B9%8BSpringCloudAlibaba%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E6%96%B0%E5%8F%91%E7%8E%B0/</id>
    <published>2022-07-25T07:18:07.000Z</published>
    <updated>2022-07-25T07:31:33.474Z</updated>
    
    <content type="html"><![CDATA[<p>2018.09.21「小马哥技术周报」- 第一期《Spring Cloud 服务发现新选择 - Alibaba Nacos Discovery</p><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/Springcloud1.jpg" alt="流程"><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/Springcloud2.jpg" alt="流程"><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/Springcloud3.jpg" alt="流程"><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/Springcloud4.jpg" alt="流程"><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/Springcloud5.jpg" alt="流程"><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/Springcloud6.jpg" alt="流程"><br>基本是刚出来的时候就已经讲了，现在都2020了<br>不太适合大规模的分布式服务发现ZAB算法<br>内存型，有内存限制</p><p>Springcloudcommons as servicediscovery load balancing  circuit break<br>EnableDiscoveryClient是通用API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DiscoveryClient</span> <span class="keyword">extends</span> <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> DEFAULT_ORDER = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;ServiceInstance&gt; <span class="title">getInstances</span><span class="params">(String serviceId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">getServices</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类的其中一种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaDiscoveryClient</span> <span class="keyword">implements</span> <span class="title">DiscoveryClient</span> </span>&#123;</span><br><span class="line">    实现方法的返回值的ServiceInstance源码</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServiceInstance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">getInstanceId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    zk是唯一标识；eureka是ip+服务名</span><br><span class="line">    <span class="function">String <span class="title">getServiceId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getHost</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//是否是HTTPs协议or not</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSecure</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">URI <span class="title">getUri</span><span class="params">()</span></span>;</span><br><span class="line">    源信息  zk是又专门存储字段  补充信息</span><br><span class="line">    <span class="function">Map&lt;String, String&gt; <span class="title">getMetadata</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">getScheme</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Eureka传递序列化或反序列化通过metadata传递，相关的开销比较大<br>超类接口Registration cloud commons 继承了上面的serviceInstance<br>现在的位置<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/Springcloud7.jpg" alt="流程"></p><p>空继承，为了扩展</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServiceRegistry</span>&lt;<span class="title">R</span> <span class="keyword">extends</span> <span class="title">Registration</span>&gt; </span>&#123;</span><br><span class="line">    注册</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(R registration)</span></span>;</span><br><span class="line">    de解除注册</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deregister</span><span class="params">(R registration)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(R registration, String status)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getStatus</span><span class="params">(R registration)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nacos的实现注册"><a href="#Nacos的实现注册" class="headerlink" title="Nacos的实现注册"></a>Nacos的实现注册</h2><p> com.alibaba.nacos.api.naming;NamingService<br>现在我下载源码总是下不下来，以为是maven出问题，忘记因为其他项目公用maven，导致maven配置的是私服地址，改下maven就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">F:\cloud2020&gt;mvn dependency:resolve -Dclassifier=sources</span><br><span class="line">[INFO] Scanning <span class="keyword">for</span> projects...</span><br><span class="line">Downloading from nexus-server: xxx</span><br><span class="line">ependencies/<span class="number">2.2</span><span class="number">.2</span>.RELEASE/spring-boot-dependencies-<span class="number">2.2</span><span class="number">.2</span>.RELEASE.pom</span><br><span class="line">Downloading from nexus-server: xxx</span><br><span class="line">-dependencies/Hoxton.SR1/spring-cloud-dependencies-Hoxton.SR1.pom</span><br><span class="line">Downloading from nexus-server: xxx</span><br><span class="line">-dependencies/<span class="number">2.1</span><span class="number">.0</span>.RELEASE/spring-cloud-alibaba-dependencies-<span class="number">2.1</span><span class="number">.0</span>.RELEASE.pom</span><br></pre></td></tr></table></figure><p>namingSpace有很多重载方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NamingService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * register a instance to service</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceName name of service</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ip          instance ip</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port        instance port</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NacosException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerInstance</span><span class="params">(String serviceName, String ip, <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> NacosException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * register a instance to service</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceName name of service</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupName   group of service</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ip          instance ip</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port        instance port</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NacosException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerInstance</span><span class="params">(String serviceName, String groupName, String ip, <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> NacosException</span>;</span><br></pre></td></tr></table></figure><p>返回的是Instance</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * get all instances of a service</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> serviceName name of service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> A list of instance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NacosException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> 服务名   是否健康</span><br><span class="line"><span class="function">List&lt;Instance&gt; <span class="title">getAllInstances</span><span class="params">(String serviceName)</span> <span class="keyword">throws</span> NacosException</span>;</span><br><span class="line">Ribbon--&gt;server  </span><br><span class="line">Eureka==&gt;ServiceInstance</span><br></pre></td></tr></table></figure><p>namingSpace以及instance都是Nacos的Api,而registration是Spring 为了适配实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Registration registration)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(registration.getServiceId())) &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;No service to register for nacos client...&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String serviceId = registration.getServiceId();</span><br><span class="line">        <span class="comment">//this.getNacosInstanceFromRegistration  get  set</span></span><br><span class="line">        Instance instance = <span class="keyword">this</span>.getNacosInstanceFromRegistration(registration);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            放入nacos  注册中心持久化  可以连db</span><br><span class="line">            <span class="keyword">this</span>.namingService.registerInstance(serviceId, instance);</span><br><span class="line">            log.info(<span class="string">&quot;nacos registry, &#123;&#125; &#123;&#125;:&#123;&#125; register finished&quot;</span>, <span class="keyword">new</span> Object[]&#123;serviceId, instance.getIp(), instance.getPort()&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var5) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;nacos registry, &#123;&#125; register failed...&#123;&#125;,&quot;</span>, <span class="keyword">new</span> Object[]&#123;serviceId, registration.toString(), var5&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>放入nacos  注册中心持久化  可以连db<br>this.namingService.registerInstance(serviceId, instance);<br>Nacos  =Naming +config server<br>上面的实现类图可以看到ZK的实现<br>org.springframework.cloud.zookeeper.serviceregistry;<br>ZK的注册 反注册就跟现在的Nacos有一定程度的相似<br>注解驱动<br>依赖注入<br>外部化配置<br>事件驱动<br>github.com/nacos-group/nacos-spring-project<br>github.com/nacos-group/nacos-spring-boot-project</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2018.09.21「小马哥技术周报」- 第一期《Spring Cloud 服务发现新选择 - Alibaba Nacos Discovery&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zkk-1300025204.cos.ap-nanjing.myqcloud.c</summary>
      
    
    
    
    
    <category term="SpringCloudAlibaba" scheme="https://zkkget.github.io/tags/SpringCloudAlibaba/"/>
    
  </entry>
  
  <entry>
    <title>主站博客迁移之拒绝解析又臭又长的JSON</title>
    <link href="https://zkkget.github.io/2022/07/25/%E4%B8%BB%E7%AB%99%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%B9%8B%E6%8B%92%E7%BB%9D%E8%A7%A3%E6%9E%90%E5%8F%88%E8%87%AD%E5%8F%88%E9%95%BF%E7%9A%84JSON/"/>
    <id>https://zkkget.github.io/2022/07/25/%E4%B8%BB%E7%AB%99%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%B9%8B%E6%8B%92%E7%BB%9D%E8%A7%A3%E6%9E%90%E5%8F%88%E8%87%AD%E5%8F%88%E9%95%BF%E7%9A%84JSON/</id>
    <published>2022-07-25T07:10:12.000Z</published>
    <updated>2022-07-25T07:11:54.562Z</updated>
    
    <content type="html"><![CDATA[<p>在日常工作中，不管是因为接收前端返回约定格式的JSON字符串，还是因为需要约定格式请求第三方服务，或者需要将前端画像xml解析成JSON，再或者需要接入第三方短信，供应商，数据提供商的JSON数据，或是需要提供对外暴露接口的API，可见解析JSON是一个常见操作。</p><p>JSON是一个轻量级的数据交换格式。</p><p>一：表单数据由数据库实体对象接收</p><p>常见的前后端约定字段，指定字段名称后，由数据库实体接收序列化后的表单数据，无序解析。</p><p>二：JSONObject解析</p><p>前后端约定格式，实体接收String类型，通过JSONObject解析JSON，JSONArray等操作</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">            </span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;createBy&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;createTime&quot;</span>: <span class="number">1521171180000</span>,</span><br><span class="line">        <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;fa fa-gear&quot;</span>,</span><br><span class="line">        <span class="string">&quot;menuId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;menuName&quot;</span>: <span class="string">&quot;系统管理&quot;</span>,</span><br><span class="line">        <span class="string">&quot;menuType&quot;</span>: <span class="string">&quot;M&quot;</span>,</span><br><span class="line">        <span class="string">&quot;orderNum&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;parentId&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;perms&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;target&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;#&quot;</span>,</span><br><span class="line">        <span class="string">&quot;visible&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">            </span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;createBy&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;createTime&quot;</span>: <span class="number">1521171180000</span>,</span><br><span class="line">        <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;fa fa-video-camera&quot;</span>,</span><br><span class="line">        <span class="string">&quot;menuId&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;menuName&quot;</span>: <span class="string">&quot;系统监控&quot;</span>,</span><br><span class="line">        <span class="string">&quot;menuType&quot;</span>: <span class="string">&quot;M&quot;</span>,</span><br><span class="line">        <span class="string">&quot;orderNum&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;parentId&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;perms&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;target&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;#&quot;</span>,</span><br><span class="line">        <span class="string">&quot;visible&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">            </span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;createBy&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;createTime&quot;</span>: <span class="number">1521171180000</span>,</span><br><span class="line">        <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;fa fa-bars&quot;</span>,</span><br><span class="line">        <span class="string">&quot;menuId&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;menuName&quot;</span>: <span class="string">&quot;系统工具&quot;</span>,</span><br><span class="line">        <span class="string">&quot;menuType&quot;</span>: <span class="string">&quot;M&quot;</span>,</span><br><span class="line">        <span class="string">&quot;orderNum&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;parentId&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;perms&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;target&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;#&quot;</span>,</span><br><span class="line">        <span class="string">&quot;visible&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>通过JSONObject以及解析JSONArray获取<br>三：接入第三方API</p><p>接入第三方API，或者按约定调用第三方服务时，你会发现约定了又臭有长的JSON格式，包含特定字段，包含token，包含秘钥，一个详细数据解析接口，上百个字段是常见的，而且多种格式嵌套解析，如果单纯将收到的字符串手动转化成JSONObject，还要判空，还要层层遍历，还要验证数据的有效性，这是在是不小的工作量。</p><p>改造方法：提取最长，覆盖字段最全的作为实体列接收，含有List数据就由List接收，最外层K值由字段接收，涉及类型判断需按约定传不同数值的，定义为枚举，秘钥等特殊Key值MD5加解密传递。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果url是空，则认为是解析历史数据 不需要拼装请求</span></span><br><span class="line">        <span class="keyword">if</span> (url != <span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(url)) &#123;</span><br><span class="line">            Client client = <span class="keyword">new</span> Client();</span><br><span class="line">            Map&lt;String, String&gt; params = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;mobileReli&quot;</span>.equals(interfaceCode)) &#123; <span class="comment">//if类型判断定义为枚举      </span></span><br><span class="line">                String infoJson = String.format(<span class="string">&quot;&#123;\&quot;phone\&quot;:\&quot;%s\&quot;,\&quot;name\&quot;:\&quot;%s\&quot;,\&quot;curDate\&quot;:\&quot;%s\&quot;&#125;&quot;</span>,</span><br><span class="line">                        applyRecord.getPhone(), applyRecord.getName(), applyRecord.getFlashblackDate());</span><br><span class="line">                StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                <span class="keyword">long</span> time = System.currentTimeMillis();<span class="comment">//重复度高的字段由优特实体类接收</span></span><br><span class="line">                sb.append(secret + <span class="string">&quot;!&quot;</span> + appKey + <span class="string">&quot;!&quot;</span> + time + <span class="string">&quot;!&quot;</span> + applyRecord.getName() + <span class="string">&quot;!&quot;</span></span><br><span class="line">                        + applyRecord.getPhone() + <span class="string">&quot;!&quot;</span> + secret + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                sign = hdsClient.md5(sb.toString());</span><br><span class="line">                String param = String.format(<span class="string">&quot;appKey=%s&amp;infoJson=%s&amp;sign=%s&amp;time=%s&quot;</span>, appKey, infoJson, sign, time);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    jsonData = hdsClient.getResult(url, param);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;DSModel&quot;</span>.equals(interfaceCode)) &#123;</span><br><span class="line">                String infoJson = String.format(<span class="string">&quot;&#123;\&quot;mobile\&quot;:\&quot;%s\&quot;,\&quot;name\&quot;:\&quot;%s\&quot;,\&quot;starttime\&quot;:\&quot;%s\&quot;&#125;&quot;</span>,</span><br><span class="line">                        applyRecord.getPhone(), applyRecord.getName(), applyRecord.getFlashblackDate());</span><br><span class="line">                StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">                sb.append(secret + <span class="string">&quot;!&quot;</span> + appKey + <span class="string">&quot;!&quot;</span> + time + <span class="string">&quot;!&quot;</span> + applyRecord.getName() + <span class="string">&quot;!&quot;</span></span><br><span class="line">                        + applyRecord.getPhone() + <span class="string">&quot;!&quot;</span> + applyRecord.getFlashblackDate() + <span class="string">&quot;!&quot;</span> + secret + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                sign = hdsClient.md5(sb.toString());</span><br><span class="line">                String param = String.format(<span class="string">&quot;appKey=%s&amp;infoJson=%s&amp;sign=%s&amp;time=%s&quot;</span>, appKey, infoJson, sign, time);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    jsonData = hdsClient.getResult(url, param);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;addressDetection&quot;</span>.equals(interfaceCode)) &#123;   </span><br><span class="line">                String infoJson = String.format(<span class="string">&quot;&#123;\&quot;phone\&quot;:\&quot;%s\&quot;,\&quot;address\&quot;:\&quot;%s\&quot;,\&quot;curDate\&quot;:\&quot;%s\&quot;&#125;&quot;</span>,</span><br><span class="line">                        applyRecord.getPhone(), applyRecord.getAddress(), applyRecord.getFlashblackDate());</span><br><span class="line">                StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">                sb.append(secret + <span class="string">&quot;!&quot;</span> + appKey + <span class="string">&quot;!&quot;</span> + time + <span class="string">&quot;!&quot;</span> + applyRecord.getPhone() + <span class="string">&quot;!&quot;</span></span><br><span class="line">                        + applyRecord.getAddress() + <span class="string">&quot;!&quot;</span> + applyRecord.getFlashblackDate() + <span class="string">&quot;!&quot;</span> + secret + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                sign = hdsClient.md5(sb.toString());</span><br><span class="line">                String param = String.format(<span class="string">&quot;appKey=%s&amp;infoJson=%s&amp;sign=%s&amp;time=%s&quot;</span>, appKey, infoJson, sign, time);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    jsonData = hdsClient.getResult(url, param);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">InterfaceCodeEnum</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    InterfaceCode1(<span class="number">1</span>,<span class="string">&quot;mobileReli&quot;</span>),</span><br><span class="line">    InterfaceCode2(<span class="number">2</span>,<span class="string">&quot;DSModel&quot;</span>),</span><br><span class="line">    InterfaceCode3(<span class="number">3</span>,<span class="string">&quot;addressDetection&quot;</span>),</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    InterfaceCodeEnum(Integer code, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getNameBycode</span><span class="params">(Integer code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (code == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (InterfaceCodeEnum a : InterfaceCodeEnum.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a.code.equals(code)) &#123;</span><br><span class="line">                <span class="keyword">return</span> a.name;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceCodeResult</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//基础信息</span></span><br><span class="line">    <span class="keyword">private</span> Base base;</span><br><span class="line">    <span class="comment">//秘钥信息</span></span><br><span class="line">    <span class="keyword">private</span> AuthInfo authInfo;</span><br><span class="line">    <span class="comment">//外层字段封装为对象接收</span></span><br><span class="line">    <span class="keyword">private</span> AddressResult  addressResult;</span><br><span class="line">    <span class="comment">//重复多层信息List接收</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Flashblack&gt; flashblack;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当接收到JSON字符串时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">InterfaceCodeResult codeResult=JSONObject.parseObject(InterfaceCodeResult.getRequestInfo(),InterfaceCodeResult.class);</span><br><span class="line">if(PreInterfaceStatus.equals(codeResult.base.getTyep()))&#123;</span><br><span class="line">  return JavaConvertUtil.conversion(codeResult, CodeParams.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅需要判断多个类型即可，对应字段会自动解析，当接收又臭又长的XML解析还需要后端验证时，需要封装Util类进行验证调用</p><p>同步更新至微信公众号，请搜索:赵KK日常技术记录，不定时更新文章内容</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在日常工作中，不管是因为接收前端返回约定格式的JSON字符串，还是因为需要约定格式请求第三方服务，或者需要将前端画像xml解析成JSON，再或者需要接入第三方短信，供应商，数据提供商的JSON数据，或是需要提供对外暴露接口的API，可见解析JSON是一个常见操作。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="JSON" scheme="https://zkkget.github.io/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>项目实战----行政优先级分析</title>
    <link href="https://zkkget.github.io/2022/05/10/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E8%A1%8C%E6%94%BF%E4%BC%98%E5%85%88%E7%BA%A7%E5%88%86%E6%9E%90/"/>
    <id>https://zkkget.github.io/2022/05/10/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E8%A1%8C%E6%94%BF%E4%BC%98%E5%85%88%E7%BA%A7%E5%88%86%E6%9E%90/</id>
    <published>2022-05-10T03:00:00.000Z</published>
    <updated>2022-06-13T06:24:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>在现有地点中解析其地点优先级,最小到区县,当前区县可指定作业优先级,当绑定优先级数据后的数据应在选择时优先展示。</p><h2 id="行政优先级维护"><a href="#行政优先级维护" class="headerlink" title="行政优先级维护"></a>行政优先级维护</h2><p>采用百度地图数据很行行政区域编码维护,考虑到现有数据是人工维护,获取其省市区县可能不准确,所以先根据其经纬度定位后可准确获取其省市区县,然后再进行编码维护。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>地点北京市东城区天安门，百度坐标116.403963,39.915119</p><h2 id="API"><a href="#API" class="headerlink" title="API:"></a>API:</h2><p><a href="https://lbsyun.baidu.com/index.php?title=webapi/district-search">https://lbsyun.baidu.com/index.php?title=webapi/district-search</a><br><a href="https://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad">https://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"> Map&lt;String, String&gt; map = IbsBMapUtils.reverseGeocoding(&quot;116.403963&quot;, &quot;39.915119&quot;);</span><br><span class="line">                String province = map.get(&quot;province&quot;);</span><br><span class="line"></span><br><span class="line">List&lt;IbsBMapUtils.Districts&gt; districts = IbsBMapUtils.regionSearch(province.substring(0, 2));</span><br><span class="line">                for (IbsBMapUtils.Districts district : districts) &#123;</span><br><span class="line">                    DivisionDo divisionDo = new DivisionDo();</span><br><span class="line">                    divisionDo.setProvinceCode(district.getCode());</span><br><span class="line">                    divisionDo.setProvinceName(district.getName());</span><br><span class="line">                    divisionDo.setWarehouseCode(locationConfigDO.getWarehouseCode());</span><br><span class="line">                    List&lt;IbsBMapUtils.Districts&gt; districtsList = district.getDistricts();</span><br><span class="line">                    if (org.apache.commons.collections.CollectionUtils.isNotEmpty(districtsList)) &#123;</span><br><span class="line">                        for (IbsBMapUtils.Districts districts2 : districtsList) &#123;</span><br><span class="line">                            divisionDo.setCityCode(districts2.getCode());</span><br><span class="line">                            divisionDo.setCityName(districts2.getName());</span><br><span class="line">                            List&lt;IbsBMapUtils.Districts&gt; districts3 = districts2.getDistricts();</span><br><span class="line">                            if (org.apache.commons.collections.CollectionUtils.isNotEmpty(districts3)) &#123;</span><br><span class="line">                                for (IbsBMapUtils.Districts district3 : districts3) &#123;</span><br><span class="line">                                    divisionDo.setRegionName(district3.getName());</span><br><span class="line">                                    divisionDo.setRegionCode(district3.getCode());</span><br><span class="line">                                    divisionRepository.insert(divisionDo);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                divisionRepository.insert(divisionDo);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        divisionRepository.insert(divisionDo);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="当前区域指定优先级作业后数据优先展示"><a href="#当前区域指定优先级作业后数据优先展示" class="headerlink" title="当前区域指定优先级作业后数据优先展示"></a>当前区域指定优先级作业后数据优先展示</h2><p>例如北京市有N个区,指定了N个规划路线,当东城区指定了由最近的骑手配送时，则点击东城区商家的配送线路优先展示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">List&lt;MunicipalLevel&gt;  list = MunicipalLevelMapper.selectMunicipalLevelList(&quot;北京市-东城区&quot;);</span><br><span class="line"></span><br><span class="line">       if(CollectionUtils.isEmpty(list))&#123;</span><br><span class="line">           return Collections.emptyList();</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">List&lt;String&gt; riderList = divisionMapper.getRiderByProvince(&quot;11001&quot;, &quot;北京市&quot;,&quot;东城区&quot;);</span><br><span class="line">               //错误实例</span><br><span class="line">if (CollectionUtils.isNotEmpty(riderList)) &#123;</span><br><span class="line">                   for (String riderName : riderList) &#123;</span><br><span class="line">                       List&lt;RirderListResponse&gt; listResponses = list.stream().filter(vo -&gt; StringUtils.isNotEmpty(vo.getRirderName()) &amp;&amp; vo.getRiderName().equals(riderName)).collect(Collectors.toList());</span><br><span class="line">                       if (CollectionUtils.isNotEmpty(listResponses)) &#123;</span><br><span class="line">                           for (int i = 0; i &lt; listResponses.size(); i++) &#123;</span><br><span class="line">                               RirderListResponse response = listResponses.get(i);</span><br><span class="line">                               final List l = list;</span><br><span class="line">                               l.set(i, l.set(j, l.get(i)));</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       log.warn(&quot;响应&#123;&#125;&quot;, JSONObject.toJSONString(list));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="bug修复"><a href="#bug修复" class="headerlink" title="bug修复"></a>bug修复</h2><p>当前查询出东城区绑定优先级为1.2.3.4时，查询出来的顺序更新索引位置会变为4.3.2.1，且考虑到list会多个且可重复重新更改代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">List&lt;MunicipalLevel&gt;  list = MunicipalLevelMapper.selectMunicipalLevelList(&quot;北京市-东城区&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       if(CollectionUtils.isEmpty(list))&#123;</span><br><span class="line">           return Collections.emptyList();</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">              List&lt;String&gt; riderList = divisionMapper.getRiderByProvince(&quot;11001&quot;, &quot;北京市&quot;,&quot;东城区&quot;);</span><br><span class="line">               riderList = riderList.stream().filter(item -&gt; responseList.stream().map(RouteListResponse::getName).collect(Collectors.toList()).contains(item)).collect(Collectors.toList());</span><br><span class="line">               Collections.reverse(riderList);</span><br><span class="line">                   Collections.reverse(riderList);</span><br><span class="line">                   for (int i = 0; i &lt; riderList.size(); i++) &#123;</span><br><span class="line">                       for (MunicipalLevel res : list) &#123;</span><br><span class="line">                           if(res.getName().equals(riderList.get(i)))&#123;</span><br><span class="line">                               Collections.swap(list, list.indexOf(res), i);</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">       &#125;         </span><br><span class="line">           </span><br></pre></td></tr></table></figure><h2 id="bug再次修复终极版"><a href="#bug再次修复终极版" class="headerlink" title="bug再次修复终极版"></a>bug再次修复终极版</h2><p>当存在多个优先级相同的区域路线时，会因为本身在list的位置不同，导致最后只有第一个正确，其他元素位置不正确</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">if(CollectionUtils.isEmpty(list))&#123;</span><br><span class="line">            return Collections.emptyList();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">              // List&lt;String&gt; riderList = divisionMapper.getRiderByProvince(&quot;11001&quot;, &quot;北京市&quot;,&quot;东城区&quot;);</span><br><span class="line">                //riderList = riderList.stream().filter(item -&gt; responseList.stream().map(RouteListResponse::getName).collect(Collectors.toList()).contains(item)).collect(Collectors.toList());</span><br><span class="line">                    //Collections.reverse(riderList);</span><br><span class="line">                    //借助外部元素记录交换元素位置</span><br><span class="line">                    if (CollectionUtils.isNotEmpty(supplierList)) &#123;</span><br><span class="line">                    int a = 0 ;</span><br><span class="line">                    for (int i = 0; i &lt; riderList.size(); i++) &#123;</span><br><span class="line">                        for (MunicipalLevel res : list) &#123;</span><br><span class="line">                            if(res.getName().equals(riderList.get(i)))&#123;</span><br><span class="line">                                Collections.swap(list, list.indexOf(res), i);</span><br><span class="line">                                a++;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class=&quot;headerlink&quot; title=&quot;需求分析&quot;&gt;&lt;/a&gt;需求分析&lt;/h2&gt;&lt;p&gt;在现有地点中解析其地点优先级,最小到区县,当前区县可指定作业优先级,当绑定优先级数据后的数据应在选择时优先展示。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="实战" scheme="https://zkkget.github.io/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>mysql中的锁表语句查看方法汇总</title>
    <link href="https://zkkget.github.io/2022/04/28/mysql%E4%B8%AD%E7%9A%84%E9%94%81%E8%A1%A8%E8%AF%AD%E5%8F%A5%E6%9F%A5%E7%9C%8B%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/"/>
    <id>https://zkkget.github.io/2022/04/28/mysql%E4%B8%AD%E7%9A%84%E9%94%81%E8%A1%A8%E8%AF%AD%E5%8F%A5%E6%9F%A5%E7%9C%8B%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/</id>
    <published>2022-04-28T08:48:51.000Z</published>
    <updated>2022-05-07T03:13:42.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show status like <span class="string">&#x27;Table%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">+----------------------------+----------+</span><br><span class="line"></span><br><span class="line">| Variable_name        | Value |</span><br><span class="line"></span><br><span class="line">+----------------------------+----------+</span><br><span class="line"></span><br><span class="line">| Table_locks_immediate | <span class="number">105</span>         |</span><br><span class="line"></span><br><span class="line">| Table_locks_waited   | <span class="number">3</span>           |</span><br><span class="line"></span><br><span class="line">+----------------------------+----------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Table_locks_immediate    26839653<br>Table_locks_waited            0<br>Table_open_cache_hits    3<br>Table_open_cache_misses    2<br>Table_open_cache_overflows    2</p><p>Table_locks_immediate  指的是能够立即获得表级锁的次数</p><p>Table_locks_waited  指的是不能立即获取表级锁而需要等待的次数</p><p>Table_open_cache_hits  表缓存被命中的次数</p><p>Table_open_cache_misses 表缓存未被命中的次数</p><p>Table_open_cache_overflows  就是上面说的淘汰的instance（table cache）的数量</p><p>查看正在被锁定的的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">OPEN</span> TABLES <span class="keyword">where</span> In_use <span class="operator">&gt;</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>怎么查找mysql中的锁表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> processlist;</span><br><span class="line">与<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.processlist效果相同</span><br></pre></td></tr></table></figure><p>SHOW PROCESSLIST显示哪些线程正在运行。您也可以使用mysqladmin processlist语句得到此信息。如果您有SUPER权限，您可以看到所有线程。否则，您只能看到您自己的线程（也就是，与您正在使用的MySQL账户相关的线程）。如果有线程在update或者insert 某个表，此时进程的status为updating 或者 sending data。<br>show processlist 是显示用户正在运行的线程，需要注意的是，除了 root 用户能看到所有正在运行的线程外，其他用户都只能看到自己正在运行的线程，看不到其它用户正在运行的线程。除非单独个这个用户赋予了PROCESS 权限<br>– 查看那些表锁到了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">OPEN</span> TABLES <span class="keyword">where</span> In_use <span class="operator">&gt;</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>– 查看进程号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> processlist;</span><br></pre></td></tr></table></figure><p>–删除进程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill <span class="number">1085850</span>；</span><br></pre></td></tr></table></figure><p> <img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/mysql.png" alt="流程"></p><p>Id: 就是这个线程的唯一标识，当我们发现这个线程有问题的时候，可以通过 kill 命令，加上这个Id值将这个线程杀掉。前面我们说了show processlist 显示的信息时来自information_schema.processlist 表，所以这个Id就是这个表的主键。<br>User: 就是指启动这个线程的用户。<br>Host: 记录了发送请求的客户端的 IP 和 端口号。通过这些信息在排查问题的时候，我们可以定位到是哪个客户端的哪个进程发送的请求。<br>DB: 当前执行的命令是在哪一个数据库上。如果没有指定数据库，则该值为 NULL 。<br>Command: 是指此刻该线程正在执行的命令。这个很复杂，下面单独解释<br>Time: 表示该线程处于当前状态的时间。<br>State: 线程的状态，和 Command 对应，下面单独解释。<br>Info: 一般记录的是线程执行的语句。默认只显示前100个字符，也就是你看到的语句可能是截断了的，要看全部信息，需要使用 show full processlist。<br>下面我们单独看一下 Command 的值：<br>Binlog Dump: 主节点正在将二进制日志 ，同步到从节点<br>Change User: 正在执行一个 change-user 的操作<br>Close Stmt: 正在关闭一个Prepared Statement 对象<br>Connect: 一个从节点连上了主节点<br>Connect Out: 一个从节点正在连主节点<br>Create DB: 正在执行一个create-database 的操作<br>Daemon: 服务器内部线程，而不是来自客户端的链接<br>Debug: 线程正在生成调试信息<br>Delayed Insert: 该线程是一个延迟插入的处理程序<br>Drop DB: 正在执行一个 drop-database 的操作<br>Execute: 正在执行一个 Prepared Statement<br>Fetch: 正在从Prepared Statement 中获取执行结果<br>Field List: 正在获取表的列信息<br>Init DB: 该线程正在选取一个默认的数据库<br>Kill : 正在执行 kill 语句，杀死指定线程<br>Long Data: 正在从Prepared Statement 中检索 long data<br>Ping: 正在处理 server-ping 的请求<br>Prepare: 该线程正在准备一个 Prepared Statement<br>ProcessList: 该线程正在生成服务器线程相关信息<br>Query: 该线程正在执行一个语句<br>Quit: 该线程正在退出<br>Refresh：该线程正在刷表，日志或缓存；或者在重置状态变量，或者在复制服务器信息<br>Register Slave： 正在注册从节点<br>Reset Stmt: 正在重置 prepared statement<br>Set Option: 正在设置或重置客户端的 statement-execution 选项<br>Shutdown: 正在关闭服务器<br>Sleep: 正在等待客户端向它发送执行语句<br>Statistics: 该线程正在生成 server-status 信息<br>Table Dump: 正在发送表的内容到从服务器<br>Time: Unused</p><p>那么MySQL突然飙升,首先查询当下主库内正在运行的线程以及是否有占用资源的SQL。然后执行分析info语句，看此次SQL是否是新发版功能引起，如果是新功能引起，立即回滚。</p><p>– 查询非 Sleep 状态的链接，按消耗时间倒序展示，自己加条件过滤</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id, db, <span class="keyword">user</span>, host, command, <span class="type">time</span>, state, info</span><br><span class="line"><span class="keyword">from</span> information_schema.processlist</span><br><span class="line"><span class="keyword">where</span> command <span class="operator">!=</span> <span class="string">&#x27;Sleep&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="type">time</span> <span class="keyword">desc</span> </span><br></pre></td></tr></table></figure><p>其次查看CAT，但是CAT中除了Heartbeat报表GC异常以外，只有一条一分钟的SQL，并没有其他超时SQL</p><p>然后查看Grafana可以看到飙升时间在7点18分</p><p>在这个时间段查询PMM</p><p>没有异常，但是在其他服务中查询到有长达10分钟SQL未返回。</p><p>运行show full processlist命令查看是否有线程递增的情况</p><p>查询发现每一秒都有一个SQL在查询，经过代码分析，是某个接口前端轮询调用每秒都在进行查询导致的，没想到一个查询频率超高的SQL能导致CPU超高</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=90978812&cid=155358422&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;" ></iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
    <category term="MySQL" scheme="https://zkkget.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>人工智能vs人工智障之图片识别</title>
    <link href="https://zkkget.github.io/2022/04/07/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BDvs%E4%BA%BA%E5%B7%A5%E6%99%BA%E9%9A%9C%E4%B9%8B%E5%9B%BE%E7%89%87%E8%AF%86%E5%88%AB/"/>
    <id>https://zkkget.github.io/2022/04/07/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BDvs%E4%BA%BA%E5%B7%A5%E6%99%BA%E9%9A%9C%E4%B9%8B%E5%9B%BE%E7%89%87%E8%AF%86%E5%88%AB/</id>
    <published>2022-04-07T08:04:30.000Z</published>
    <updated>2022-04-21T05:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>从车牌识别到图片的相似度处理。开始的目的是识别车牌，以供研究opencv的,在接触车牌的识别的过程中,接触到java的tess4j以及java整合opencv的过程,但是车牌识别效率很低。人为识别是很清晰的但是仍然解析不出来。</p><h2 id="1-Tess4j"><a href="#1-Tess4j" class="headerlink" title="1.Tess4j"></a>1.Tess4j</h2><p>引入依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/net.sourceforge.tess4j/tess4j --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;net.sourceforge.tess4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;tess4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.4</span><span class="number">.8</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>下载中文检索所需包否则会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please make sure the TESSDATA_PREFIX environment variable is set to your “tessdata” directory</span><br></pre></td></tr></table></figure><p>我是直接在gitee拉下来的包手动添加的<br><a href="https://gitee.com/it_moon/tessdata?_from=gitee_search">https://gitee.com/it_moon/tessdata?_from=gitee_search</a></p><h2 id="2-Demo"><a href="#2-Demo" class="headerlink" title="2.Demo"></a>2.Demo</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建实例</span></span><br><span class="line">       ITesseract instance = <span class="keyword">new</span> Tesseract();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置识别语言</span></span><br><span class="line"></span><br><span class="line">       instance.setLanguage(<span class="string">&quot;chi_sim&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置识别引擎</span></span><br><span class="line"></span><br><span class="line">       instance.setOcrEngineMode(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取文件</span></span><br><span class="line"></span><br><span class="line">       BufferedImage image = ImageIO.read(TestTextOcr.class.getResourceAsStream(<span class="string">&quot;/2.jpg&quot;</span>));</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 识别</span></span><br><span class="line">           String result = instance.doOCR(image);</span><br><span class="line">           System.out.println(result);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (TesseractException e) &#123;</span><br><span class="line">           System.err.println(e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>车牌识别对应EL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String el =&quot;/^[京津晋冀蒙辽吉黑沪苏浙皖闽赣鲁豫鄂湘粤桂琼渝川贵云藏陕甘青宁新][ABCDEFGHJKLMNPQRSTUVWXY][\\dABCDEFGHJKLNMxPQRSTUVWXYZ]&#123;5&#125;$/&quot;;</span><br></pre></td></tr></table></figure><p>但是识别效率很低很低<br>参考其他的识别算法仍然识别不出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws TesseractException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        ITesseract instance = new Tesseract();</span><br><span class="line">        //如果未将tessdata放在根目录下需要指定绝对路径</span><br><span class="line">        //设置训练库的位置</span><br><span class="line">        //instance.setDatapath(&quot;the absolute path of tessdata&quot;);</span><br><span class="line"></span><br><span class="line">        //如果需要识别英文之外的语种，需要指定识别语种，并且需要将对应的语言包放进项目中</span><br><span class="line">        // chi_sim ：简体中文， eng    根据需求选择语言库</span><br><span class="line">        instance.setLanguage(&quot;chi_sim&quot;);</span><br><span class="line"></span><br><span class="line">        // 指定识别图片</span><br><span class="line">        instance.setOcrEngineMode(0);</span><br><span class="line">        long startTime = System.currentTimeMillis();</span><br><span class="line">        String ocrResultNew = dealImage(&quot;C:\\Users\\Admin\\Desktop\\9-160514164SDY.jpg&quot;);</span><br><span class="line">        File imgDir = new File(ocrResultNew);</span><br><span class="line">        String ocrResult = instance.doOCR(imgDir);</span><br><span class="line">        String el =&quot;/^[京津晋冀蒙辽吉黑沪苏浙皖闽赣鲁豫鄂湘粤桂琼渝川贵云藏陕甘青宁新][ABCDEFGHJKLMNPQRSTUVWXY][\\dABCDEFGHJKLNMxPQRSTUVWXYZ]&#123;5&#125;$/&quot;;</span><br><span class="line">        System.out.println(&quot;识别结果: \n&quot; + ocrResult + &quot;\n 耗时：&quot; + (System.currentTimeMillis() - startTime) + &quot;ms&quot;);</span><br><span class="line">        if(ocrResult.matches(el))&#123;</span><br><span class="line">            // 输出识别结果</span><br><span class="line">            System.out.println(&quot;识别结果: \n&quot; + ocrResult + &quot;\n 耗时：&quot; + (System.currentTimeMillis() - startTime) + &quot;ms&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            log.error(&quot;车牌识别有误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后我开始搜索java结合opencv的项目，但是仍然识别失败。<br>识别过程为：识别切图–&gt;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从车牌识别到图片的相似度处理。开始的目的是识别车牌，以供研究opencv的,在接触车牌的识别的过程中,接触到java的tess4j以及java整合opencv的过程,但是车牌识别效率很低。人为识别是很清晰的但是仍然解析不出来。&lt;/p&gt;
&lt;h2 id=&quot;1-Tess4j&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="opencv" scheme="https://zkkget.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>Springboot+Netty仿微信实战设计文档</title>
    <link href="https://zkkget.github.io/2022/03/31/Springboot-netty%E4%BB%BF%E5%BE%AE%E4%BF%A1%E5%AE%9E%E6%88%98%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/"/>
    <id>https://zkkget.github.io/2022/03/31/Springboot-netty%E4%BB%BF%E5%BE%AE%E4%BF%A1%E5%AE%9E%E6%88%98%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/</id>
    <published>2022-03-31T09:28:57.000Z</published>
    <updated>2022-03-31T09:46:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>日期：2021-12-28<br>版本号：1.0.0<br>作者：kk</p><p>1   编写目的<br> 1.1    术语与定义<br> 1.2    引用标准和规范<br> 1.3    参考资料<br>2    系统总体框架<br> 2.1    设计目标<br> 2.2    总体技术路线<br> 2.3    架构概览<br> 2.3.1    架构总览图<br> 2.3.2    功能一览图<br>3功能展示</p><p>1.1编写目的</p><p>体验APP通讯,实现聊天功能以及聊天项目的设计思路，选用高性能传输非阻塞的netty框架进行开发,秒级响应</p><p>接入websocket技术应用聊天消息的已读未读，还有聊天消息的测试与联调</p><p>Netty心跳检测机制</p><p>云服务器构建项目，引入CICD，以及Devops构建,接入监控体系，一秒钟定位异常</p><p>针对登陆不同场景，结合桥接模式进行项目改造，代码review<br>1.2 术语与定义<br>Netty：Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients.<br>NLP:自然语言处理(NLP，Natural Language Processing) 是研究人与计算机交互的语言问题的一门学科。按照技术实现难度的不同，这类系统可以分成简单匹配式、模糊匹配式和段落理解式三种类型。<br>推荐系统：帮助用户找到想要的商品</p><p>1.3 引用标准和规范<br>1.阿里巴巴开发规范<br>2.接口使用规范<br>3.开发过程规范<br>4.异常管理规范<br>1.4参考资料<br>《阿里巴巴开发规范》–阿里官方Java代码规范标准<br>Netty实战</p><p>2系统总体框架<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E6%94%B9%E7%AD%BE%E6%B5%81%E7%A8%8Bv1.1%20(1).png" alt="流程"><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E6%B5%81%E7%A8%8Bv1.1.jpg" alt="流程"><br>2.1设计目标<br>目标：旨在模拟微信APP体验实时通讯理念,秒级响应用户请求，由前后端统一处理消息，模拟从登陆/注册-&gt;用户个人信息维护-&gt;交友聊天等主流程。<br>玩转云服务器，从容面对IM聊天业务，延伸场景:自住回复机器人等。<br>技术扩展<br>1.登陆：用户登陆保存用户信息到缓存，以便用户第二次打开app可实现不输入密码登陆，并对密码进行MD5加密。<br>2.登陆时生成全局唯一id，根据id的调用谷歌的com.google.zxing.BarcodeFormat生成个人二维码并进行保存，当加好友，扫一扫时可进行唯一id判断来添加维护好友关系。<br>3.登陆后可进行个人信息维护，角色管理，查看数据，页面配置，黑名单管理等，朋友圈既是一个社区型评论功能化系统，可进行功能复用。<br>4.站在业务角度分析一次聊天事件的流程<br>5.当出现用户群后，根据DSSM模型分析用户行为。<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/dssm.png" alt="流程"><br>6.Netty源码解读<br>7.云服务项目部署<br>2.2总体技术路线<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF.png" alt="流程"><br>2.3系统架构<br>1、以业务分析为输入，以总体的企业应用架构为原则，按着不同区域划分，由于本次基础以聊天业务为入口，侧重点不同，在此不做分析。<br>2、业务可配置性实时变化，引入apollo<br>3、定位用户ip，上传用户真实ip定位用户位置，引入iP2region，举例说明：即为了用户的隐私安全，定位用户的位置，第一时间定位报警用户行为的位置。<br>4、随着公司的业务的不断发展，当基础的系统逐步成型以后。业务运营就需要开始做⽤户的拉新和促活,从⽽保障 DUA 的增速以及最终 ROI 转换<br>3.功能展示<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220110164204.png" alt="流程"><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220110164157.png" alt="流程"><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220110164201.png" alt="流程"><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220110164204.png" alt="流程"><br>4.延伸问题：DSSM(Deep Structured Semantic Models)<br>也叫深度语义匹配模型，最早是微软发表的一篇应用于NLP领域中计算语义相似度任务的文章。深度语义匹配模型当用户量达到一定群体，分析用户行为，精准推送用户广告，喜好分析等成了我们不可或缺的一个话题。通过打标签，关联分组，给不同数据源的关联，这里涉及到两种建模：一种是自然兴趣建模，根据用户操作终端行为获得user-item关联，给不同的数据源打标获得item-tag关联，最后将上面两种关联进行join操作得到user-tag的关联实现给用户打上兴趣标签，这里相当于是从标签维度为广告主推荐人群；另一种就是商业兴趣建模，在自然兴趣建模的基础上，从广告维度为广告主推荐人群，那么就需要目前大火的DSSM双塔模型了。<br>那么平时最多的用户喜好数据来源哪里？<br>1.输入法<br>输入搜素引擎：根据用户的每日输入词都可推算你的历史组词，当然可分析此行为找出关联性最多的词组进行特征分析，将用户标签、用户属性、项目属性、用户操作行为、聚类算法、基于用户、基于项目、基于内容等混合推荐。<br>2.点击日志<br>短视频平台/海量曝光日志，根据用户多次点击的同tag类视频进行爱好分析，比如滑雪视频，你点击一次，首页就会出现多篇推荐，然后在产生一次点击，就会源源不断的进行推荐<br>其实第一次看这篇论文的时候，有点云里雾里，我不得不再次进行阅读，但结合推荐系统来看更容理解，推荐算法大致可以分为以下几类<br>基于流行度的算法<br>协同过滤算法<br>基于内容的算法<br>基于模型的算法<br>混合算法<br>在次就不展开讨论，只个人结合资料查阅，而DSSM更像是在基于模型的基础上，完成推荐任务，跟分治算法，回溯算法等不谋而合<br>5.朋友圈设计：点赞+评论<br>结合社区内容设计，将朋友圈视为新的一个tab展示，并将社区属性的评论与点赞进行集成展示。<br>对于点赞和评论的博文可参考个人公众号文章<br>点赞功能设计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//mp.weixin.qq.com/s?__biz=Mzg2ODA3NjA1MA==&amp;mid=2247484981&amp;idx=1&amp;sn=569bc3d748026dd8c2814e33a3e916d0&amp;chksm=ceb09948f9c7105e203e09e4bb1d30de17bba55a68f7d4df71ccb55c8e34871e2b02b7a1f9ed&amp;token=889485161&amp;lang=zh_CN#rd</span></span><br></pre></td></tr></table></figure><p>本次着重介绍评论系统<br>1.使用递归开发评论功能，并改造为极简循环调用，防止递归层次太深<br>大多数的评论功能可<br>1、单一消息体：分为主评论，然后层级下逐一排列回复，消息体之间一对多<br>2、嵌套消息体：即分为主评论，层级以下可互相回复评论，但展示层级是在同为第二层(着重解释)<br>3、套娃消息体：即可对每条评论进行回复，除主消息体外，都视为第二层，且可对第二层消息体进行回复，每次回复视为一层，消息体为一对多中的多又是一对多~</p><h1 id="单一消息体"><a href="#单一消息体" class="headerlink" title="单一消息体"></a>单一消息体</h1><p>数据库设计：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CREATE TABLE `comment_msg` (</span><br><span class="line">  `id` varchar(<span class="number">64</span>) NOT NULL,</span><br><span class="line">  `send_user_id` varchar(<span class="number">64</span>) NOT NULL,</span><br><span class="line">  `accept_user_id` varchar(<span class="number">64</span>) NOT NULL,</span><br><span class="line">  `msg` varchar(<span class="number">255</span>) NOT NULL,</span><br><span class="line">  `sign_flag` <span class="keyword">int</span>(<span class="number">1</span>) NOT NULL COMMENT <span class="string">&#x27;消息是否签收状态\r\n1：签收\r\n0：未签收\r\n&#x27;</span>,</span><br><span class="line">  `create_time` datetime NOT NULL COMMENT <span class="string">&#x27;发送请求的事件&#x27;</span>,</span><br><span class="line">  <span class="function">PRIMARY <span class="title">KEY</span> <span class="params">(`id`)</span></span></span><br><span class="line"><span class="function">) ENGINE</span>=InnoDB DEFAULT CHARSET=utf8mb4</span><br></pre></td></tr></table></figure><p>即展示所有主题评论下的所有评论即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from comment_msg where send_user_id=#&#123;send_user_id&#125;</span><br></pre></td></tr></table></figure><h1 id="嵌套消息体"><a href="#嵌套消息体" class="headerlink" title="嵌套消息体"></a>嵌套消息体</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;日期：2021-12-28&lt;br&gt;版本号：1.0.0&lt;br&gt;作者：kk&lt;/p&gt;
&lt;p&gt;1   编写目的&lt;br&gt; 1.1    术语与定义&lt;br&gt; 1.2    引用标准和规范&lt;br&gt; 1.3    参考资料&lt;br&gt;2    系统总体框架&lt;br&gt; 2.1    设计目标&lt;br</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>还在手动写单元测试？</title>
    <link href="https://zkkget.github.io/2022/02/07/%E8%BF%98%E5%9C%A8%E6%89%8B%E5%8A%A8%E5%86%99%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://zkkget.github.io/2022/02/07/%E8%BF%98%E5%9C%A8%E6%89%8B%E5%8A%A8%E5%86%99%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</id>
    <published>2022-02-07T06:54:05.000Z</published>
    <updated>2022-02-09T06:04:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JUnitGenerator安装"><a href="#JUnitGenerator安装" class="headerlink" title="JUnitGenerator安装"></a>JUnitGenerator安装</h1><p>在Idea市场里安装JUnitGenerator插件如图，重启后生效<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/junit1.png" alt="流程"></p><h1 id="设置生成路径及模板"><a href="#设置生成路径及模板" class="headerlink" title="设置生成路径及模板"></a>设置生成路径及模板</h1><p>Output Path: ${SOURCEPATH}/..//../test/java/${PACKAGE}/${FILENAME}<br>注：根据实际项目结构调整，设置为默认模板，另需要在Project Structure–&gt;Modules中设置Test文件目录，可改造为自启动，随容器启动，<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/junit2.png" alt="流程"></p><h1 id="设置Junit4-生成模板"><a href="#设置Junit4-生成模板" class="headerlink" title="设置Junit4 生成模板"></a>设置Junit4 生成模板</h1><p>支持 CommonResponse 或  Wrapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">#macro (cap $strIn)$strIn.valueOf($strIn.charAt(<span class="number">0</span>)).toUpperCase()$strIn.substring(<span class="number">1</span>)#end </span><br><span class="line">#foreach ($entry in $entryList) </span><br><span class="line">#set( $testClass=<span class="string">&quot;$&#123;entry.className&#125;Test&quot;</span>) </span><br><span class="line"><span class="keyword">package</span> $entry.packageName; </span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test; </span><br><span class="line"><span class="keyword">import</span> org.junit.Before; </span><br><span class="line"><span class="keyword">import</span> org.junit.After; </span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BSF+Junit4</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Creator</span> zhaokk</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateDate</span> $&#123;Date&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DESC</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $<span class="title">testClass</span> </span>&#123; </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">final</span> String ipAndPort=<span class="string">&quot;localhost:8080/&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String token=<span class="string">&quot;login-token&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String extend = <span class="string">&quot;extend&quot;</span>;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HttpHeaders requestHeaders;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        requestHeaders = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        requestHeaders.add(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">        requestHeaders.add(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        JunitUtils.setRequestHeaders(requestHeaders);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#foreach($method in $entry.methodList) </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * Method: $method.signature </span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> test#cap($&#123;method.name&#125;)() <span class="keyword">throws</span> Exception &#123; </span><br><span class="line">        <span class="comment">//Make request</span></span><br><span class="line">        TestEntity testEntity=JunitUtils.checkRequest(ipAndPort,token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Show Controller &amp; Mehtod</span></span><br><span class="line">        <span class="comment">//FIXME new $entry.packageName.$&#123;entry.className&#125;().$&#123;method.name&#125;();</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Model 1 (Parameter is url)</span></span><br><span class="line">        <span class="comment">//Map&lt;String,String&gt; objectRequest=new HashMap();</span></span><br><span class="line">        <span class="comment">//objectRequest.put(&quot;&#123;id&#125;&quot;,&quot;1000000157729&quot;);</span></span><br><span class="line">        <span class="comment">//testEntity.setRequestObj(objectRequest);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Model 2 (Parameter is Object)</span></span><br><span class="line">        <span class="comment">//UserLoginReq objectRequest = new UserLoginReq();//JSON.parseObject(&quot;jsonString&quot;,UserLoginReq.class)</span></span><br><span class="line">        <span class="comment">//objectRequest.setUsername(&quot;18311140968&quot;);</span></span><br><span class="line">        <span class="comment">//objectRequest.setPassword(&quot;aa123456&quot;);</span></span><br><span class="line">        <span class="comment">//testEntity.setRequestObj(objectRequest);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Model 3 (Parameter is url &amp; Object)</span></span><br><span class="line">        <span class="comment">//Map&lt;String,String&gt; urlMap=new HashMap();</span></span><br><span class="line">        <span class="comment">//urlMap.put(&quot;&#123;pageNo&#125;&quot;,&quot;1&quot;);</span></span><br><span class="line">        <span class="comment">//urlMap.put(&quot;&#123;pageSize&#125;&quot;,&quot;10&quot;);</span></span><br><span class="line"><span class="comment">//UserLoginReq objectRequest = new UserLoginReq();//JSON.parseObject(&quot;jsonString&quot;,UserLoginReq.class)</span></span><br><span class="line">        <span class="comment">//objectRequest.setUsername(&quot;18311140968&quot;);</span></span><br><span class="line">        <span class="comment">//objectRequest.setPassword(&quot;aa123456&quot;);</span></span><br><span class="line">        <span class="comment">//testEntity.setRequestObj(objectRequest);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//model 1  and model 2 (ResponseEntity)</span></span><br><span class="line">        ResponseEntity&lt;CommonResponse&gt; responseResponseEntity=JunitUtils.getResponseEntity(testEntity);</span><br><span class="line"></span><br><span class="line"><span class="comment">//model 3 (ResponseEntity)</span></span><br><span class="line">        <span class="comment">//ResponseEntity&lt;CommonResponse&gt; responseResponseEntity=JunitUtils.getResponseEntity(urlMap,testEntity);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//ResponseEntity To Object</span></span><br><span class="line">        <span class="comment">//CommonResponse&lt;UserResp&gt; response = responseResponseEntity.getBody();</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Check CommonResponse code is 200000</span></span><br><span class="line">        JunitUtils.checkResponse(responseResponseEntity.getBody());</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">#end </span><br><span class="line"></span><br><span class="line">#foreach($method in $entry.privateMethodList) </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* Method: $method.signature </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> test#cap($&#123;method.name&#125;)() <span class="keyword">throws</span> Exception &#123; </span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> Test goes here... </span></span><br><span class="line">#foreach($string in $method.reflectionCode) </span><br><span class="line">$string </span><br><span class="line">#end </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">#end </span><br><span class="line">&#125; </span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">代码块<span class="number">1</span>：根据ipAndPort和token 拼装基础的URL和请求头</span><br><span class="line">代码块<span class="number">2</span>：工具块，方便快速跳转到本方法的源头</span><br><span class="line">代码块<span class="number">3</span>：模式<span class="number">1</span>参数封装，一般用于GET 和DELETE 请求，纯URL</span><br><span class="line">代码块<span class="number">4</span>：模式<span class="number">2</span>参数封装，一般用于POST和PUT 请求，纯对象。支持Json字符串，如下：</span><br><span class="line">         UpdateUserByPKReq objectRequest = JunitUtils.jsonToObject(<span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;接口测试-勿删\&quot;,\&quot;userNumber\&quot;:\&quot;1573195928331\&quot;&quot;</span>,UpdateUserByPKReq.class);</span><br><span class="line">          </span><br><span class="line">代码块<span class="number">5</span>：模式<span class="number">1</span>和模式<span class="number">2</span>的组合，拼装URL+对象</span><br><span class="line">代码块<span class="number">6</span>：适用于模式<span class="number">1</span>和模式<span class="number">2</span>，进行具体的请求并获得响应结果</span><br><span class="line">代码块<span class="number">7</span>：适用于模式<span class="number">3</span>，进行具体的请求并获得响应结果</span><br><span class="line">代码块<span class="number">8</span>：检查响应结果，默认<span class="number">200000</span>为成功，如果非<span class="number">200000</span>失败。如有多个状态码均为成功，可以增加成功状态码进行入参，</span><br><span class="line">         如下：JunitUtils.checkResponse(responseResponseEntity.getBody(),<span class="number">600220</span>)</span><br></pre></td></tr></table></figure><p>这里可自行改造为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaokk</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> $&#123;Date&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = com.xxx.class)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line">workspace.xml中加入</span><br><span class="line">&lt;component name=<span class="string">&quot;PropertiesComponent&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;dynamic.classpath&quot;</span> value=<span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line">&lt;!--  --&gt;</span><br></pre></td></tr></table></figure><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/junit3.png" alt="流程"></p><h1 id="不知道大家有没有用有道云笔记的没有，经常性的新打开的笔记会在首行，但除了阅读之外，应该在最后一行继续编辑，所有大多情况下需要鼠标滑动到行尾，搜索过很多方法，不如Ctrl-A，然后→右箭头好用。mark"><a href="#不知道大家有没有用有道云笔记的没有，经常性的新打开的笔记会在首行，但除了阅读之外，应该在最后一行继续编辑，所有大多情况下需要鼠标滑动到行尾，搜索过很多方法，不如Ctrl-A，然后→右箭头好用。mark" class="headerlink" title="不知道大家有没有用有道云笔记的没有，经常性的新打开的笔记会在首行，但除了阅读之外，应该在最后一行继续编辑，所有大多情况下需要鼠标滑动到行尾，搜索过很多方法，不如Ctrl+A，然后→右箭头好用。mark"></a>不知道大家有没有用有道云笔记的没有，经常性的新打开的笔记会在首行，但除了阅读之外，应该在最后一行继续编辑，所有大多情况下需要鼠标滑动到行尾，搜索过很多方法，不如Ctrl+A，然后→右箭头好用。mark</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JUnitGenerator安装&quot;&gt;&lt;a href=&quot;#JUnitGenerator安装&quot; class=&quot;headerlink&quot; title=&quot;JUnitGenerator安装&quot;&gt;&lt;/a&gt;JUnitGenerator安装&lt;/h1&gt;&lt;p&gt;在Idea市场里安装JUni</summary>
      
    
    
    
    
    <category term="JunitTest" scheme="https://zkkget.github.io/tags/JunitTest/"/>
    
  </entry>
  
  <entry>
    <title>【置顶】强大的Servlet</title>
    <link href="https://zkkget.github.io/2022/01/27/[%E7%BD%AE%E9%A1%B6]Springboot%E4%B9%8B---%E5%BC%BA%E5%A4%A7%E7%9A%84Servlet/"/>
    <id>https://zkkget.github.io/2022/01/27/[%E7%BD%AE%E9%A1%B6]Springboot%E4%B9%8B---%E5%BC%BA%E5%A4%A7%E7%9A%84Servlet/</id>
    <published>2022-01-27T01:45:49.000Z</published>
    <updated>2022-07-25T08:06:30.174Z</updated>
    
    <content type="html"><![CDATA[<h4 id="If-I-have-seen-further-it-is-by-standing-on-the-shoulders-of-giants"><a href="#If-I-have-seen-further-it-is-by-standing-on-the-shoulders-of-giants" class="headerlink" title="If I have seen further, it is by standing on the shoulders of giants"></a>If I have seen further, it is by standing on the shoulders of giants</h4><h4 id="如果我比别人看得更远，那是因为我站在巨人的肩膀上"><a href="#如果我比别人看得更远，那是因为我站在巨人的肩膀上" class="headerlink" title="如果我比别人看得更远，那是因为我站在巨人的肩膀上"></a>如果我比别人看得更远，那是因为我站在巨人的肩膀上</h4><h3 id="如今回头看下Servlet不仅如此强大，还具有很强烈的参考意义，能在现如今流行的大部分框架中找到它的影子。下面文章不止与探索Servlet，可能在其中穿插其他的关联知识点，旨在能从此次的学习中获取更多的知识点参考资料总结，转化为自己的理解输出-在文中我尽量以截图-复制全限定类名的方式记录，以便感兴趣的再次查找。"><a href="#如今回头看下Servlet不仅如此强大，还具有很强烈的参考意义，能在现如今流行的大部分框架中找到它的影子。下面文章不止与探索Servlet，可能在其中穿插其他的关联知识点，旨在能从此次的学习中获取更多的知识点参考资料总结，转化为自己的理解输出-在文中我尽量以截图-复制全限定类名的方式记录，以便感兴趣的再次查找。" class="headerlink" title="如今回头看下Servlet不仅如此强大，还具有很强烈的参考意义，能在现如今流行的大部分框架中找到它的影子。下面文章不止与探索Servlet，可能在其中穿插其他的关联知识点，旨在能从此次的学习中获取更多的知识点参考资料总结，转化为自己的理解输出,在文中我尽量以截图+复制全限定类名的方式记录，以便感兴趣的再次查找。"></a>如今回头看下Servlet不仅如此强大，还具有很强烈的参考意义，能在现如今流行的大部分框架中找到它的影子。下面文章不止与探索Servlet，可能在其中穿插其他的关联知识点，旨在能从此次的学习中获取更多的知识点参考资料总结，转化为自己的理解输出,在文中我尽量以截图+复制全限定类名的方式记录，以便感兴趣的再次查找。</h3><h2 id="Springboot与Servlet"><a href="#Springboot与Servlet" class="headerlink" title="Springboot与Servlet"></a>Springboot与Servlet</h2><p>在springboot中内嵌了Tomcat容器，而Tomcat又是Servlet的容器，Springboot就与Servlet产生了紧密的联系。<br>在分析各个类时，注意下每个类所在的包是如何在tomcat与boot之间跨越的~</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>1、初始化<br>2、处理请求<br>3、销毁<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/servlet.png" alt="流程"></p><h3 id="应用上下文"><a href="#应用上下文" class="headerlink" title="应用上下文"></a>应用上下文</h3><p>应用上下文即可看做：一次请求到达，到响应结束的过程中间的catlog，即阅读中结合上下文语境，是一个广义定义。<br>为什么说到上下文呢？来看下ServletContext的实现，第一个经典实现既是ApplicationContext我们不止在一次源码和应用中见到它，另外加载器目前有两种选择：ContextLoaderListener和ContextLoaderServlet。其功能是完全相同。会在下文进行介绍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Standard implementation of &lt;code&gt;ServletContext&lt;/code&gt; that represents</span></span><br><span class="line"><span class="comment"> * a web application&#x27;s execution environment.  An instance of this class is</span></span><br><span class="line"><span class="comment"> * associated with each instance of &lt;code&gt;StandardContext&lt;/code&gt;.</span></span><br><span class="line"><span class="comment"> * 代表web应用程序的执行环境。这个类的一个实例是</span></span><br><span class="line"><span class="comment"> *与StandardContext的每个实例关联。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Craig R. McClanahan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Remy Maucherat</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContext</span> <span class="keyword">implements</span> <span class="title">ServletContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> STRICT_SERVLET_COMPLIANCE;<span class="comment">///翻译为是否严格遵守</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> GET_RESOURCE_REQUIRE_SLASH;<span class="comment">//我的蹩脚英语翻译为获取资源是否需要斜线。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        STRICT_SERVLET_COMPLIANCE = Globals.STRICT_SERVLET_COMPLIANCE;</span><br><span class="line"></span><br><span class="line">        String requireSlash = System.getProperty(<span class="string">&quot;org.apache.catalina.core.ApplicationContext.GET_RESOURCE_REQUIRE_SLASH&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (requireSlash == <span class="keyword">null</span>) &#123;</span><br><span class="line">            GET_RESOURCE_REQUIRE_SLASH = STRICT_SERVLET_COMPLIANCE;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            GET_RESOURCE_REQUIRE_SLASH = Boolean.parseBoolean(requireSlash);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注：特别重要上述配置为tomcat中第一个开关配置，决定多个属性的值。来自于下面的Globals.STRICT_SERVLET_COMPLIANCE;默认为false<br>验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> STRICT_SERVLET_COMPLIANCE =Boolean.parseBoolean(System.getProperty(<span class="string">&quot;org.apache.catalina.STRICT_SERVLET_COMPLIANCE&quot;</span>, <span class="string">&quot;false&quot;</span>));</span><br></pre></td></tr></table></figure><p>和官网截图<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/compliance.png" alt="流程"><br>问题:会因为tomcat的版本配置不同改变此值，在8.5.57当中会改变为true，当cantroller中配置多个映射路径会出现访问不到的问题<br>此处参考博文：<a href="https://blog.csdn.net/xing930408/article/details/111225064">https://blog.csdn.net/xing930408/article/details/111225064</a><br>Tomcat文档：<a href="https://tomcat.apache.org/tomcat-8.5-doc/config/systemprops.html">https://tomcat.apache.org/tomcat-8.5-doc/config/systemprops.html</a><br>而GET_RESOURCE_REQUIRE_SLASH直接赋值为STRICT_SERVLET_COMPLIANCE</p><h3 id="Servlet与HttpServlet"><a href="#Servlet与HttpServlet" class="headerlink" title="Servlet与HttpServlet"></a>Servlet与HttpServlet</h3><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/servlet%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="流程"><br>类图标明很是明显，在这个图中展示了servlet，tomcat，Springboot的关系，完美解释了那句Springboot是内嵌了tomcat的嵌入式引擎，嵌入式容器的说法~</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">而HttpServlet即是大部分请求的处理对象，嵌入式引擎----嵌入式容器----  webfilter ---weblistener</span><br><span class="line">javax.servlet.ServletContext#addServlet(java.lang.String, java.lang.Class&lt;? extends javax.servlet.Servlet&gt;)返回一个ServletRegistration对象，可用于进一步</span><br><span class="line">配置已注册的servlet</span><br><span class="line">javax.servlet.ServletRegistration</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServletRegistration</span> <span class="keyword">extends</span> <span class="title">Registration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TODO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urlPatterns The URL patterns that this Servlet should be mapped to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> TODO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if urlPattern is null or empty</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalStateException if the associated ServletContext has</span></span><br><span class="line"><span class="comment">     *                                  already been initialised</span></span><br><span class="line"><span class="comment">     */</span>URL必须映射</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">addMapping</span><span class="params">(String... urlPatterns)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">getMappings</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRunAsRole</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">Dynamic</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">ServletRegistration</span>, <span class="title">Registration</span>.<span class="title">Dynamic</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoadOnStartup</span><span class="params">(<span class="keyword">int</span> loadOnStartup)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">setServletSecurity</span><span class="params">(ServletSecurityElement constraint)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMultipartConfig</span><span class="params">(MultipartConfigElement multipartConfig)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRunAsRole</span><span class="params">(String roleName)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>思考：为什么Applacationcontext会有那么多重载方法？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> ServletRegistration.<span class="function">Dynamic <span class="title">addServlet</span><span class="params">(String servletName, String className)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> addServlet(servletName, className, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> ServletRegistration.<span class="function">Dynamic <span class="title">addServlet</span><span class="params">(String servletName, Servlet servlet)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> addServlet(servletName, <span class="keyword">null</span>, servlet, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> ServletRegistration.<span class="function">Dynamic <span class="title">addServlet</span><span class="params">(String servletName,</span></span></span><br><span class="line"><span class="params"><span class="function">           Class&lt;? extends Servlet&gt; servletClass)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> addServlet(servletName, servletClass.getName(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>–用在不同场景下解决同一类问题<br>而在HttpServlet中的关键方法service可看到平时请求接口的所有方法<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/servlet-service.png" alt="流程"><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/service-post.png" alt="流程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_DELETE = <span class="string">&quot;DELETE&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_HEAD = <span class="string">&quot;HEAD&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_GET = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_OPTIONS = <span class="string">&quot;OPTIONS&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_POST = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_PUT = <span class="string">&quot;PUT&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_TRACE = <span class="string">&quot;TRACE&quot;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String method = req.getMethod();</span><br><span class="line">        <span class="comment">//GET</span></span><br><span class="line">        <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">            <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">            <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// servlet doesn&#x27;t support if-modified-since, no reason</span></span><br><span class="line">                <span class="comment">// to go through further expensive logic</span></span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">                <span class="keyword">if</span> (ifModifiedSince &lt; lastModified) &#123;</span><br><span class="line">                    <span class="comment">// If the servlet mod time is later, call doGet()</span></span><br><span class="line">                    <span class="comment">// Round down to the nearest second for a proper compare</span></span><br><span class="line">                    <span class="comment">// A ifModifiedSince of -1 will always be less</span></span><br><span class="line">                    maybeSetLastModified(resp, lastModified);</span><br><span class="line">                    doGet(req, resp);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">            <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">            maybeSetLastModified(resp, lastModified);</span><br><span class="line">            doHead(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">            doPost(req, resp);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">            doPut(req, resp);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">            doDelete(req, resp);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">            doOptions(req,resp);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">            doTrace(req,resp);</span><br><span class="line">            <span class="comment">//There&#x27;s no need to override this method. 没有必要~</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// Note that this means NO servlet supports whatever</span></span><br><span class="line">            <span class="comment">// method was requested, anywhere on this server.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            String errMsg = lStrings.getString(<span class="string">&quot;http.method_not_implemented&quot;</span>);</span><br><span class="line">            Object[] errArgs = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">            errArgs[<span class="number">0</span>] = method;</span><br><span class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line">            </span><br><span class="line">            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    String protocol = req.getProtocol();</span><br><span class="line">    String msg = lStrings.getString(<span class="string">&quot;http.method_post_not_supported&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (protocol.endsWith(<span class="string">&quot;1.1&quot;</span>)) &#123;</span><br><span class="line">        resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：在javaHttpServlet中，与Tomcat中的dopost方法如出一辙</p><p>真正的调用链(妥妥的责任链模式)是<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/HTTP%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B.jpg" alt="流程"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Tomcat与SpringMVC的结合点：ApplicationFilterChain与DispatcherServlet（继承于FrameworkServlet）；</span><br><span class="line">（1）所有配置了路由信息的处理方法最终都是通过反射的方式进行调用的；</span><br><span class="line">（2）在Java8中，反射方法调用最终落脚于NativeMethodAccessorImpl类的native方法：</span><br><span class="line">private static native Object invoke0(Method var0, Object var1, Object[] var2);</span><br><span class="line">在此处与JVM底层交互，实现跨代码衔接执行；</span><br><span class="line">（3）观察到的比较重要的设计模式：职责链模式（ApplicationFilterChain）、委派模式（DelegatingFilterProxy）、</span><br><span class="line">工厂模式、策略模式、代理模式（FilterChainProxy）、外观模式、适配器模式（HandlerAdapter）；</span><br><span class="line">（4）Tomcat与SpringMVC的结合点：ApplicationFilterChain与DispatcherServlet（继承于FrameworkServlet）；</span><br><span class="line">（5）在集成了Tomcat的SpringBoot项目中，先启动的不是Tomcat，而是Spring，Spring的工厂（默认DefaultListableBeanFactory）</span><br><span class="line">读取注解完成各类Bean（WebApplicationContext、securityFilterChainRegistration、dispatcherServletRegistration、各类FilterInitializer与Filter）</span><br><span class="line">的初始化，放入IoC容器，然后做路由Mapping，创建FilterChain，开启JMX等；</span><br><span class="line">（6）Servlet、Filter是单实例多线程的，成员变量线程不安全，方法内局部变量线程安全；SingleThreadModel采用同步/实例池的方式来确保不会有两个线程同时执行servlet的service方法，但已被弃用，需自行确保成员变量线程安全；</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「wanxu12345678910」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https://blog.csdn.net/wanxu12345678910/article/details/83352371</span><br></pre></td></tr></table></figure><p>ContextLoaderServlet与下文中的ContextLoaderListener功能完全相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">         &lt;servlet-name&gt;context&lt;/servlet-name&gt;</span><br><span class="line">         &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;</span></span><br><span class="line"><span class="class">           <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderServlet</span></span></span><br><span class="line"><span class="class">         &lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">         &lt;<span class="title">load</span>-<span class="title">on</span>-<span class="title">startup</span>&gt;1&lt;/<span class="title">load</span>-<span class="title">on</span>-<span class="title">startup</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt; </span></span><br></pre></td></tr></table></figure><h3 id="HttpServletResponse响应码"><a href="#HttpServletResponse响应码" class="headerlink" title="HttpServletResponse响应码"></a>HttpServletResponse响应码</h3><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/statusCode.png" alt="流程"></p><h4 id="监听器：-实现接口、标记"><a href="#监听器：-实现接口、标记" class="headerlink" title="监听器：   实现接口、标记"></a>监听器：   实现接口、标记</h4><p>比如MQ，观察者模式，所有的时间监听都会继承  extend   java.util.EventListener接口，但里面什么都没有<br>，称之为mark接口，经典实现：ContextLoaderListener、RequestContextListener(重要)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A tagging interface that all event listener interfaces must extend.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/listener.png" alt="流程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bootstrap listener to start up and shut down Spring&#x27;s root &#123;<span class="doctag">@link</span> WebApplicationContext&#125;.</span></span><br><span class="line"><span class="comment"> * Simply delegates to &#123;<span class="doctag">@link</span> ContextLoader&#125; as well as to &#123;<span class="doctag">@link</span> ContextCleanupListener&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;As of Spring 3.1, &#123;<span class="doctag">@code</span> ContextLoaderListener&#125; supports injecting the root web</span></span><br><span class="line"><span class="comment"> * application context via the &#123;<span class="doctag">@link</span> #ContextLoaderListener(WebApplicationContext)&#125;</span></span><br><span class="line"><span class="comment"> * constructor, allowing for programmatic configuration in Servlet 3.0+ environments.</span></span><br><span class="line"><span class="comment"> * See &#123;<span class="doctag">@link</span> org.springframework.web.WebApplicationInitializer&#125; for usage examples.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chris Beams</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 17.02.2003</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setContextInitializers</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.WebApplicationInitializer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextLoaderListener</span> <span class="keyword">extends</span> <span class="title">ContextLoader</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>见名知意既然包含contextLoader必然跟上线文息息相关，在初始化容器时加载配置~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent requestEvent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(requestEvent.getServletRequest() <span class="keyword">instanceof</span> HttpServletRequest)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">&quot;Request is not an HttpServletRequest: &quot;</span> + requestEvent.getServletRequest());</span><br><span class="line">        &#125;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) requestEvent.getServletRequest();</span><br><span class="line">        ServletRequestAttributes attributes = <span class="keyword">new</span> ServletRequestAttributes(request);</span><br><span class="line">        request.setAttribute(REQUEST_ATTRIBUTES_ATTRIBUTE, attributes);</span><br><span class="line">        <span class="comment">//将请求对象放入ThreadLocal中</span></span><br><span class="line">        LocaleContextHolder.setLocale(request.getLocale());</span><br><span class="line">        RequestContextHolder.setRequestAttributes(attributes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color='red'> 重要：Servlet在同一个线程中，当初始化时放到对象里，当请求销毁时，自动将Threadlocal对象销毁，防止了内存泄漏的问题 </font><br>当有请求到达时，会从线程池中取出一个线程来执行任务，执行完毕后再将线程回收至线程池,这样当前请求不可能拿到上一个请求保存在ThreadLocal对象里的值<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/Threadlocal.png" alt="流程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent requestEvent)</span> </span>&#123;</span><br><span class="line">        ServletRequestAttributes attributes = <span class="keyword">null</span>;</span><br><span class="line">        Object reqAttr = requestEvent.getServletRequest().getAttribute(REQUEST_ATTRIBUTES_ATTRIBUTE);</span><br><span class="line">        <span class="keyword">if</span> (reqAttr <span class="keyword">instanceof</span> ServletRequestAttributes) &#123;</span><br><span class="line">            attributes = (ServletRequestAttributes) reqAttr;</span><br><span class="line">        &#125;</span><br><span class="line">        RequestAttributes threadAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="keyword">if</span> (threadAttributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// We&#x27;re assumably within the original request thread...</span></span><br><span class="line">            LocaleContextHolder.resetLocaleContext();</span><br><span class="line">            RequestContextHolder.resetRequestAttributes();</span><br><span class="line">            <span class="keyword">if</span> (attributes == <span class="keyword">null</span> &amp;&amp; threadAttributes <span class="keyword">instanceof</span> ServletRequestAttributes) &#123;</span><br><span class="line">                attributes = (ServletRequestAttributes) threadAttributes;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (attributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            attributes.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/ThreadLocalremove.png" alt="流程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bootstrap listener to start up and shut down Spring&#x27;s root &#123;<span class="doctag">@link</span> WebApplicationContext&#125;.</span></span><br><span class="line"><span class="comment"> * Simply delegates to &#123;<span class="doctag">@link</span> ContextLoader&#125; as well as to &#123;<span class="doctag">@link</span> ContextCleanupListener&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;As of Spring 3.1, &#123;<span class="doctag">@code</span> ContextLoaderListener&#125; supports injecting the root web</span></span><br><span class="line"><span class="comment"> * application context via the &#123;<span class="doctag">@link</span> #ContextLoaderListener(WebApplicationContext)&#125;</span></span><br><span class="line"><span class="comment"> * constructor, allowing for programmatic configuration in Servlet 3.0+ environments.</span></span><br><span class="line"><span class="comment"> * See &#123;<span class="doctag">@link</span> org.springframework.web.WebApplicationInitializer&#125; for usage examples.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chris Beams</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 17.02.2003</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setContextInitializers</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.WebApplicationInitializer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextLoaderListener</span> <span class="keyword">extends</span> <span class="title">ContextLoader</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插播一句：在书写过程中发现某URL响应变慢，在分析SQL时，用到了in查询，执行分析计划用到了索引</p><h2 id="Servlet-on-Springboot"><a href="#Servlet-on-Springboot" class="headerlink" title="Servlet on Springboot"></a>Servlet on Springboot</h2><h4 id="组件声明注解："><a href="#组件声明注解：" class="headerlink" title="组件声明注解："></a>组件声明注解：</h4><p>servletContext—ApplicationContext</p><h3 id="组件扫描：ServletComponentScan"><a href="#组件扫描：ServletComponentScan" class="headerlink" title="组件扫描：ServletComponentScan"></a>组件扫描：ServletComponentScan</h3><p>熟悉波~ 是不是应用跟Springboot的@ComponentScan如出一辙</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(ServletComponentScanRegistrar.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ServletComponentScan &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Alias for the &#123;<span class="doctag">@link</span> #basePackages()&#125; attribute. Allows for more concise annotation</span></span><br><span class="line"><span class="comment">     * declarations e.g.: &#123;<span class="doctag">@code</span> <span class="doctag">@ServletComponentScan</span>(&quot;org.my.pkg&quot;)&#125; instead of</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> <span class="doctag">@ServletComponentScan</span>(basePackages=&quot;org.my.pkg&quot;)&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the base packages to scan</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor(&quot;basePackages&quot;)</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Base packages to scan for annotated servlet components. &#123;<span class="doctag">@link</span> #value()&#125; is an</span></span><br><span class="line"><span class="comment">     * alias for (and mutually exclusive with) this attribute.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Use &#123;<span class="doctag">@link</span> #basePackageClasses()&#125; for a type-safe alternative to String-based</span></span><br><span class="line"><span class="comment">     * package names.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the base packages to scan</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">    String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Type-safe alternative to &#123;<span class="doctag">@link</span> #basePackages()&#125; for specifying the packages to</span></span><br><span class="line"><span class="comment">     * scan for annotated servlet components. The package of each class specified will be</span></span><br><span class="line"><span class="comment">     * scanned.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> classes from the base packages to scan</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置声明：@interface  暴露SpringBean @Bean<br>事件：Event</p><h4 id="filter："><a href="#filter：" class="headerlink" title="filter："></a>filter：</h4><p>webFilter<br>OncePerRequestFilter：只调用一次且是线程安全的<br>而其子类得ApplicationContextHeaderFilter调用的dofilter方法就是我们上面提到的真正在请求中执行的filter</p><h3 id="激活Springbootweb"><a href="#激活Springbootweb" class="headerlink" title="激活Springbootweb"></a>激活Springbootweb</h3><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/oncePerRequestFilter.png" alt="流程"></p><p>文无第一，武无第二，没有最好的技术框架或体系，只有最适合当下业务的框架或体系<br>谈谈你对技术的理解：天上飞的理念，必定有落地的实现</p><h3 id="组装SpringApplicationBuilder"><a href="#组装SpringApplicationBuilder" class="headerlink" title="组装SpringApplicationBuilder"></a>组装SpringApplicationBuilder</h3><p>你看看这名字就知道他以后干啥的，并且它包含了太多太多的东西,<br>SpringApplication和ApplicationContext实例的生成器,基本包含了所有的SpringbootApplacation特性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SpringApplication application;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ConfigurableApplicationContext context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SpringApplicationBuilder parent;</span><br><span class="line">AtomicBoolean是不是的看看</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicBoolean running = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Class&lt;?&gt;&gt; sources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; defaultProperties = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ConfigurableEnvironment environment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; additionalProfiles = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> registerShutdownHookApplied;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> configuredAsChild = <span class="keyword">false</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProfiles</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">new</span> SpringApplicationBuilder(TestProfiles.class)</span><br><span class="line">                .properties(<span class="string">&quot;spring.config.location=classpath:/test-profiles.yml&quot;</span>)</span><br><span class="line">                .properties(<span class="string">&quot;spring.profiles.active=oracle&quot;</span>)</span><br><span class="line">                .run(args);</span><br><span class="line">        <span class="comment">// 输出变量</span></span><br><span class="line">        System.out.println(context.getEnvironment().getProperty(<span class="string">&quot;jdbc.driver&quot;</span>));</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 启动第二个Spring容器，指定端口为8848</span></span><br><span class="line">        ConfigurableApplicationContext context2 = <span class="keyword">new</span> SpringApplicationBuilder(TestProfiles.class)</span><br><span class="line">                .properties(<span class="string">&quot;spring.config.location=classpath:/test-profiles.yml&quot;</span>)</span><br><span class="line">                .properties(<span class="string">&quot;spring.profiles.active=mysql&quot;</span>)</span><br><span class="line">                .properties(<span class="string">&quot;server.port=8848&quot;</span>)</span><br><span class="line">                .run(args);</span><br><span class="line">        <span class="comment">// 输出变量</span></span><br><span class="line">        System.out.println(context2.getEnvironment().getProperty(<span class="string">&quot;jdbc.driver&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Springboot自动装配<br>/META-INF/spring.factories<br>XXXAotuConfigration<br>NIO不是异步IO而是非阻塞IO<br>java9推崇模块化</p><p>ClassLoader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(contextClassLoader.getClass().getName());</span><br><span class="line">        ClassLoader parent = contextClassLoader.getParent();</span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">    System.out.println(systemClassLoader.getClass().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>update_time =2022年2月14日13:48:19</p><h2 id="传统的Servlet容器-Apache-Tomcat"><a href="#传统的Servlet容器-Apache-Tomcat" class="headerlink" title="传统的Servlet容器 Apache Tomcat"></a>传统的Servlet容器 Apache Tomcat</h2><p>这里只记录了部分重要场景<br>包含核心组件<br>静态资源处理<br>类加载<br>连接器<br>JDBC数据源</p><h2 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h2><p>javax.servlet.http.HttpServletResponse</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(contextClassLoader.getClass().getName());</span><br><span class="line">        ClassLoader parent = contextClassLoader.getParent();</span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">    System.out.println(systemClassLoader.getClass().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了其中的状态码之外，结合最近的测试其中的实现可具体参考<br>addHeader方法，getHeader方法等等<br>BootStrap–system—common—webapp</p><h2 id="静态资源处理类org-apache-catalina-servlets-DefaultServlet"><a href="#静态资源处理类org-apache-catalina-servlets-DefaultServlet" class="headerlink" title="静态资源处理类org.apache.catalina.servlets.DefaultServlet"></a>静态资源处理类org.apache.catalina.servlets.DefaultServlet</h2><p>注意下包名</p><p>大多数情况下我们关注的更多是server.xml中Tomcat的配置，而在web.xml中除了路径映射等配置外</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- The mapping <span class="keyword">for</span> the <span class="keyword">default</span> servlet --&gt;</span><br><span class="line">   &lt;servlet-mapping&gt;</span><br><span class="line">       &lt;servlet-name&gt;<span class="keyword">default</span>&lt;/servlet-name&gt;</span><br><span class="line">       &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">   &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- The mappings <span class="keyword">for</span> the JSP servlet --&gt;</span><br><span class="line">   &lt;servlet-mapping&gt;</span><br><span class="line">       &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;</span><br><span class="line">       &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;</span><br><span class="line">       &lt;url-pattern&gt;*.jspx&lt;/url-pattern&gt;</span><br><span class="line">   &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>关于是否是开发模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--   development         Is Jasper used in development mode? If <span class="keyword">true</span>,   --&gt;</span><br><span class="line"> &lt;!--                       the frequency at which JSPs are checked <span class="keyword">for</span>    --&gt;</span><br><span class="line"> &lt;!--                       modification may be specified via the          --&gt;</span><br><span class="line"> &lt;!--                       modificationTestInterval parameter. [<span class="keyword">true</span>]     --&gt;</span><br></pre></td></tr></table></figure><p>由于DefaultServlet是HttpServlet的子类，所以在此不展开讨论<br>而在server.xml中标签与后台接口是一一绑定的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=<span class="string">&quot;8080&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span> connectionTimeout=<span class="string">&quot;20000&quot;</span> redirectPort=<span class="string">&quot;8443&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>而在JDBC中的大多数类中也遵循此规则，那么就上面这段分析标签Connector则对应<br>org.apache.catalina.connector.Connector，验证一下标签中对应protocol,connectionTimeout,redirectPort<br>其中标签对应部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Defaults to using HTTP/1.1 NIO implementation.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Connector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>而在tomcat8.0+中getProtocol对应protocol<br>redirectPort对应属性默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The redirect port for non-SSL to SSL redirects.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> redirectPort = <span class="number">443</span>;</span><br></pre></td></tr></table></figure><p>关于标签中connector中这个Http11NioProtocol则在tomcat官方文档中可见其中一句话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">When using HTTP connectors (based on APR or NIO/NIO2), Tomcat supports using sendfile to send large static files. These writes, as soon as the system load increases, will be performed asynchronously in the most efficient way. Instead of sending a large response using blocking writes, it is possible to write content to a static file, and write it using a sendfile code. A caching valve could take advantage of this to cache the response data in a file rather than store it in memory. Sendfile support is available if the request attribute org.apache.tomcat.sendfile.support is set to Boolean.TRUE</span><br></pre></td></tr></table></figure><p>也可在server.xml中搜索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    &lt;Connector protocol=&quot;AJP/1.3&quot;</span><br><span class="line">               address=&quot;::1&quot;</span><br><span class="line">               port=&quot;8009&quot;</span><br><span class="line">               redirectPort=&quot;8443&quot; /&gt;</span><br><span class="line">    --&gt;</span><br></pre></td></tr></table></figure><p>server.port在文件中的位置</p><!-- {      "name": "server.port",      "type": "java.lang.Integer",      "description": "Server HTTP port.",      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",      "defaultValue": 8080    }, --><h2 id="重点来了-ServerProperties包含了tomcat-Jetty-Undertow-而在Springboot2-2-6中则存在Netty"><a href="#重点来了-ServerProperties包含了tomcat-Jetty-Undertow-而在Springboot2-2-6中则存在Netty" class="headerlink" title="重点来了 ServerProperties包含了tomcat,Jetty,Undertow,而在Springboot2.2.6中则存在Netty"></a>重点来了 ServerProperties包含了tomcat,Jetty,Undertow,而在Springboot2.2.6中则存在Netty</h2><p>那么理所当然，在tomcat中的一些配置也存在于此</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Maximum amount of worker threads.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxThreads = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Minimum amount of worker threads.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> minSpareThreads = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h2 id="那么为什么Tomcat被称之为嵌入式容器呢？"><a href="#那么为什么Tomcat被称之为嵌入式容器呢？" class="headerlink" title="那么为什么Tomcat被称之为嵌入式容器呢？"></a>那么为什么Tomcat被称之为嵌入式容器呢？</h2><p>在启动时无需自启动容器，在Bootstrap中调用tomcat，另外tomcat中TomcatEmbeddedContext，Embedded即直译为嵌入式<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/embedded.png" alt="流程"><br>这里记忆有些混乱了，有点找不过来哪里是入口了，但先从TomcatServletWebServerFactoryCustomizer的customize()方法调用找，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Stream&lt;Wrapper&gt; <span class="title">getLoadOnStartupWrappers</span><span class="params">(Container[] children)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, List&lt;Wrapper&gt;&gt; grouped = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Container child : children) &#123;</span><br><span class="line">            Wrapper wrapper = (Wrapper) child;</span><br><span class="line">            <span class="keyword">int</span> order = wrapper.getLoadOnStartup();</span><br><span class="line">            <span class="keyword">if</span> (order &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                grouped.computeIfAbsent(order, ArrayList::<span class="keyword">new</span>);</span><br><span class="line">                grouped.get(order).add(wrapper);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> grouped.values().stream().flatMap(List::stream);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因为要看下Netty，所以还是重新看下server.properties<br>我将Spring Boot AutoConfigure升级到了2.6.2，内置的Tomcat就升级到9.0了<br>为了方便查看才升级的，之前的2.1.x就不截图了<br>server.properties的位置在configuration的下面的json文件<br>spring-configuration-metadata.json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      &quot;name&quot;: &quot;server&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;org.springframework.boot.autoconfigure.web.ServerProperties&quot;,</span><br><span class="line">      &quot;sourceType&quot;: &quot;org.springframework.boot.autoconfigure.web.ServerProperties&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那既然为了看Netty在这个json文件中同样存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      &quot;name&quot;: &quot;server.netty&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;org.springframework.boot.autoconfigure.web.ServerProperties$Netty&quot;,</span><br><span class="line">      &quot;sourceType&quot;: &quot;org.springframework.boot.autoconfigure.web.ServerProperties&quot;,</span><br><span class="line">      &quot;sourceMethod&quot;: &quot;getNetty()&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然在json中存在getNetty等方法，猜测那么对应的ServerProperties也存在对应的方法，<br>因为存在实例么，tomcat搭配server.xml和web.xml简单看了一下，当然Tomcat还是主要和Servlet的关联关系更为重要，<br>本身tomcat知识点也最够庞大的，包含类加载器，双拼委派，打破双亲委派、jvm调优等等，可以顺带看下这里的专题</p><h2 id="当一次请求发起都发生了什么？"><a href="#当一次请求发起都发生了什么？" class="headerlink" title="当一次请求发起都发生了什么？"></a>当一次请求发起都发生了什么？</h2><p>用户通过浏览器进行了一个操作，这个操作可以是输入url地址并回车，或者是点击超链接，或者是在搜索框中输入关键字进行搜索，接着浏览器就捕获到了这个事件<br>由于 HTTP 协议底层具体的数据传输使用的是 TCP/IP 协议，因此浏览器需要向服务端发出 TCP 连接请求<br>服务器接受浏览器的连接请求，并经过 TCP 三次握手建立连接<br>浏览器将请求数据打包成一个 HTTP 协议格式的数据包<br>浏览器将打包好的数据包推入网络，经过网络传输最终到达服务器指定程序<br>服务端程序拿到数据包后，根据 HTTP 协议格式进行解包，获取到客户端的意图<br>得知客户端意图后进行处理，比如提供静态文件或者调用服务端程序获得动态结果<br>服务器将响应结果按照 HTTP 协议格式打包<br>服务器将响应数据包推入网络，数据包经过网络传输最终达到到浏览器<br>浏览器拿到数据包后，按照 HTTP 协议的格式解包，然后对数据进行解析<br>浏览器将解析后的静态数据（如html、图片）展示给用户</p><p>Tomcat 作为一个 HTTP 服务器，主要需要完成的功能是接受连接、解析请求数据、处理请求和发送响应这几个步骤。<br>作者：若兮缘<br>链接：<a href="https://www.jianshu.com/p/7c9401b85704">https://www.jianshu.com/p/7c9401b85704</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br>关于tomcat的架构就取自这篇文章，图文都很喜欢~</p><p>导入过程Running With JRE 7 Or Later</p><p>启动tomcat所需环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">   eval $_NOHUP <span class="string">&quot;\&quot;$_RUNJAVA\&quot;&quot;</span> <span class="string">&quot;\&quot;$CATALINA_LOGGING_CONFIG\&quot;&quot;</span> $LOGGING_MANAGER <span class="string">&quot;$JAVA_OPTS&quot;</span> <span class="string">&quot;$CATALINA_OPTS&quot;</span> \</span><br><span class="line">     -D$ENDORSED_PROP=<span class="string">&quot;\&quot;$JAVA_ENDORSED_DIRS\&quot;&quot;</span> \</span><br><span class="line">     -classpath <span class="string">&quot;\&quot;$CLASSPATH\&quot;&quot;</span> \</span><br><span class="line">     -Dcatalina.base=<span class="string">&quot;\&quot;$CATALINA_BASE\&quot;&quot;</span> \</span><br><span class="line">     -Dcatalina.home=<span class="string">&quot;\&quot;$CATALINA_HOME\&quot;&quot;</span> \</span><br><span class="line">     -Djava.io.tmpdir=<span class="string">&quot;\&quot;$CATALINA_TMPDIR\&quot;&quot;</span> \</span><br><span class="line">     org.apache.catalina.startup.Bootstrap <span class="string">&quot;$@&quot;</span> start \</span><br></pre></td></tr></table></figure><p>后续不在赘述。重点在Server.properties中版本区别是否包含Netty的这个类,<br>本来我是想跟着dei一下bug的,实际是我没起来，版本又不兼容，中间穿插了需求，就不dei了skr~</p><h2 id="一方库、二方库、三方库说明"><a href="#一方库、二方库、三方库说明" class="headerlink" title="一方库、二方库、三方库说明"></a>一方库、二方库、三方库说明</h2><p>有些二方库为apache所需类库,当然定义也尽相同，以统一标准为准吧~就像嵌入式这个单词,<br>如果学习的时候根据服务的命名，猜测其作用，然后再去证实的话，可能我早就认识这个单词了</p><blockquote><p>一方库：本工程中的各模块的相互依赖<br>二方库：公司内部的依赖库，一般指公司内部的其他项目发布的jar包<br>三方库：公司之外的开源库， 比如apache、ibm、google等发布的依赖<br>为什么写这句话就是因为javax是指扩展我的java,因为原生的二方库是不允许被覆盖的。提到的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Stream&lt;Wrapper&gt; <span class="title">getLoadOnStartupWrappers</span><span class="params">(Container[] children)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, List&lt;Wrapper&gt;&gt; grouped = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Container child : children) &#123;</span><br><span class="line">            Wrapper wrapper = (Wrapper) child;</span><br><span class="line">            <span class="keyword">int</span> order = wrapper.getLoadOnStartup();</span><br><span class="line">            <span class="keyword">if</span> (order &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                grouped.computeIfAbsent(order, ArrayList::<span class="keyword">new</span>);</span><br><span class="line">                grouped.get(order).add(wrapper);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> grouped.values().stream().flatMap(List::stream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再比如这里面的grouped.computeIfAbsent(order, ArrayList::new);其中Absent译为缺席，入参是key=order,以及函数方法，在key!=null的情况下赋值为newAraayList并返回去。<br>and this flatMap VS map,其他人举的例子很明朗，我就不摘抄了,<a href="https://www.cnblogs.com/yucy/p/10260014.html">https://www.cnblogs.com/yucy/p/10260014.html</a></p><h2 id="JDBC中的servlet"><a href="#JDBC中的servlet" class="headerlink" title="JDBC中的servlet"></a>JDBC中的servlet</h2><blockquote><p>数据库三大范式：<br>1．第一范式(确保每列保持原子性)<br>2．第二范式(确保表中的每列都和主键相关)<br>3．第三范式(确保每列都和主键列直接相关,而不是间接相关)<br>1、DML:Data Manipulation Language  操作语句<br>2、DDL：data define Language、<br>3、存储过程执行后<br>4、查询中也是有事务的：select查询后结果集关闭后<br>事务并发可能的影响：<br>1、脏读（读取未提交数据）<br>A事务读取B事务尚未提交的数据，此时如果B事务发生错误并执行回滚操作，那么A事务读取到的数据就是脏数据。<br>就好像原本的数据比较干净、纯粹，此时由于B事务更改了它，这个数据变得不再纯粹。这个时候A事务立即读取了这个脏数据，<br>但事务B良心发现，又用回滚把数据恢复成原来干净、纯粹的样子，而事务A却什么都不知道，最终结果就是事务A读取了此次的脏数据，称为脏读。<br>2、不可重复读（前后多次读取，数据内容不一致）<br>事务A在执行读取操作，由整个事务A比较大，前后读取同一条数据需要经历很长的时间 。而在事务A第一次读取数据，<br>比如此时读取了小明的年龄为20岁，事务B执行更改操作，将小明的年龄更改为30岁，此时事务A第二次读取到小明的年龄时，<br>发现其年龄是30岁，和之前的数据不一样了，也就是数据不重复了，系统不可以读取到重复的数据，成为不可重复读<br>3、幻读（前后多次读取，数据总量不一致）<br>事务A在执行读取操作，需要两次统计数据的总量，前一次查询数据总量后，此时事务B执行了新增数据的操作并提交后，<br>这个时候事务A读取的数据总量和之前统计的不一样，就像产生了幻觉一样，平白无故的多了几条数据，成为幻读<br>幻读产生的根本原因是采用的行级锁，所以只针对脏读和重复读有用<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/drivermanager.png" alt="流程"><br>Drivermanager–&gt;getconnection—&gt;connection–&gt;createStatement–&gt;ResultSet executeQuery(String sql) throws SQLException;<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/connection.png" alt="流程"><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/drivermanager.png" alt="流程"><br>重载connection方法可实现在各个数据库中切换，基本不需要太多的代码，JDBC中用到的设计模式？—-桥接模式<br>不知道为啥都在强调jdbc的设计模式，所以引用下《重学设计模式–小博哥》中的案例分析<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.png" alt="流程"><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E6%A1%88%E4%BE%8B%E5%9C%BA%E6%99%AF.png" alt="场景"><br>代码实现登陆：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(PayController.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doPay</span><span class="params">(String uId, String tradeId, BigDecimal amount,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="keyword">int</span> channelType, <span class="keyword">int</span> modeType)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 微信⽀付</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == channelType) &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;模拟微信渠道⽀付划账开始。uId：&#123;&#125; tradeId：&#123;&#125; amount：</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            &quot;</span>, uId, tradeId, amount);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span> == modeType) &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;密码⽀付，⻛控校验环境安全&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == modeType) &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;⼈脸⽀付，⻛控校验脸部识别&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">3</span> == modeType) &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;指纹⽀付，⻛控校验指纹信息&quot;</span>);</span><br><span class="line">                <span class="number">123456789</span></span><br><span class="line">                <span class="number">10</span></span><br><span class="line">                <span class="number">11</span></span><br><span class="line">                <span class="number">12</span></span><br><span class="line">                <span class="number">13</span></span><br><span class="line">                <span class="number">14</span></span><br><span class="line">                上⾯的类提供了⼀个⽀付服务功能，通过提供的必要字段； ⽤户ID 、交易ID 、 ⾦额 、渠道 、模 式 ，来控制⽀付⽅式。</span><br><span class="line">                以上的 ifelse 应该是最差的⼀种写法，即使写 ifelse 也是可以优化的⽅式去写的。</span><br><span class="line">                <span class="number">3.</span> 测试验证</span><br><span class="line">                <span class="number">3.1</span> 编写测试类</span><br><span class="line">                以上分别测试了两种不同的⽀付类型和⽀付模式；微信⼈脸⽀付、⽀付宝指纹⽀付</span><br><span class="line">                <span class="number">3.2</span> 测试结果</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ⽀付宝⽀付</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == channelType) &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;模拟⽀付宝渠道⽀付划账开始。uId：&#123;&#125; tradeId：&#123;&#125;</span></span><br><span class="line"><span class="string">                    amount： &#123;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            &quot;</span>, uId, tradeId, amount);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span> == modeType) &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;密码⽀付，⻛控校验环境安全&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == modeType) &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;⼈脸⽀付，⻛控校验脸部识别&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">3</span> == modeType) &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;指纹⽀付，⻛控校验指纹信息&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实面对这种情况一般我是看到大多数是应用策略+模板的，桥接真的很少听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pay</span> </span>&#123;</span><br><span class="line"> <span class="keyword">protected</span> Logger logger = LoggerFactory.getLogger(Pay.class);</span><br><span class="line"> <span class="keyword">protected</span> IPayMode payMode;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Pay</span><span class="params">(IPayMode payMode)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.payMode = payMode;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">transfer</span><span class="params">(String uId, String tradeId, BigDecimal</span></span></span><br><span class="line"><span class="params"><span class="function">amount)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个类中定义了⽀付⽅式的需要实现的划账接⼝： transfer ，以及桥接接⼝； IPayMode ，并<br>在构造函数中⽤户⽅⾃⾏选择⽀付⽅式。<br>如果没有接触过此类实现，可以᯿点关注 IPayMode payMode ，这部分是桥接的核⼼</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxPay</span> <span class="keyword">extends</span> <span class="title">Pay</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">WxPay</span><span class="params">(IPayMode payMode)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">super</span>(payMode);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">transfer</span><span class="params">(String uId, String tradeId, BigDecimal amount)</span> </span>&#123;</span><br><span class="line"> logger.info(<span class="string">&quot;模拟微信渠道⽀付划账开始。uId：&#123;&#125; tradeId：&#123;&#125; amount：&#123;&#125;&quot;</span>,</span><br><span class="line">uId, tradeId, amount);</span><br><span class="line"> <span class="keyword">boolean</span> security = payMode.security(uId);</span><br><span class="line"> logger.info(<span class="string">&quot;模拟微信渠道⽀付⻛控校验。uId：&#123;&#125; tradeId：&#123;&#125; security：</span></span><br><span class="line"><span class="string">&#123;&#125;&quot;</span>, uId, tradeId, security);</span><br><span class="line"> <span class="keyword">if</span> (!security) &#123;</span><br><span class="line"> logger.info(<span class="string">&quot;模拟微信渠道⽀付划账拦截。uId：&#123;&#125; tradeId：&#123;&#125; amount：</span></span><br><span class="line"><span class="string">&#123;&#125;&quot;</span>, uId, tradeId, amount);</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;0001&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> logger.info(<span class="string">&quot;模拟微信渠道⽀付划账成功。uId：&#123;&#125; tradeId：&#123;&#125; amount：&#123;&#125;&quot;</span>,</span><br><span class="line">uId, tradeId, amount);</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;0000&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>支付宝支付</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class ZfbPay extends Pay &#123;</span><br><span class="line"> public ZfbPay(IPayMode payMode) &#123;</span><br><span class="line"> super(payMode);</span><br><span class="line"> &#125;</span><br><span class="line"> public String transfer(String uId, String tradeId, BigDecimal amount) &#123;</span><br><span class="line"> logger.info(<span class="string">&quot;模拟⽀付宝渠道⽀付划账开始。uId：&#123;&#125; tradeId：&#123;&#125; amount：</span></span><br><span class="line"><span class="string">&#123;&#125;&quot;</span>, uId, tradeId, amount);</span><br><span class="line"> boolean security = payMode.security(uId);</span><br><span class="line"> logger.info(<span class="string">&quot;模拟⽀付宝渠道⽀付⻛控校验。uId：&#123;&#125; tradeId：&#123;&#125; security：</span></span><br><span class="line"><span class="string">&#123;&#125;&quot;</span>, uId, tradeId, security);</span><br><span class="line"> <span class="keyword">if</span> (!security) &#123;</span><br><span class="line"> logger.info(<span class="string">&quot;模拟⽀付宝渠道⽀付划账拦截。uId：&#123;&#125; tradeId：&#123;&#125;</span></span><br><span class="line"><span class="string">amount：&#123;&#125;&quot;</span>, uId, tradeId, amount);</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;0001&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> logger.info(<span class="string">&quot;模拟⽀付宝渠道⽀付划账成功。uId：&#123;&#125; tradeId：&#123;&#125; amount：</span></span><br><span class="line"><span class="string">&#123;&#125;&quot;</span>, uId, tradeId, amount);</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;0000&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%9E%8B.png" alt="流程"><br>桥接模式接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public <span class="keyword">interface</span> IPayMode &#123;</span><br><span class="line"> boolean security(String uId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刷脸</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayFaceMode</span> <span class="keyword">implements</span> <span class="title">IPayMode</span></span>&#123;</span><br><span class="line"> <span class="keyword">protected</span> Logger logger = LoggerFactory.getLogger(PayCypher.class);</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">security</span><span class="params">(String uId)</span> </span>&#123;</span><br><span class="line"> logger.info(<span class="string">&quot;⼈脸⽀付，⻛控校验脸部识别&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">其他同上</span><br></pre></td></tr></table></figure><p>测试类编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_pay</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;\r\n模拟测试场景；微信⽀付、⼈脸⽅式。&quot;</span>);</span><br><span class="line"> Pay wxPay = <span class="keyword">new</span> WxPay(<span class="keyword">new</span> PayFaceMode());</span><br><span class="line"> wxPay.transfer(<span class="string">&quot;weixin_1092033111&quot;</span>, <span class="string">&quot;100000109893&quot;</span>, <span class="keyword">new</span></span><br><span class="line">BigDecimal(<span class="number">100</span>));</span><br><span class="line"> System.out.println(<span class="string">&quot;\r\n模拟测试场景；⽀付宝⽀付、指纹⽅式。&quot;</span>);</span><br><span class="line"> Pay zfbPay = <span class="keyword">new</span> ZfbPay(<span class="keyword">new</span> PayFingerprintMode());</span><br><span class="line"> zfbPay.transfer(<span class="string">&quot;jlu19dlxo111&quot;</span>,<span class="string">&quot;100000109894&quot;</span>,<span class="keyword">new</span> BigDecimal(<span class="number">100</span>));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="ResultSet-executeQuery-String-sql-throws-SQLException"><a href="#ResultSet-executeQuery-String-sql-throws-SQLException" class="headerlink" title="ResultSet executeQuery(String sql) throws SQLException;"></a>ResultSet executeQuery(String sql) throws SQLException;</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;commons-dbcp&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">org.springframework.transaction.interceptor.TransactionInterceptor</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    Class&lt;?&gt; targetClass = invocation.getThis() != <span class="keyword">null</span> ? AopUtils.getTargetClass(invocation.getThis()) : <span class="keyword">null</span>;</span><br><span class="line">    Method var10001 = invocation.getMethod();</span><br><span class="line">    invocation.getClass();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.invokeWithinTransaction(var10001, targetClass, invocation::proceed);</span><br><span class="line">&#125;</span><br><span class="line">org.springframework.transaction.TransactionDefinition</span><br></pre></td></tr></table></figure><p>其实这里看不出来跟servlet的关联性有多么高，如果实在要说其中的关联性，<br>还不如将jdbc的整合过程与Mybatis进行比较,或者分析jdbc代码分析封装硬编码的过程，<br>就连其报下的大部分类名都不与之相关,当然你要说再Servlet与jdbc集成开发的时代，他也是有一定时代和代表性的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(String url,</span></span></span><br><span class="line"><span class="params"><span class="function">    java.util.Properties info)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (getConnection(url, info, Reflection.getCallerClass()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CallerSensitive是什么鬼？"><a href="#CallerSensitive是什么鬼？" class="headerlink" title="CallerSensitive是什么鬼？"></a>CallerSensitive是什么鬼？</h3><p>CallerSensitive老规矩，猜测下Caller=调用，Sensitive=敏感的，那么标识在方法上则是当调用方法时的一些控制。<br>其中特指Reflection.getCallerClass()能够追踪到调用者的第一人。项目中用是用不到。</p><h3 id="学习方法就是学习大佬的学习方法"><a href="#学习方法就是学习大佬的学习方法" class="headerlink" title="学习方法就是学习大佬的学习方法"></a>学习方法就是学习大佬的学习方法</h3><p>这里JDBC就先到此为止，我先不得不先记录下我在javacache中遇到的小问题思考。</p><h2 id="为什么在ConcurrentHashMap还要加入synchronized"><a href="#为什么在ConcurrentHashMap还要加入synchronized" class="headerlink" title="为什么在ConcurrentHashMap还要加入synchronized"></a>为什么在ConcurrentHashMap还要加入synchronized</h2><p>在org.springframework.cache.support.AbstractCacheManager中有一段关于初始化缓存静态配置的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initialize the static configuration of caches.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Triggered on startup through &#123;<span class="doctag">@link</span> #afterPropertiesSet()&#125;;</span></span><br><span class="line"><span class="comment">     * can also be called to re-initialize at runtime.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 4.2.2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #loadCaches()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initializeCaches</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Collection&lt;? extends Cache&gt; caches = loadCaches();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.cacheMap) &#123;</span><br><span class="line">            <span class="keyword">this</span>.cacheNames = Collections.emptySet();</span><br><span class="line">            <span class="keyword">this</span>.cacheMap.clear();</span><br><span class="line">            Set&lt;String&gt; cacheNames = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(caches.size());</span><br><span class="line">            <span class="keyword">for</span> (Cache cache : caches) &#123;</span><br><span class="line">                String name = cache.getName();</span><br><span class="line">                <span class="keyword">this</span>.cacheMap.put(name, decorateCache(cache));</span><br><span class="line">                cacheNames.add(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.cacheNames = Collections.unmodifiableSet(cacheNames);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><font color="red"> Triggered：触发 </font><br>原因：本身put和add的线程安全是由ConcurrentHashMap保证的，但是此时获取的值ConcurrentHashMap并不能保证其他线程对共享变量的值操作时还是原来的值。<br>怎么说呢，这么看来可能失去了map的本来特性，但其实还是不理解，是不理解这个原因准不准确。</p><p>谁提出谁解决:concurrentHashMap只能保证一次操作的原子性，一系列操作的时候就需要加锁了，不能保证第N+1个线程进来的时候获取到的状态是未clear的</p><p>Collections.emptySet()：如果你想 new 一个空的 List ，而这个 List 以后也不会再添加元素，那么就用 Collections.emptyList() 好了。<br>new ArrayList() 或者 new LinkedList() 在创建的时候有会有初始大小，多少会占用一内存。<br>每次使用都new 一个空的list集合，浪费就积少成多，浪费就严重啦，就不好啦。</p><p>还有一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cache <span class="title">getCache</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Cache cache = <span class="keyword">this</span>.cacheMap.get(name);</span><br><span class="line">        <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cache;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Fully synchronize now for missing cache creation...</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>.cacheMap) &#123;</span><br><span class="line">                cache = <span class="keyword">this</span>.cacheMap.get(name);</span><br><span class="line">                <span class="keyword">if</span> (cache == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    cache = getMissingCache(name);</span><br><span class="line">                    <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        cache = decorateCache(cache);</span><br><span class="line">                        <span class="keyword">this</span>.cacheMap.put(name, cache);</span><br><span class="line">                        updateCacheNames(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> cache;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">其中的getMissingCache方法</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Cache <span class="title">getMissingCache</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">无论如何都要返回<span class="keyword">null</span>，那么他还要进行判空意义又何在？</span><br><span class="line"></span><br><span class="line">源码注释是这样写的</span><br><span class="line">Return a missing cache with the specified name, or <span class="keyword">null</span> <span class="keyword">if</span> such a cache does not exist or could not be created on demand.</span><br><span class="line">Caches may be lazily created at runtime <span class="keyword">if</span> the <span class="keyword">native</span> provider supports it. If a lookup by name does not yield any result, an AbstractCacheManager subclass gets a chance to register such a cache at runtime. The returned cache will be automatically added to <span class="keyword">this</span> cache manager.</span><br><span class="line">返回指定名称的缺失缓存，如果此类缓存不存在或无法按需创建，则返回<span class="keyword">null</span>。</span><br><span class="line">如果本机提供程序支持，可以在运行时延迟创建缓存,就是其扩展实际是在子类中来复写的，</span><br><span class="line">注意：在spring-data-redis的<span class="number">1.7</span><span class="number">.2</span>中是没有复写此方法的</span><br><span class="line">在官网中查询https:<span class="comment">//spring.io/projects/spring-data-redis#support</span></span><br><span class="line">接入了</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;<span class="number">2.1</span><span class="number">.9</span>.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">低版本可是没有的呢，具体变化是在<span class="number">2.</span>X前后的区别</span><br><span class="line"><span class="function"><span class="keyword">protected</span> RedisCache <span class="title">getMissingCache</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> allowInFlightCacheCreation ? createRedisCache(name, defaultCacheConfig) : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第二次见到identityHashMap"><a href="#第二次见到identityHashMap" class="headerlink" title="第二次见到identityHashMap"></a>第二次见到identityHashMap</h2><p>实际应用<br><a href="https://mp.weixin.qq.com/s?__biz=Mzg2ODA3NjA1MA==&amp;mid=2247484317&amp;idx=1&amp;sn=1a5d78d0e5d5e09b1d2ca969a5ae7d23&amp;chksm=ceb09ce0f9c715f6688bf4b38a933730f61df7b432b3ac452924b502fba735e048289c3e0d91&amp;token=950928768&amp;lang=zh_CN#rd">https://mp.weixin.qq.com/s?__biz=Mzg2ODA3NjA1MA==&amp;mid=2247484317&amp;idx=1&amp;sn=1a5d78d0e5d5e09b1d2ca969a5ae7d23&amp;chksm=ceb09ce0f9c715f6688bf4b38a933730f61df7b432b3ac452924b502fba735e048289c3e0d91&amp;token=950928768&amp;lang=zh_CN#rd</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    var var1 = new Integer(1);</span><br><span class="line">    var var2 = new Integer(1);</span><br><span class="line">    System.out.println(var1.equals(var2));</span><br><span class="line"></span><br><span class="line">    System.out.println(var1.hashCode());</span><br><span class="line">    System.out.println(var2.hashCode());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(System.identityHashCode(var1));</span><br><span class="line">    System.out.println(System.identityHashCode(var2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">控制台输出</span><br><span class="line">true</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1524960486</span><br><span class="line">117009527</span><br></pre></td></tr></table></figure><p>org.springframework.cache.Cache对于缓存是应用接口，<br>Hashmap是否是在并发写的情况下，如果是则不是线程安全的<br>Consistency(一致性)<br>getinclude<br>想要看到源文档时，搜索：JSR107规范即可<br>推荐文章：<a href="https://www.jianshu.com/p/f6a1eae">https://www.jianshu.com/p/f6a1eae</a></p><h3 id="接着来看缓存类CacheManager"><a href="#接着来看缓存类CacheManager" class="headerlink" title="接着来看缓存类CacheManager"></a>接着来看缓存类CacheManager</h3><p>从名字就能看出是管理缓存的类，CacheManager有两种，一种是Spring的，一种是javax的，就是上面所说的扩展类，但实现确实大体一致，<br>就接口实现入手，先从最简单的看起，从名字看就是SimpleCacheManager，提供最基本的set方法，load方法。<br>SimpleCacheManager在spring-context包下，5.1.4版本，rediscachemanager在spring-data-redis包下<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/fg15k701aa.png" alt="流程"></p><blockquote><p>CachingProvider：创建、配置、获取、管理和控制多个CacheManager<br>CacheManager：创建、配置、获取、管理和控制多个唯一命名的Cache。（一个CacheManager仅被一个CachingProvider所拥有）<br>Cache：一个类似Map的数据结构。（一个Cache仅被一个CacheManager所拥有）<br>Entry：一个存储在Cache中的key-value对<br>Expiry：每一个存储在Cache中的条目有一个定义的有效期，过期后不可访问、更新、删除。缓存有效期可以通过ExpiryPolicy设置<br><a href="https://cloud.tencent.com/developer/article/1497762">https://cloud.tencent.com/developer/article/1497762</a><br>缓存么，除了快之外，还要满足有过期时间，但是除了在redis中并没有提供响应的方法，为什么呢？我觉得既然你启动或者加载就将bean放入cache管理了<br>就不可能伴随过期，应该会有响应的destroy方法在实例结束运行时清理，要不不可能实例还没运行完就进行清理吧。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Collection&lt;RedisCache&gt; <span class="title">loadCaches</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;RedisCache&gt; caches = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, RedisCacheConfiguration&gt; entry : initialCacheConfiguration.entrySet()) &#123;</span><br><span class="line">            caches.add(createRedisCache(entry.getKey(), entry.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> caches;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>读取缓存的配置时间，一级缓存60s，二级缓存30s<br>在spring-autoconfigure-metadata.properties中的org.springframework.data.redis.cache.RedisCacheConfiguration配置此参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration.AutoConfigureAfter=</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration</span><br></pre></td></tr></table></figure><p>启动时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">c.y.c.b.redis.config.RedisConfiguration  : [BSF][Redis]已启动,addressList:</span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">18</span> <span class="number">15</span>:<span class="number">04</span>:<span class="number">45.674</span>  INFO <span class="number">2604</span> --- [           main] c.y.c.b.e.c.EurekaClientConfiguration    : [BSF][Eureka-Client]已启动!!! eureka.client.serviceUrl.defaultZone=http:<span class="comment">//10.:8080/eureka/</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">18</span> <span class="number">15</span>:<span class="number">04</span>:<span class="number">47.846</span>  WARN <span class="number">2604</span> --- [           main] c.n.c.sources.URLConfigurationSource     : No URLs will be polled as dynamic configuration sources.</span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">18</span> <span class="number">15</span>:<span class="number">04</span>:<span class="number">47.847</span>  INFO <span class="number">2604</span> --- [           main] c.n.c.sources.URLConfigurationSource     : To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.</span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">18</span> <span class="number">15</span>:<span class="number">04</span>:<span class="number">47.943</span>  INFO <span class="number">2604</span> --- [           main] c.netflix.config.DynamicPropertyFactory  : DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@4bf9f44b</span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">18</span> <span class="number">15</span>:<span class="number">04</span>:<span class="number">54.662</span>  INFO <span class="number">2604</span> --- [           main] c.y.c.b.s.ShardingJdbcConfiguration      : [BSF][Sharding-jdbc]已启动!!!</span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">18</span> <span class="number">15</span>:<span class="number">04</span>:<span class="number">57.232</span>  INFO <span class="number">2604</span> --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-<span class="number">1</span>&#125; inited</span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">18</span> <span class="number">15</span>:<span class="number">04</span>:<span class="number">58.661</span>  INFO <span class="number">2604</span> --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-<span class="number">2</span>&#125; inited</span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">18</span> <span class="number">15</span>:<span class="number">05</span>:<span class="number">02.531</span> ERROR <span class="number">2604</span> --- [           main] c.b.mybatisplus.MybatisConfiguration </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者在redisconfig中配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCacheConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">simpleKeyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (o, method, objects) -&gt; &#123;</span><br><span class="line">            StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            stringBuilder.append(o.getClass().getSimpleName());</span><br><span class="line">            stringBuilder.append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">            stringBuilder.append(method.getName());</span><br><span class="line">            stringBuilder.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Object obj : objects) &#123;</span><br><span class="line">                stringBuilder.append(obj.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            stringBuilder.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisCacheManager(</span><br><span class="line">            RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory),</span><br><span class="line">            <span class="keyword">this</span>.getRedisCacheConfigurationWithTtl(<span class="number">600</span>), <span class="comment">// 默认策略，未配置的 key 会使用这个</span></span><br><span class="line">            <span class="keyword">this</span>.getRedisCacheConfigurationMap() <span class="comment">// 指定 key 策略</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, RedisCacheConfiguration&gt; <span class="title">getRedisCacheConfigurationMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, RedisCacheConfiguration&gt; redisCacheConfigurationMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        redisCacheConfigurationMap.put(<span class="string">&quot;UserInfoList&quot;</span>, <span class="keyword">this</span>.getRedisCacheConfigurationWithTtl(<span class="number">3000</span>));</span><br><span class="line">        redisCacheConfigurationMap.put(<span class="string">&quot;UserInfoListAnother&quot;</span>, <span class="keyword">this</span>.getRedisCacheConfigurationWithTtl(<span class="number">18000</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisCacheConfigurationMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RedisCacheConfiguration <span class="title">getRedisCacheConfigurationWithTtl</span><span class="params">(Integer seconds)</span> </span>&#123;</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig();</span><br><span class="line">        redisCacheConfiguration = redisCacheConfiguration.serializeValuesWith(</span><br><span class="line">            RedisSerializationContext</span><br><span class="line">                .SerializationPair</span><br><span class="line">                .fromSerializer(jackson2JsonRedisSerializer)</span><br><span class="line">        ).entryTtl(Duration.ofSeconds(seconds));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisCacheConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">过期时间</span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;UserInfoList&quot;, keyGenerator = &quot;simpleKeyGenerator&quot;)</span> <span class="comment">// 3000秒</span></span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;UserInfoListAnother&quot;, keyGenerator = &quot;simpleKeyGenerator&quot;)</span> <span class="comment">// 18000秒</span></span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;DefaultKeyTest&quot;, keyGenerator = &quot;simpleKeyGenerator&quot;)</span> <span class="comment">// 600秒，未指定的key，使用默认策略</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>在spring2.0前后差异<br>构造器差异<br>before</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RedisCacheManager cacheManager = <span class="keyword">new</span> RedisCacheManager(RedisTemplate redisTemplate);</span><br></pre></td></tr></table></figure><p>after</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RedisCacheManager cacheManager = <span class="keyword">new</span> RedisCacheManager(RedisCacheWriter redisCacheWriter,RedisCacheConfiguration redisCacheConfiguration);</span><br></pre></td></tr></table></figure><p>创建RedisCacheWriter分为有锁和无锁<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/rediscachewriter.png" alt="流程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> RedisCacheWriter <span class="title">nonLockingRedisCacheWriter</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Assert.notNull(connectionFactory, <span class="string">&quot;ConnectionFactory must not be null!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultRedisCacheWriter(connectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    JedisConnectionFactory</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create new &#123;<span class="doctag">@link</span> RedisCacheWriter&#125; with locking behavior.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connectionFactory must not be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> new instance of &#123;<span class="doctag">@link</span> DefaultRedisCacheWriter&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> RedisCacheWriter <span class="title">lockingRedisCacheWriter</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Assert.notNull(connectionFactory, <span class="string">&quot;ConnectionFactory must not be null!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultRedisCacheWriter(connectionFactory, Duration.ofMillis(<span class="number">50</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>即使是同一个缓存CacheManager管理的缓存实例，配置有可能不一样。<br>指定redis数据序列化<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/connectionfactory.png" alt="流程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(keySerializer()))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(valueSerializer()))</span><br></pre></td></tr></table></figure><p>JAVA序列化方式<br>序列化方式一实现：Serializable接口<br>序列化方式二：Externalizable显式序列化<br>序列化方式三：实现Serializable接口+添加writeObject()和readObject()方法。(显+隐序列化)<br>对了，想要使用cache记得开启缓存注解，@EnableCaching<br>转过头来看下CacheOperation，这里面是缓存相关注解的父类，在SpringCacheAnnotationParser中管理了子类相关</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static &#123;</span><br><span class="line">        CACHE_OPERATION_ANNOTATIONS.add(Cacheable.class);</span><br><span class="line">        CACHE_OPERATION_ANNOTATIONS.add(CacheEvict.class);</span><br><span class="line">        CACHE_OPERATION_ANNOTATIONS.add(CachePut.class);</span><br><span class="line">        CACHE_OPERATION_ANNOTATIONS.add(Caching.class);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>解析注解的时候他们的入参，实现一模一样，只有返回值不一样，但是一模一样的代码写了三遍,为什么不判断类型动态返回呢~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Collection&lt;CacheOperation&gt; <span class="title">parseCacheAnnotations</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            DefaultCacheConfig cachingConfig, AnnotatedElement ae, <span class="keyword">boolean</span> localOnly)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Collection&lt;? extends Annotation&gt; anns = (localOnly ?</span><br><span class="line">                AnnotatedElementUtils.getAllMergedAnnotations(ae, CACHE_OPERATION_ANNOTATIONS) :</span><br><span class="line">                AnnotatedElementUtils.findAllMergedAnnotations(ae, CACHE_OPERATION_ANNOTATIONS));</span><br><span class="line">        <span class="keyword">if</span> (anns.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Collection&lt;CacheOperation&gt; ops = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        anns.stream().filter(ann -&gt; ann <span class="keyword">instanceof</span> Cacheable).forEach(</span><br><span class="line">                ann -&gt; ops.add(parseCacheableAnnotation(ae, cachingConfig, (Cacheable) ann)));</span><br><span class="line">        anns.stream().filter(ann -&gt; ann <span class="keyword">instanceof</span> CacheEvict).forEach(</span><br><span class="line">                ann -&gt; ops.add(parseEvictAnnotation(ae, cachingConfig, (CacheEvict) ann)));</span><br><span class="line">        anns.stream().filter(ann -&gt; ann <span class="keyword">instanceof</span> CachePut).forEach(</span><br><span class="line">                ann -&gt; ops.add(parsePutAnnotation(ae, cachingConfig, (CachePut) ann)));</span><br><span class="line">        anns.stream().filter(ann -&gt; ann <span class="keyword">instanceof</span> Caching).forEach(</span><br><span class="line">                ann -&gt; parseCachingAnnotation(ae, cachingConfig, (Caching) ann, ops));</span><br><span class="line">        <span class="keyword">return</span> ops;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> CacheableOperation <span class="title">parseCacheableAnnotation</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            AnnotatedElement ae, DefaultCacheConfig defaultConfig, Cacheable cacheable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        CacheableOperation.Builder builder = <span class="keyword">new</span> CacheableOperation.Builder();</span><br><span class="line"></span><br><span class="line">        builder.setName(ae.toString());</span><br><span class="line">        builder.setCacheNames(cacheable.cacheNames());</span><br><span class="line">        builder.setCondition(cacheable.condition());</span><br><span class="line">        builder.setUnless(cacheable.unless());</span><br><span class="line">        builder.setKey(cacheable.key());</span><br><span class="line">        builder.setKeyGenerator(cacheable.keyGenerator());</span><br><span class="line">        builder.setCacheManager(cacheable.cacheManager());</span><br><span class="line">        builder.setCacheResolver(cacheable.cacheResolver());</span><br><span class="line">        builder.setSync(cacheable.sync());</span><br><span class="line"></span><br><span class="line">        defaultConfig.applyDefault(builder);</span><br><span class="line">        CacheableOperation op = builder.build();</span><br><span class="line">        validateCacheOperation(ae, op);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> op;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> CacheEvictOperation <span class="title">parseEvictAnnotation</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            AnnotatedElement ae, DefaultCacheConfig defaultConfig, CacheEvict cacheEvict)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        CacheEvictOperation.Builder builder = <span class="keyword">new</span> CacheEvictOperation.Builder();</span><br><span class="line"></span><br><span class="line">        builder.setName(ae.toString());</span><br><span class="line">        builder.setCacheNames(cacheEvict.cacheNames());</span><br><span class="line">        builder.setCondition(cacheEvict.condition());</span><br><span class="line">        builder.setKey(cacheEvict.key());</span><br><span class="line">        builder.setKeyGenerator(cacheEvict.keyGenerator());</span><br><span class="line">        builder.setCacheManager(cacheEvict.cacheManager());</span><br><span class="line">        builder.setCacheResolver(cacheEvict.cacheResolver());</span><br><span class="line">        builder.setCacheWide(cacheEvict.allEntries());</span><br><span class="line">        builder.setBeforeInvocation(cacheEvict.beforeInvocation());</span><br><span class="line"></span><br><span class="line">        defaultConfig.applyDefault(builder);</span><br><span class="line">        CacheEvictOperation op = builder.build();</span><br><span class="line">        validateCacheOperation(ae, op);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> op;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> CacheOperation <span class="title">parsePutAnnotation</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            AnnotatedElement ae, DefaultCacheConfig defaultConfig, CachePut cachePut)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        CachePutOperation.Builder builder = <span class="keyword">new</span> CachePutOperation.Builder();</span><br><span class="line"></span><br><span class="line">        builder.setName(ae.toString());</span><br><span class="line">        builder.setCacheNames(cachePut.cacheNames());</span><br><span class="line">        builder.setCondition(cachePut.condition());</span><br><span class="line">        builder.setUnless(cachePut.unless());</span><br><span class="line">        builder.setKey(cachePut.key());</span><br><span class="line">        builder.setKeyGenerator(cachePut.keyGenerator());</span><br><span class="line">        builder.setCacheManager(cachePut.cacheManager());</span><br><span class="line">        builder.setCacheResolver(cachePut.cacheResolver());</span><br><span class="line"></span><br><span class="line">        defaultConfig.applyDefault(builder);</span><br><span class="line">        CachePutOperation op = builder.build();</span><br><span class="line">        validateCacheOperation(ae, op);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> op;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseCachingAnnotation</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            AnnotatedElement ae, DefaultCacheConfig defaultConfig, Caching caching, Collection&lt;CacheOperation&gt; ops)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Cacheable[] cacheables = caching.cacheable();</span><br><span class="line">        <span class="keyword">for</span> (Cacheable cacheable : cacheables) &#123;</span><br><span class="line">            ops.add(parseCacheableAnnotation(ae, defaultConfig, cacheable));</span><br><span class="line">        &#125;</span><br><span class="line">        CacheEvict[] cacheEvicts = caching.evict();</span><br><span class="line">        <span class="keyword">for</span> (CacheEvict cacheEvict : cacheEvicts) &#123;</span><br><span class="line">            ops.add(parseEvictAnnotation(ae, defaultConfig, cacheEvict));</span><br><span class="line">        &#125;</span><br><span class="line">        CachePut[] cachePuts = caching.put();</span><br><span class="line">        <span class="keyword">for</span> (CachePut cachePut : cachePuts) &#123;</span><br><span class="line">            ops.add(parsePutAnnotation(ae, defaultConfig, cachePut));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>JSR(JCP  Java Community Process)文档查询地址，例如JSR107规范，servlet规范等等，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/web.html</span><br></pre></td></tr></table></figure><p>以及各类中文版在线开发文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//www.docs4dev.com/docs</span></span><br></pre></td></tr></table></figure><p>对了本次的主题虽然是Servlet,但不全是Servlet,都是用servlet带出来的,比如现在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DynamicThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="keyword">boolean</span> waitForTasksToCompleteOnShutdown,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="keyword">long</span> awaitTerminationMillis,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="meta">@NonNull</span> BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="meta">@NonNull</span> String threadPoolId,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="meta">@NonNull</span> ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="meta">@NonNull</span> RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, waitForTasksToCompleteOnShutdown, awaitTerminationMillis, workQueue, threadPoolId, threadFactory, handler);</span><br><span class="line">       <span class="keyword">this</span>.threadPoolId = threadPoolId;</span><br><span class="line"></span><br><span class="line">       RejectedExecutionHandler rejectedProxy = (RejectedExecutionHandler) Proxy</span><br><span class="line">               .newProxyInstance(</span><br><span class="line">                       handler.getClass().getClassLoader(),</span><br><span class="line">                       <span class="keyword">new</span> Class[]&#123;RejectedExecutionHandler.class&#125;,</span><br><span class="line">                       <span class="keyword">new</span> RejectedProxyInvocationHandler(handler, rejectCount));</span><br><span class="line">       setRejectedExecutionHandler(rejectedProxy);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>mybatis动态代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">newInstance</span><span class="params">(MapperProxy&lt;T&gt; mapperProxy)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里使用JDK动态代理，通过Proxy.newProxyInstance生成动态代理类</span></span><br><span class="line">    <span class="comment">// newProxyInstance的参数：类加载器、接口类、InvocationHandler接口实现类</span></span><br><span class="line">    <span class="comment">// 动态代理可以将所有接口的调用重定向到调用处理器InvocationHandler，调用它的invoke方法</span></span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), <span class="keyword">new</span> Class[] &#123; mapperInterface &#125;, mapperProxy);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MapperProxy&lt;T&gt; mapperProxy = <span class="keyword">new</span> MapperProxy&lt;&gt;(sqlSession, mapperInterface, methodCache);</span><br><span class="line">    <span class="keyword">return</span> newInstance(mapperProxy);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>问题： 一个接口方法,返回值相同,方法相同,参数为Person,现在有子类PersonMan和PersonWoman,如何对接口进行适配？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonMan</span> <span class="keyword">extends</span>  <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String character;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonWoman</span>  <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String constellation;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在泛型类型中支持class等，以及省去参数转换的上界通配符&lt;? extends E&gt;：上界通配符，表明参数化类型可能是所指定的类型，或者此类型的子类；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ElementType</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class="line">    TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Field declaration (includes enum constants) */</span></span><br><span class="line">    FIELD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Method declaration */</span></span><br><span class="line">    METHOD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Formal parameter declaration */</span></span><br><span class="line">    PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Constructor declaration */</span></span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Local variable declaration */</span></span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Annotation type declaration */</span></span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Package declaration */</span></span><br><span class="line">    PACKAGE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Type parameter declaration</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use of a type</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_USE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public interface PersonService &#123;</span><br><span class="line"></span><br><span class="line">    public void  queryPerson(List&lt;? extends Person&gt; list);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class PersonServiceImpl implements PersonService&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void queryPerson(List&lt;? extends Person&gt; list) &#123;</span><br><span class="line">        System.out.println(JSONObject.toJSONString(list));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;Person&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//List&lt;PersonMan&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//List&lt;PersonWoman&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">personService.queryPerson(list);</span><br></pre></td></tr></table></figure><p>那么如果参数类型为注解呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryPerson</span><span class="params">(List&lt;? extends Person&gt; list,Class&lt;? extends Annotation&gt; t)</span> </span>&#123;</span><br><span class="line">        System.out.println(JSONObject.toJSONString(list));</span><br><span class="line">       </span><br><span class="line">        System.out.println(cast.annotationType());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>那么为什么上面的parsePutAnnotation不用呢？<br>NONONO,其实是用了的,只不过方法不同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private static final Set&lt;Class&lt;? extends Annotation&gt;&gt; CACHE_OPERATION_ANNOTATIONS = new LinkedHashSet&lt;&gt;(8);</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        CACHE_OPERATION_ANNOTATIONS.add(Cacheable.class);</span><br><span class="line">        CACHE_OPERATION_ANNOTATIONS.add(CacheEvict.class);</span><br><span class="line">        CACHE_OPERATION_ANNOTATIONS.add(CachePut.class);</span><br><span class="line">        CACHE_OPERATION_ANNOTATIONS.add(Caching.class);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其实我就是看他的写的emoj,而且在caching这个注解里他包含了4种注解,然后统一进行管理的。</p><p>插播：Dbeaver中普通操作都会,安利一个类似idea的快捷键功能，Template—&gt;SQL编辑器中可设置常用SQL,快捷键加Tab唤出.</p><h3 id="国际化包含文本的国际化和时区的国际化"><a href="#国际化包含文本的国际化和时区的国际化" class="headerlink" title="国际化包含文本的国际化和时区的国际化"></a>国际化包含文本的国际化和时区的国际化</h3><h3 id="Repository-VS-NoRepositoryBean"><a href="#Repository-VS-NoRepositoryBean" class="headerlink" title="@Repository VS  @NoRepositoryBean"></a>@Repository VS  @NoRepositoryBean</h3><p>回到cache相关中，在开启缓存时提示错误需要加入@Enablecahing注解，而在验证缓存注解时，在接口加了NoRepositoryBean，那么NoRepositoryBean又是什么？跟@Repository有何不同？<br>NoRepositoryBean：见名知意就是不需要创建的bean，在Springboot jpa中标识，雷同与不需要序列化的字段标识transient；<br>NoRepositoryBean用做标记当前接口或者类（抽象）不应该作为RepositoryBean被注册到Spring上下文，Springdata提供了自动代理的机制</p><h2 id="JMS-java-message-service-JSR-914"><a href="#JMS-java-message-service-JSR-914" class="headerlink" title="JMS(java  message service)JSR-914"></a>JMS(java  message service)JSR-914</h2><p>1.JMS：用于应用程序之间，或在分布式系统中发送消息。而一些生产者，消费者，消息等不是消息队列的特指，而是JMS的所有特性。<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/jms.jpg" alt="Liucheng"><br>2.AMQP：(Advanced Message Queuing Protocol)<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/AMQP.png" alt="Liucheng"><br>消息队列协议,中文规范，消息代理(message brokers) 从发布者（publisher）亦称作生产者（producers）接受消息，根据<br>不同的路由规则（Routing Rule）把接受到的消息发送给处理消息的消费者（consumers）；</p><h1 id="3-kafka-零拷贝？-哎嗨，重点来了"><a href="#3-kafka-零拷贝？-哎嗨，重点来了" class="headerlink" title="3.kafka? 零拷贝？ 哎嗨，重点来了"></a>3.kafka? 零拷贝？ 哎嗨，重点来了</h1><p>官网：<a href="https://kafka.apache.org/">https://kafka.apache.org/</a><br>Kafka是一个分布式的基于发布/订阅模式的消息队列（Message Queue），主要应用于大数据实时处理领域。<br>其实大多数的消息队列的实时性只能保持在秒级，而在银行是能够在纳秒之间的，kafka2.8.x之前是基于zookeeper的，<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/kafka.png" alt="kafka"><br>架构图<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/kafka2.png" alt="kafka"></p><p>默认分区内存大小32M，每个批次大小是16K<br>1.批次数据满了才会发送，16K<br>2.linger.ms批次数据未满时，延迟发送时间<br>Sender数据拉取<br>同步vs异步发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>配置</span><br><span class="line"><span class="number">2.</span>连接集群</span><br><span class="line"><span class="number">3.</span>指定序列化类型</span><br><span class="line"><span class="number">4.</span>创建生产者</span><br><span class="line"><span class="number">5.</span>发送数据</span><br><span class="line"><span class="number">6.</span>关闭资源</span><br></pre></td></tr></table></figure><p>分区自定义，合理使用资源，负载均衡<br>可配置类都要放到统一类管理<br>1.指定分区的情况<br>2.没有指定分区，带key，key的hash值与topic的分区值取模<br>3.没有指定分区，不带key，粘性分区，随机选择一个分区，尽可能一直使用该分区<br>自定义分区器：实现分区器接口<br>一般会说那个表名作为key<br>自定义分区器：<br>恰好达到批次大小就进行发送<br>导致数据延迟：<br>生产环境配置5-100ms之间<br>压缩类型snappy<br>提供生产者吞吐量<br>应答ack  0   1  -1<br>动态ISR replica.lag.time.max.ms默认30s，超出则踢出<br>数据完全可靠条件：<br><font color="red"> ACK级别设置为1 +分区副本大于等于2 +ISR应答最小副本数量大于等于2  </font><br>要求可靠性<br>要求速度<br>默认值为int最大值<br>ack和重试数据<br>幂等性和事务:保证单分区单回话内不会重复<br>开启事务，必须开启幂等性<br>指定事务id<br>数据有序<br>单分区有序：<br>多分区有序：<br>数据乱序<br>kafka1.x前后差别：<br>是否开启幂等性区别：<br>其中一个出现异常则先缓存，后落盘<br>zookeeper中存放的信息<br>工具：prettyzoo</p><p>1、brokerid<br>2、主题<br>3.消费者信息</p><p><font color="green">AR:是kafka中你那个所有分区副本的总称</font><br><font color="green">ISR:leader和follower之间正常通讯的节点</font><br>除了基础知识点之外我最想看的就是kafka的零拷贝跟netty的关系。</p><blockquote><p>DMA<br>在介绍零拷贝之前，我们先来看一个技术名词DMA（Direct Memory Access<br>直接内存访问）。它是现代电脑的重要特征之一，允许不同速度的硬件之间直接交互，而不需要占用CPU的中断负载。DMA传输将一个地址空间复制到另一个地址空间，当CPU<br>初始化这个传输之后，实际的数据传输是有DMA设备之间完成，这样可以大大的减少CPU的消耗。我们常见的硬件设备都支持DMA</p></blockquote><p>零拷贝有两种方式：mmap/sendfile，而直接内存的方式跟Netty也是如出一辙。<br>关于压缩类型snappy,他是Java提供的实现，在maven以来中可在kafka中看到<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/snappy.png" alt="kafka"></p><h3 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">org.apache.kafka.clients.producer.ProducerRecord</span><br><span class="line">    可指定主题</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String topic;</span><br><span class="line">    分区</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer partition;</span><br><span class="line">    头信息</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Headers headers;</span><br><span class="line">    key</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> K key;</span><br><span class="line">    value</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> V value;</span><br><span class="line">    linger.ms</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Long timestamp;</span><br></pre></td></tr></table></figure><p>构造器有几种，对于发送消息就有几种类型，consumerRecord同理，key和value需要指定序列化类。<br>所有的配置项存放在ProducerConfig中,本来想看几个代表性参数就可以了,但是后续的调优参数有很多配置是用的到的,还是要仔细看看。<br>比如每个batchsize批次内存大小默认是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.define(BATCH_SIZE_CONFIG, Type.INT, 16384, atLeast(0), Importance.MEDIUM, BATCH_SIZE_DOC)</span><br></pre></td></tr></table></figure><p>16384/1024=16k<br>比如linger.ms默认为0ms</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.define(LINGER_MS_CONFIG, Type.LONG, 0, atLeast(0), Importance.MEDIUM, LINGER_MS_DOC)</span><br></pre></td></tr></table></figure><p>key指定的序列化类为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Serializer class for key that implements the &lt;code&gt;org.apache.kafka.common.serialization.Serializer&lt;/code&gt; interface.</span><br><span class="line">如果在配置文件中指定则需要全限定类名</span><br></pre></td></tr></table></figure><h3 id="zookeeper中存放的信息"><a href="#zookeeper中存放的信息" class="headerlink" title="zookeeper中存放的信息"></a>zookeeper中存放的信息</h3><p>broker启动后在zookeeper中注册<br>controller将节点信息记录到zookeeper中，推荐使用工具链接prettyzoo，存放brokerid，topic，消费者信息等。</p><h3 id="Linux新增知识点"><a href="#Linux新增知识点" class="headerlink" title="Linux新增知识点"></a>Linux新增知识点</h3><p>kafka 搭配 xcall jps ，查看集群下机器节点</p><h3 id="kafka服务器挂了怎么办？"><a href="#kafka服务器挂了怎么办？" class="headerlink" title="kafka服务器挂了怎么办？"></a>kafka服务器挂了怎么办？</h3><p>1.先尝试重启，重启成功直接解决<br>2.增加内存，CPU，宽带<br>3.如果副本数大于等于2，可以按照服役新节点方法执行，并配置负载均衡</p><h3 id="Broker中的重要参数"><a href="#Broker中的重要参数" class="headerlink" title="Broker中的重要参数"></a>Broker中的重要参数</h3><table><thead><tr><th align="left">参数名称</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">replica.lag.time.max.ms</td><td align="left">ISR 中，如果 Follower 长时间未向 Leader 发送通信请求或同步数据，则该 Follower 将被踢出 ISR。该时间阈值，<font color="red">默认30s</font> 。</td></tr><tr><td align="left">auto.leader.rebalance.enable</td><td align="left"><font color="red">默认是 true</font>。 自动 Leader Partition 平衡。</td></tr><tr><td align="left">leader.imbalance.per.broker.percentage</td><td align="left"><font color="red">默认是 10%</font>。每个 broker 允许的不平衡的 leader的比率。如果每个 broker 超过了这个值，控制器会触发 leader 的平衡。</td></tr><tr><td align="left">leader.imbalance.check.interval.seconds</td><td align="left"><font color="red">认值 300 秒 </font>。检查 leader 负载是否平衡的间隔时间。</td></tr><tr><td align="left">log.segment.bytes</td><td align="left">Kafka 中 log 日志是分成一块块存储的，此配置是指 log 日志划分 成块的大小，<font color="red">默认值 1G</font>。</td></tr><tr><td align="left">log.index.interval.bytes</td><td align="left"><font color="red">默认 4kb</font>，kafka 里面每当写入了 4kb 大小的日志（.log），然后就往 index 文件里面记录一个索引</td></tr><tr><td align="left">log.retention.hours</td><td align="left">Kafka 中数据保存的时间，<font color="red">默认7天</font>。</td></tr><tr><td align="left">log.retention.minutes</td><td align="left">Kafka 中数据保存的时间，分钟级别，<font color="red">默认关闭</font>。</td></tr></tbody></table><h3 id="文件清理策略"><a href="#文件清理策略" class="headerlink" title="文件清理策略"></a>文件清理策略</h3><p>Kafka 中默认的日志保存时间为<font color="red">7天</font>。<br>日志删除策略</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;If-I-have-seen-further-it-is-by-standing-on-the-shoulders-of-giants&quot;&gt;&lt;a href=&quot;#If-I-have-seen-further-it-is-by-standing-on-the-shoul</summary>
      
    
    
    
    
    <category term="Springboot" scheme="https://zkkget.github.io/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>如何删除valine评论</title>
    <link href="https://zkkget.github.io/2022/01/26/%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4valine%E8%AF%84%E8%AE%BA/"/>
    <id>https://zkkget.github.io/2022/01/26/%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4valine%E8%AF%84%E8%AE%BA/</id>
    <published>2022-01-26T03:29:50.000Z</published>
    <updated>2022-01-26T03:36:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.登陆leancloud</p><p>2.找到结构话数据–comment<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/cloud.png" alt="流程"><br>3.将测试数据一一删掉</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.登陆leancloud&lt;/p&gt;
&lt;p&gt;2.找到结构话数据–comment&lt;br&gt;&lt;img src=&quot;https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/cloud.png&quot; alt=&quot;流程&quot;&gt;&lt;br&gt;3.将测试数据一一删</summary>
      
    
    
    
    
    <category term="valine" scheme="https://zkkget.github.io/tags/valine/"/>
    
  </entry>
  
  <entry>
    <title>开源堡垒机jumpserver安装部署</title>
    <link href="https://zkkget.github.io/2022/01/14/%E5%BC%80%E6%BA%90%E5%A0%A1%E5%9E%92%E6%9C%BAjumpserver%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <id>https://zkkget.github.io/2022/01/14/%E5%BC%80%E6%BA%90%E5%A0%A1%E5%9E%92%E6%9C%BAjumpserver%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</id>
    <published>2022-01-14T07:18:48.000Z</published>
    <updated>2022-01-14T07:25:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="临时高可用架构方案如下"><a href="#临时高可用架构方案如下" class="headerlink" title="临时高可用架构方案如下"></a>临时高可用架构方案如下</h1><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E5%A0%A1%E5%9E%92%E6%9C%BA.png" alt="流程"></p><p>一，安装mysql数据库</p><p>1 ，安装（步骤省略）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">yum -y localinstall http:<span class="comment">//mirrors.ustc.edu.cn/mysql-repo/mysql57-community-release-el7.rpm</span></span><br><span class="line"></span><br><span class="line">yum install -y mysql-community-server</span><br><span class="line"></span><br><span class="line">systemctl enable mysqld</span><br><span class="line"></span><br><span class="line">systemctl start mysqld</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> ，数据库授权</span><br><span class="line"></span><br><span class="line">mysql –uroot</span><br><span class="line"></span><br><span class="line">create database jumpserver <span class="keyword">default</span> charset <span class="string">&#x27;utf8&#x27;</span> ;</span><br><span class="line"></span><br><span class="line">set global validate_password_policy = LOW ;</span><br><span class="line"></span><br><span class="line">create user <span class="string">&#x27;jumpserver&#x27;</span> @<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27; z&amp;cemb2iqYPiC$N3&#x27;</span> ;</span><br><span class="line"></span><br><span class="line">grant all on jumpserver . * to <span class="string">&#x27;jumpserver&#x27;</span> @<span class="string">&#x27;%&#x27;</span> ;</span><br><span class="line"></span><br><span class="line">flush privileges ;</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>二，安装jumperver</p><p>1 ，下载安装包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /data</span><br><span class="line"></span><br><span class="line">wget https:<span class="comment">//github.com/jumpserver/installer/releases/download/v2.16.3/jumpserver-installer-v2.16.3.tar.gz</span></span><br><span class="line"></span><br><span class="line">tar -xf jumpserver-installer-v2<span class="number">.16</span><span class="number">.3</span>.tar.gz</span><br><span class="line"></span><br><span class="line">cd jumpserver-installer-v2<span class="number">.16</span><span class="number">.3</span></span><br></pre></td></tr></table></figure><p>2 ，调整配置模板</p><h1 id="根据需要修改配置文件模板-如果不清楚用途可以跳过修改"><a href="#根据需要修改配置文件模板-如果不清楚用途可以跳过修改" class="headerlink" title="根据需要修改配置文件模板, 如果不清楚用途可以跳过修改"></a>根据需要修改配置文件模板, 如果不清楚用途可以跳过修改</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat config-example.txt</span><br></pre></td></tr></table></figure><h1 id="以下设置如果为空系统会自动生成随机字符串填入"><a href="#以下设置如果为空系统会自动生成随机字符串填入" class="headerlink" title="以下设置如果为空系统会自动生成随机字符串填入"></a>以下设置如果为空系统会自动生成随机字符串填入</h1><h2 id="迁移请修改-SECRET-KEY-和-BOOTSTRAP-TOKEN-为原来的设置"><a href="#迁移请修改-SECRET-KEY-和-BOOTSTRAP-TOKEN-为原来的设置" class="headerlink" title="迁移请修改 SECRET_KEY 和 BOOTSTRAP_TOKEN 为原来的设置"></a>迁移请修改 SECRET_KEY 和 BOOTSTRAP_TOKEN 为原来的设置</h2><h2 id="完整参数文档-https-docs-jumpserver-org-zh-master-admin-guide-env"><a href="#完整参数文档-https-docs-jumpserver-org-zh-master-admin-guide-env" class="headerlink" title="完整参数文档 https://docs.jumpserver.org/zh/master/admin-guide/env/"></a>完整参数文档 <a href="https://docs.jumpserver.org/zh/master/admin-guide/env/">https://docs.jumpserver.org/zh/master/admin-guide/env/</a></h2><h2 id="MySQL-配置-USE-EXTERNAL-MYSQL-1-表示使用外置数据库-请输入正确的-MySQL-信息"><a href="#MySQL-配置-USE-EXTERNAL-MYSQL-1-表示使用外置数据库-请输入正确的-MySQL-信息" class="headerlink" title="MySQL 配置, USE_EXTERNAL_MYSQL=1 表示使用外置数据库, 请输入正确的 MySQL 信息"></a>MySQL 配置, USE_EXTERNAL_MYSQL=1 表示使用外置数据库, 请输入正确的 MySQL 信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">USE_EXTERNAL_MYSQL=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">DB_HOST= <span class="number">10.0</span><span class="number">.77</span><span class="number">.38</span></span><br><span class="line"></span><br><span class="line">DB_PORT= <span class="number">3306</span></span><br><span class="line"></span><br><span class="line">DB_USER= jumpserver</span><br><span class="line"></span><br><span class="line">DB_PASSWORD= z&amp;cemb2iqYPiC$N3</span><br><span class="line"></span><br><span class="line">DB_NAME= jumpserver</span><br><span class="line"></span><br><span class="line">  （ # 主要关注数据库相关配置文件）</span><br></pre></td></tr></table></figure><p>3 ，安装 jumpserver 服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="meta">@jumpserver</span>-slave /data/jumpserver-installer-v2<span class="number">.16</span><span class="number">.3</span>]$ ./jmsctl.sh install</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       ██╗██╗   ██╗███╗   ███╗██████╗ ███████╗███████╗██████╗ ██╗   ██╗███████╗██████╗</span><br><span class="line"></span><br><span class="line">       ██║██║   ██║████╗ ████║██╔══██╗██╔════╝██╔════╝██╔══██╗██║   ██║██╔════╝██╔══██╗</span><br><span class="line"></span><br><span class="line">       ██║██║   ██║██╔████╔██║██████╔╝███████╗█████╗  ██████╔╝██║   ██║█████╗  ██████╔╝</span><br><span class="line"></span><br><span class="line">  ██   ██║██║   ██║██║╚██╔╝██║██╔═══╝ ╚════██║██╔══╝  ██╔══██╗╚██╗ ██╔╝██╔══╝  ██╔══██╗</span><br><span class="line"></span><br><span class="line">  ╚█████╔╝╚██████╔╝██║ ╚═╝ ██║██║     ███████║███████╗██║  ██║ ╚████╔╝ ███████╗██║  ██║</span><br><span class="line"></span><br><span class="line">   ╚════╝  ╚═════╝ ╚═╝     ╚═╝╚═╝     ╚══════╝╚══════╝╚═╝  ╚═╝  ╚═══╝  ╚══════╝╚═╝  ╚═╝</span><br><span class="line"></span><br><span class="line">                                                                     Version:  v2<span class="number">.16</span><span class="number">.3</span></span><br><span class="line"></span><br><span class="line">需要手动操作的内容如下：</span><br><span class="line"></span><br><span class="line">    是否需要自定义 docker 存储目录, 默认将使用目录 /<span class="keyword">var</span>/lib/docker? (y/n)  (默认为 n): n</span><br><span class="line"></span><br><span class="line">    是否需要支持 IPv6? (y/n)  (默认为 n): n</span><br><span class="line"></span><br><span class="line">   是否需要自定义持久化存储, 默认将使用目录 /opt/jumpserver? (y/n)  (默认为 n): <span class="function">y</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   Persistent storage <span class="title">directory</span> <span class="params">(<span class="keyword">default</span> /opt/jumpserver)</span>: /data/jumpserver</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   是否使用外部 MySQL? <span class="params">(y/n)</span>  <span class="params">(默认为 n)</span>: y</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   请输入 MySQL 的主机地址 <span class="params">(无默认值)</span>: 10.0.77.38</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   请输入 MySQL 的端口 <span class="params">(默认为<span class="number">3306</span>)</span>: 3306</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   请输入 MySQL 的数据库<span class="params">(事先做好授权)</span> <span class="params">(默认为jumpserver)</span>: jumpserver</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   请输入 MySQL 的用户名 <span class="params">(无默认值)</span>: jumpserver</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   请输入 MySQL 的密码 <span class="params">(无默认值)</span>: z&amp;cemb2iqYPiC$N3</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    是否使用外部 Redis? <span class="params">(y/n)</span>  <span class="params">(默认为 n)</span>: n</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    是否需要配置 JumpServer 对外访问端口? <span class="params">(y/n)</span>  <span class="params">(默认为 n)</span>: n</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><p>三，修改docker数据目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#默认docker安装的数据目录为/var/lib/docker，需要迁移到数据盘/data/目录下</span><br><span class="line"></span><br><span class="line">mv -f /var/lib/docker /data/docker</span><br><span class="line"></span><br><span class="line">ln -sf /data/docker /var/lib/docker</span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>四，启动服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 安装完成后配置文件 /opt/jumpserver/config/config.txt</span><br><span class="line"></span><br><span class="line">cd /data/jumpserver-installer-v2.16.3</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line"></span><br><span class="line">./jmsctl.sh start</span><br><span class="line"></span><br><span class="line"># 其他常用操作</span><br><span class="line"></span><br><span class="line"># 停止</span><br><span class="line"></span><br><span class="line">./jmsctl.sh down</span><br><span class="line"></span><br><span class="line"># 卸载</span><br><span class="line"></span><br><span class="line">./jmsctl.sh uninstall</span><br><span class="line"></span><br><span class="line"># 帮助</span><br><span class="line"></span><br><span class="line">./jmsctl.sh –h</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>五，登录验证服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">登录：localhost</span><br><span class="line"></span><br><span class="line">默认账号：admin   默认密码：admin</span><br></pre></td></tr></table></figure><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E5%A0%A1%E5%9E%92%E6%9C%BA1.png" alt="流程"></p><p>六，部署高可用jumpserver服务</p><p>另外一台服务器上部署jumpserver服务，连接第一台服务器得mysql数据库</p><p>部署步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 ，下载安装包</span><br><span class="line"></span><br><span class="line">cd /data</span><br><span class="line"></span><br><span class="line">wget https://github.com/jumpserver/installer/releases/download/v2.16.3/jumpserver-installer-v2.16.3.tar.gz</span><br><span class="line"></span><br><span class="line">tar -xf jumpserver-installer-v2.16.3.tar.gz</span><br><span class="line"></span><br><span class="line">cd jumpserver-installer-v2.16.3</span><br></pre></td></tr></table></figure><p>2 ，安装服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@jumpserver-slave /data/jumpserver-installer-v2.16.3]$ ./jmsctl.sh install</span><br><span class="line"></span><br><span class="line">是否需要自定义 docker 存储目录, 默认将使用目录 /var/lib/docker? (y/n)  (默认为 n): n</span><br><span class="line"></span><br><span class="line">是否需要支持 IPv6? (y/n)  (默认为 n): n</span><br><span class="line"></span><br><span class="line">是否需要自定义持久化存储, 默认将使用目录 /opt/jumpserver? (y/n)  (默认为 n): y</span><br><span class="line"></span><br><span class="line">   Persistent storage directory (default /opt/jumpserver): /data/jumpserver</span><br><span class="line"></span><br><span class="line">是否使用外部 MySQL? (y/n)  (默认为 n): y</span><br><span class="line"></span><br><span class="line">   请输入 MySQL 的主机地址 (无默认值): 10.0.77.38</span><br><span class="line"></span><br><span class="line">   请输入 MySQL 的端口 (默认为3306): 3306</span><br><span class="line"></span><br><span class="line">   请输入 MySQL 的数据库(事先做好授权) (默认为jumpserver): jumpserver</span><br><span class="line"></span><br><span class="line">   请输入 MySQL 的用户名 (无默认值): jumpserver</span><br><span class="line"></span><br><span class="line">   请输入 MySQL 的密码 (无默认值): z&amp;cemb2iqYPiC$N3</span><br></pre></td></tr></table></figure><p>3 ，修改 docker 默认数据目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mv -f /var/lib/docker /data/docker</span><br><span class="line"></span><br><span class="line">ln -sf /data/docker /var/lib/docker</span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>4 ，启动服务</p><h1 id="安装完成后配置文件-opt-jumpserver-config-config-txt"><a href="#安装完成后配置文件-opt-jumpserver-config-config-txt" class="headerlink" title="安装完成后配置文件 /opt/jumpserver/config/config.txt"></a>安装完成后配置文件 /opt/jumpserver/config/config.txt</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/jumpserver-installer-v2.16.3</span><br></pre></td></tr></table></figure><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./jmsctl.sh start</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;临时高可用架构方案如下&quot;&gt;&lt;a href=&quot;#临时高可用架构方案如下&quot; class=&quot;headerlink&quot; title=&quot;临时高可用架构方案如下&quot;&gt;&lt;/a&gt;临时高可用架构方案如下&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://zkk-1300025204.c</summary>
      
    
    
    
    
    <category term="堡垒机" scheme="https://zkkget.github.io/tags/%E5%A0%A1%E5%9E%92%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>还在手动维护Yapi?</title>
    <link href="https://zkkget.github.io/2022/01/06/%E8%BF%98%E5%9C%A8%E6%89%8B%E5%8A%A8%E7%BB%B4%E6%8A%A4Yapi/"/>
    <id>https://zkkget.github.io/2022/01/06/%E8%BF%98%E5%9C%A8%E6%89%8B%E5%8A%A8%E7%BB%B4%E6%8A%A4Yapi/</id>
    <published>2022-01-06T08:56:46.000Z</published>
    <updated>2022-03-02T01:56:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【置顶】-留言请点击友链留言室或者在文章底部留言"><a href="#【置顶】-留言请点击友链留言室或者在文章底部留言" class="headerlink" title="【置顶】 留言请点击友链留言室或者在文章底部留言"></a>【置顶】 留言请点击友链留言室或者在文章底部留言</h1><p>因前后端人员通过接口定义字段，返回值等对接时非常苦恼，没有一个很好的平台维护，后端每次迭代都要写开发文档，需求变化，多系统联调等，给前后端联调造成阻塞。</p><h1 id="1、后端开发文档编写规范"><a href="#1、后端开发文档编写规范" class="headerlink" title="1、后端开发文档编写规范"></a>1、后端开发文档编写规范</h1><p>1）文档模板统一使用：xxx系统开发文档-模板.docx<br>2）后端每次迭代需要编写开发文档，并进行技术评审（前端、后端、测试、产品参与）<br>3）文档的命名方式：《产品名称-V版本号-设计开发文档-编写人》<br>4) 文档统一保存<br>5）后端必须在编写业务代码前，优先设计API（Swagger），并提供给测试和前端，最大化并行迭代。<br>6）允许特殊情况延期提供API，如：需求变化、多系统联调等。</p><h1 id="Swagger使用规范"><a href="#Swagger使用规范" class="headerlink" title="Swagger使用规范"></a>Swagger使用规范</h1><p>1）后端开发人员必须使用Swagger<br>2）API接口定义参数时，要明确备注信息和是否必须，样例如下：<br>public class SupplierReq {<br>   @NotEmpty(message = “姓名必填”)<br>   @ApiModelProperty(value = “员工姓名”, required = true)<br>   private String name;</p><p>   @Size(min = 6, max = 64, message = “手机号或工号不能为空，长度介于6~64之间”)<br>   @ApiModelProperty(value = “手机号”, required = true)<br>   private String telephone;<br>}<br>3）API定义业务方法时(Controller层)，使用Swagger注解@ApiOperation明确业务方法信息，样例如下：<br>@PostMapping(“/updateCatRateLimit”)<br>@ApiOperation(“设置监控项流控QPS”)<br>public CommonResponse<String> updateCatRateLimit(@RequestBody Req req) {<br>    return super.visit(() -&gt; mcenterRateLimitService.updateCatRateLimit(req));<br>}<br>具体swagger详细接口请参考：<a href="https://swagger.io/docs/">https://swagger.io/docs/</a></p><h1 id="后端接口输出太慢？"><a href="#后端接口输出太慢？" class="headerlink" title="后端接口输出太慢？"></a>后端接口输出太慢？</h1><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/image.png" alt="流程"><br>当接到新需求，进行产品需求评审–&gt;技术文档编写–&gt;数据库设计–&gt;业务梳理–&gt;测试用例评审等等流程下来，很难在短时间内给出接口，但即便如此，我也没听说过谁会因为后端给不出接口耽误前端开发进度<br>为了更快速的输出接口等响应，推荐api管理工具APIpost,swagger,Yapi等~<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/apipost.png" alt="apipost"></p><h1 id="Swagger遇见Yapi"><a href="#Swagger遇见Yapi" class="headerlink" title="Swagger遇见Yapi"></a>Swagger遇见Yapi</h1><h3 id="一-YapiUpload"><a href="#一-YapiUpload" class="headerlink" title="一 YapiUpload"></a>一 YapiUpload</h3><p>1、在IDEA-&gt;Preferences-&gt;Plugins中 输入YapiUpload插件，点击Install，重启IDEA后可以使用。<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/a4a92829-a7d3-4758-ad34-6b715fd4bd05.png" alt="流程"><br>2、配置项目<br>在我们已经从git同步的项目，打开.idea文件夹下的misc.xml，添加如下配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;component name=<span class="string">&quot;yapi&quot;</span>&gt;</span><br><span class="line">  &lt;option name=<span class="string">&quot;projectToken&quot;</span>&gt;yapi中获取项目token&lt;/option&gt;</span><br><span class="line">  &lt;option name=<span class="string">&quot;projectId&quot;</span>&gt;项目ID&lt;/option&gt;</span><br><span class="line">  &lt;option name=<span class="string">&quot;yapiUrl&quot;</span>&gt;http:<span class="comment">//mock.xxx.com&lt;/option&gt;</span></span><br><span class="line">  &lt;option name=<span class="string">&quot;projectType&quot;</span>&gt;api&lt;/option&gt;</span><br><span class="line">&lt;/component&gt;</span><br></pre></td></tr></table></figure><p>完整配置如下所示:<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E5%AE%8C%E6%95%B4%E9%85%8D%E7%BD%AE.png" alt="流程"><br> 获取配置信息:<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/%E8%8E%B7%E5%8F%96%E9%85%8D%E7%BD%AE.png" alt="流程"><br>3、接口上传<br>这一步是我们日常工作经常使用的操作，在我们编写好的接口类文件中，我们只需选中类名或者选中要上传接口的方法名右键选择“UploadToYapi”，两者的区别是，选择类名会上传此类中的全部接口，选择方法名仅上传单个接口，按需选择即可。参数非空需要加入 @NotNull或@NotEmpty。如果需要将接口传入指定目录下，需要在类上添加注释</p><p><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/c6418ea5-b7e2-41de-9582-3e82e717a8a9.png" alt="流程"></p><h3 id="批量上传"><a href="#批量上传" class="headerlink" title="批量上传"></a>批量上传</h3><p>将本地或者服务器环境生成的swagger.doc/swagger.json地址复制<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/import.png" alt="上传"><br>即可批量上传至Yapi~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【置顶】-留言请点击友链留言室或者在文章底部留言&quot;&gt;&lt;a href=&quot;#【置顶】-留言请点击友链留言室或者在文章底部留言&quot; class=&quot;headerlink&quot; title=&quot;【置顶】 留言请点击友链留言室或者在文章底部留言&quot;&gt;&lt;/a&gt;【置顶】 留言请点击友链留言</summary>
      
    
    
    
    
    <category term="Yapi" scheme="https://zkkget.github.io/tags/Yapi/"/>
    
  </entry>
  
  <entry>
    <title>RocketMq从入门到放弃</title>
    <link href="https://zkkget.github.io/2021/10/28/RocketMq%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    <id>https://zkkget.github.io/2021/10/28/RocketMq%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</id>
    <published>2021-10-28T07:46:52.000Z</published>
    <updated>2022-01-12T02:48:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【置顶】-留言请点击友链留言室或者在文章底部留言"><a href="#【置顶】-留言请点击友链留言室或者在文章底部留言" class="headerlink" title="【置顶】 留言请点击友链留言室或者在文章底部留言"></a>【置顶】 留言请点击友链留言室或者在文章底部留言</h1><h1 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h1><p><a href="http://rocketmq.apache.org/release_notes/release-notes-4.3.2/">http://rocketmq.apache.org/release_notes/release-notes-4.3.2/</a></p><h1 id="中文文档"><a href="#中文文档" class="headerlink" title="中文文档"></a>中文文档</h1><p><a href="https://rocketmq-1.gitbook.io/rocketmq-connector/quick-start/qian-qi-zhun-bei/dan-ji-huan-jing">https://rocketmq-1.gitbook.io/rocketmq-connector/quick-start/qian-qi-zhun-bei/dan-ji-huan-jing</a></p><h1 id="idea调试工具"><a href="#idea调试工具" class="headerlink" title="idea调试工具"></a>idea调试工具</h1><p><a href="https://www.jetbrains.com/help/idea/2019.1/debug-tool-window.html">https://www.jetbrains.com/help/idea/2019.1/debug-tool-window.html</a><br><a href="https://github.com/DillonDong/notes">https://github.com/DillonDong/notes</a></p><h1 id="Windows环境下安装RocketMQ"><a href="#Windows环境下安装RocketMQ" class="headerlink" title="Windows环境下安装RocketMQ"></a>Windows环境下安装RocketMQ</h1><p>一.预备环境<br>1.系统<br>Windows<br>2. 环境<br>JDK1.8、Maven、Git<br>二. RocketMQ部署<br>1.下载<br>1.1地址：<a href="http://rocketmq.apache.org/release_notes/release-notes-4.3.0/">http://rocketmq.apache.org/release_notes/release-notes-4.3.0/</a><br>1.2选择‘Binary’进行下载<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/rocktmq1.jpg" alt="rocketMq"><br>1.3解压已下载工程<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/rocktmq2.jpg" alt="rocketMq"><br>2. 配置<br>2.1 系统环境变量配置<br>变量名：ROCKETMQ_HOME<br>变量值：MQ解压路径\MQ文件夹名<br>eg、ROCKETMQ_HOME=D:\dev\rocketmq-all-4.3.0-bin-release<br>3. 启动<br>3.1 启动NAMESERVER<br>Cmd命令框执行进入至‘MQ文件夹\bin’下，然后执行‘start mqnamesrv.cmd’，启动NAMESERVER。成功后会弹出提示框，此框勿关闭。<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/rocktmq3.jpg" alt="rocketMq"><br>3.2 启动BROKER<br>Cmd命令框执行进入至‘MQ文件夹\bin’下，然后执行‘start mqbroker.cmd -n 127.0.0.1:9876 autoCreateTopicEnable=true’，启动BROKER。成功后会弹出提示框，此框勿关闭</p><ol start="2"><li>编译启动<br>用CMD进入‘\rocketmq-externals\rocketmq-console’文件夹，执行‘mvn clean package -Dmaven.test.skip=true’，编译生成。<br>编译成功之后，Cmd进入‘target’文件夹，执行‘java -jar rocketmq-console-ng-1.0.0.jar’，启动‘rocketmq-console-ng-1.0.0.jar’。</li><li>测试<br>浏览器中输入‘127.0.0.1:配置端口’，成功后即可查看。<br>eg：<a href="http://127.0.0.1:8088/">http://127.0.0.1:8088</a><br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/rocketmq4.jpg" alt="rocketMq"></li></ol><h1 id="基本配置项"><a href="#基本配置项" class="headerlink" title="基本配置项"></a>基本配置项</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server.contextPath=</span><br><span class="line">server.port=8088</span><br><span class="line">#spring.application.index=true</span><br><span class="line">spring.application.name=rocketmq-console</span><br><span class="line">spring.http.encoding.charset=UTF-8</span><br><span class="line">spring.http.encoding.enabled=true</span><br><span class="line">spring.http.encoding.force=true</span><br><span class="line">logging.config=classpath:logback.xml</span><br><span class="line">#if this value is empty,use env value rocketmq.config.namesrvAddr  NAMESRV_ADDR | now, you can set it in ops page.default localhost:9876</span><br><span class="line">rocketmq.config.namesrvAddr=127.0.0.1:9876</span><br><span class="line">#if you use rocketmq version &lt; 3.5.8, rocketmq.config.isVIPChannel should be false.default true</span><br><span class="line">rocketmq.config.isVIPChannel=</span><br><span class="line">#rocketmq-console&#x27;s data path:dashboard/monitor</span><br><span class="line">rocketmq.config.dataPath=/tmp/rocketmq-console/data</span><br><span class="line">#set it false if you don&#x27;t want use dashboard.default true</span><br><span class="line">rocketmq.config.enableDashBoardCollect=true</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="java整合MQ"><a href="#java整合MQ" class="headerlink" title="java整合MQ"></a>java整合MQ</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RockermqproducerApplicationTests</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;apache.rocketmq.producer.producerGroup&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String producerGroup;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * NameServer 地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;apache.rocketmq.namesrvAddr&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String namesrvAddr;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//生产者的组名</span></span><br><span class="line">        DefaultMQProducer producer=<span class="keyword">new</span> DefaultMQProducer(producerGroup);</span><br><span class="line">        <span class="comment">//指定NameServer地址，多个地址以 ; 隔开</span></span><br><span class="line">        producer.setNamesrvAddr(namesrvAddr);</span><br><span class="line">        <span class="comment">//消息发送失败重试次数</span></span><br><span class="line">        producer.setRetryTimesWhenSendFailed(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//异步发送失败重试次数</span></span><br><span class="line">        producer.setRetryTimesWhenSendAsyncFailed(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//消息没有发送成功，是否发送到另外一个Broker中</span></span><br><span class="line">        producer.setRetryAnotherBrokerWhenNotStoreOK(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * Producer对象在使用之前必须要调用start初始化，初始化一次即可</span></span><br><span class="line"><span class="comment">             * 注意：切记不可以在每次发送消息时，都调用start方法</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            producer.start();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">10000</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Message msg=<span class="keyword">new</span> Message(<span class="string">&quot;topic_example_java&quot;</span>,<span class="string">&quot;TagA&quot;</span>,(<span class="string">&quot;Hello Java Demo RocketMQ:&quot;</span>+i).getBytes(Charset.defaultCharset()));</span><br><span class="line">                SendResult result=producer.send(msg);</span><br><span class="line">                System.out.println(<span class="string">&quot;消息发送结果：&quot;</span>+result);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            producer.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>消息消费顺序：全局消息顺序<br>  局部消息顺序</p><p>保证局部消息的顺序<br>只在一个队列保证一个人消费<br>消费时，同一个OrderId获取到的肯定是同一个队列。</p><p>消息存储结构</p><p>刷盘机制：同步刷盘<br>异步刷盘<br>RocketMQ的消息是存储到磁盘上的，这样既能保证断电后恢复， 又可以让存储的消息量超出内存的限制。RocketMQ为了提高性能，会尽可能地保证磁盘的<br>顺序写。消息在通过Producer写入RocketMQ的时 候，有两种写磁盘方式，分布式同步刷盘和异步刷盘<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/rocketmq5.jpg" alt="rocketMq"></p><p>顺序消息消费及时监控处理<br>对于顺序消息，当消费者消费消息失败后，消息队列 RocketMQ 会自动不断进行消息重试（每次间隔时间为 1 秒），这时，应用会出现消息消费被阻塞的情况。因此，在使用顺序消息时，务必保证应用能够及时监控并处理消费失败的情况，避免阻塞现象的发生<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/rocketmq6.jpg" alt="rocketMq"></p><p>消费幂等：若某操作执行多次或一次对系统产生的结果是相同的，则称该操作是幂等的<br>例如支付场景，因为网络原因导致二次消费，会不会造成重复扣款</p><blockquote><p>RocketMq的文件存储系统有两点优化以保证性能：</p></blockquote><blockquote><p>消息存储（顺序写）：RocketMQ的消息用顺序写,保证了消息存储的速度。目前的高性能磁盘，顺序写速度可以达到600MB/s，<br>超过了一般网卡的传输速度，但是磁盘随机写的速度只有大概100KB/s<br>消息发送（零拷贝）：将本机磁盘文件的内容发送到客户端需要进行多次复制，比如从磁盘复制数据到内核态内存；从内核态内存复制到用户态内存；从用户态内存复制到网络驱动，&gt;最后从网络驱动复制到网卡中。RocketMq采用Java中零拷贝的技术，让从内核态内存复制到用户态内存这一步省略，直接赋值到网络驱动中<br>零拷贝技术有个限制是不能超过2G，所以RocketMQ默认设置单个CommitLog日志数据文件为1G</p></blockquote><p>RokectMq架构<br><img src="https://zkk-1300025204.cos.ap-nanjing.myqcloud.com/rocketmq7.jpg" alt="rocketMq"></p><h1 id="存储结构是什么样的？"><a href="#存储结构是什么样的？" class="headerlink" title="存储结构是什么样的？"></a>存储结构是什么样的？</h1><p>RocketMQ消息的存储是由ConsumeQueue和CommitLog配合完成的</p><p>CommitLog：消息真正的物理存储文件是CommitLog，默认一个文件一个G，存储的是Topic，QueueId和Message，一个存储满了会自动创建一个新的。<br>ConsumeQueue：是消息的逻辑队列，类似数据库的索引文件，存储的是指向物理存储的地址，为了加快消息的读取速度。消费者消费某条消息时，先查询索引获取CommitLog的对应的物理地址。每个Topic下的每个Message Queue都有一个对应的ConsumeQueue文件，文件很小，通常会加载到内存中。如果该文件丢失或者损坏，可以通过CommitLog恢复<br>IndexFile：也是个索引文件，为了消息查询提供了一种通过key或时间区间来查询消息的方法，这种通过IndexFile来查找消息的方法不影响发送与消费消息的主流程</p><h1 id="如何保证消息不丢失？"><a href="#如何保证消息不丢失？" class="headerlink" title="如何保证消息不丢失？"></a>如何保证消息不丢失？</h1><p>RocketMq提供消息持久化机制，消息的刷盘策略分为同步刷盘和异步刷盘。同步刷盘即刷盘成功后再返回一个成功信息，能够保证数据一定保存成功，但是会降低系统吞吐量，异步刷盘与同步刷盘相反，我一般会采用同步刷盘的策略来保证消息不会丢失。<br>RocketMq采用的文件系统存储而不是关系型数据库存储，因为在一般情况下文件系统的性能是比数据库性能高的<br>而RocketMq为了提高文件系统的读写的高性能，做了两点优化。第一点是采用顺序写的方式，这样可以大大提高磁盘写的性能。第二点采用了零拷贝，原来的文件读取流程是：从磁盘复制数据到内核态内存；从内核态内存复制到用户态内存；从用户态内存复制到网络驱动，最后从网络驱动复制到网卡中发送，零拷贝则省去了从内核态内存复制到用户态内存的这一过程，提高了读取的性能，但是零拷贝对文件大小有要求，所以RocketMq的持久化文件<font color=#0099ff size=3 face="黑体">commitlog默认为1G</font>。<br>commitlog是存储了RocketMq的消息等核心信息，除此之外，还提供可一个ConsumeQueue作为持久化文件的索引，提高查询的效率，一般文件比较小，都是加载在内存中。除了ConsumeQueue之外，还会存储一个IndexFile文件，用来提供针对某一个key或者时间区间的查询。</p><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><h2 id="Producer负载均衡"><a href="#Producer负载均衡" class="headerlink" title="Producer负载均衡"></a>Producer负载均衡</h2><p>Producer端，每个实例在发消息的时候，默认会轮询所有的message queue发送，以达到让消息平均落在不同的queue上。而由于queue可以散落在不同的broker，所以消息就发送到不同的broker下</p><h2 id="Consumer负载均衡"><a href="#Consumer负载均衡" class="headerlink" title="Consumer负载均衡"></a>Consumer负载均衡</h2><p>如果consumer实例的数量比message queue的总数量还多的话，多出来的consumer实例将无法分到queue，也就无法消费到消息，也就无法起到分摊负载的作用了。所以需要控制让queue的总数量大于等于consumer的数量。</p><p>消费者的集群模式–启动多个消费者就可以保证消费者的负载均衡（均摊队列）</p><p>默认使用的是均摊队列：会按照queue的数量和实例的数量平均分配queue给每个实例，这样每个消费者可以均摊消费的队列</p><h1 id="消息重试机制"><a href="#消息重试机制" class="headerlink" title="消息重试机制"></a>消息重试机制</h1><h2 id="1-顺序消息的重试"><a href="#1-顺序消息的重试" class="headerlink" title="1. 顺序消息的重试"></a>1. 顺序消息的重试</h2><p>对于顺序消息，当消费者消费消息失败后，消息队列 RocketMQ 会自动不断进行消息重试（每次间隔时间为 1 秒），这时，应用会出现消息消费被阻塞的情况。</p><p>因此，在使用顺序消息时，务必保证应用能够及时监控并处理消费失败的情况，避免阻塞现象的发生。</p><h2 id="2-无序消息的重试"><a href="#2-无序消息的重试" class="headerlink" title="2. 无序消息的重试"></a>2. 无序消息的重试</h2><p>对于无序消息（普通、定时、延时、事务消息），当消费者消费消息失败时，您可以通过设置返回状态达到消息重试的结果。</p><p>无序消息的重试只针对集群消费方式生效；广播方式不提供失败重试特性，即消费失败后，失败消息不再重试，继续消费新的消息。</p><p>消息队列 RocketMQ 默认允许每条消息最多重试 16 次，将会在接下来的 4 小时 46 分钟之内进行 16 次重试，如果依然失败就会进入死信队列。</p><p>一条消息无论重试多少次，这些重试消息的 Message ID 不会改变。</p><p>也可以通过配置，让其不再重试，但是不建议这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageListenerImpl</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Action <span class="title">consume</span><span class="params">(Message message, ConsumeContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            doConsumeMessage(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="comment">//捕获消费逻辑中的所有异常，并返回 Action.CommitMessage;</span></span><br><span class="line">            <span class="keyword">return</span> Action.CommitMessage;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//消息处理正常，直接返回 Action.CommitMessage;</span></span><br><span class="line">        <span class="keyword">return</span> Action.CommitMessage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="消费幂等"><a href="#消费幂等" class="headerlink" title="消费幂等"></a>消费幂等</h1><p>消息队列 RocketMQ 消费者在接收到消息以后，有必要根据业务上的唯一 Key 对消息做幂等处理的必要性。</p><h2 id="1-什么时候产生重复消息？"><a href="#1-什么时候产生重复消息？" class="headerlink" title="1. 什么时候产生重复消息？"></a>1. 什么时候产生重复消息？</h2><p>在互联网应用中，尤其在网络不稳定的情况下，消息队列 RocketMQ 的消息有可能会出现重复，这个重复简单可以概括为以下情况：</p><p>发送时消息重复</p><p>当一条消息已被成功发送到服务端并完成持久化，此时出现了网络闪断或者客户端宕机，导致服务端对客户端应答失败。 如果此时生产者意识到消息发送失败并尝试再次发送消息，消费者后续会收到两条内容相同并且 Message ID 也相同的消息。</p><p>消费时消息重复</p><p>消息消费的场景下，消息已投递到消费者并完成业务处理，当客户端给服务端反馈应答的时候网络闪断。 为了保证消息至少被消费一次，消息队列 RocketMQ 的服务端将在网络恢复后再次尝试投递之前已被处理过的消息，消费者后续会收到两条内容相同并且 Message ID 也相同的消息。</p><p>负载均衡时消息重复（包括但不限于网络抖动、Broker 重启以及订阅方应用重启）</p><p>当消息队列 RocketMQ 的 Broker 或客户端重启、扩容或缩容时，会触发 Rebalance，此时消费者可能会收到重复消息。</p><h2 id="2-处理方式"><a href="#2-处理方式" class="headerlink" title="2. 处理方式"></a>2. 处理方式</h2><p>因为 Message ID 有可能出现冲突（重复）的情况，所以真正安全的幂等处理，不建议以 Message ID 作为处理依据。 最好的方式是以业务唯一标识作为幂等处理的关键依据，而业务的唯一标识可以通过消息 Key 进行设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Message message = <span class="keyword">new</span> Message();</span><br><span class="line">message.setKey(<span class="string">&quot;ORDERID_100&quot;</span>);</span><br><span class="line">SendResult sendResult = producer.send(message);</span><br></pre></td></tr></table></figure><p>订阅方收到消息时可以根据消息的 Key 进行幂等处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">consumer.subscribe(<span class="string">&quot;ons_test&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Action <span class="title">consume</span><span class="params">(Message message, ConsumeContext context)</span> </span>&#123;</span><br><span class="line">        String key = message.getKey()</span><br><span class="line">        <span class="comment">// 根据业务唯一标识的 key 做幂等处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>接下来，就需要根据业务进行处理：</p><p>拿个数据要写库，先根据主键查一下，如果这数据都有了，你就别插入了，只需要更新一下；或者可以设置一个唯一索引<br>如果是写Redis，每次操作都是set，天然可以保证幂等性<br>如果不是上面两种场景，需要让生产者发送每条数据的时候，里面加一个全局唯一的id，类似订单id之类的东西；<strong>消费者需要先根据这个id去比如redis里查一下，之前消费过吗？</strong>如果没有消费过，你就处理，然后这个id写redis。如果消费过了，那你就别处理了，保证别重复处理相同的消息即可。<br>如何解决消息积压的问题？<br>这个可能出现在消费端出了问题，不消费了，或者消费的极其极其慢，导致大量的消息无法消费，最后消息队列集群的磁盘都快写满了</p><p>首先最重要的就是修复消费者，接着最大的问题就是在消费者重启后，如何快速处理积压的消息？</p><p>新建一个topic，临时建立好原先10倍或者20倍的queue数量<br>接着扩容临时的consumer，此时消费速度是原来的十几倍<br>等快速消费完积压数据之后，得恢复原先部署架构，重新用原先的consumer机器来消费消息</p><h1 id="如何设计一个Mq？"><a href="#如何设计一个Mq？" class="headerlink" title="如何设计一个Mq？"></a>如何设计一个Mq？</h1><p>是上面内容的一个总结，需要分点进行设计</p><p>扩展性</p><p>生产者的扩展性<br>消息队列的扩展性<br>消费者的扩展性<br>高可用性</p><p>如何设计刷盘策略？<br>如何保证消息0丢失？<br>如何保证在其中有机器宕机时，保障服务可用？<br>消息重试机制</p><p>当一个消息没有被消费时，如何进行重试，保证消息一定被消费？<br>当消费端不可用时，如何保证消费端重启后，依然可以消费消息？<br>心跳检测机制</p><p>如何检测生产者、消息队列和消费者是否宕机？<br>负载均衡模式</p><p>如何做到消息生产以及消费的负载均衡？<br>顺序消息</p><p>如何实现顺序消息？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【置顶】-留言请点击友链留言室或者在文章底部留言&quot;&gt;&lt;a href=&quot;#【置顶】-留言请点击友链留言室或者在文章底部留言&quot; class=&quot;headerlink&quot; title=&quot;【置顶】 留言请点击友链留言室或者在文章底部留言&quot;&gt;&lt;/a&gt;【置顶】 留言请点击友链留言</summary>
      
    
    
    
    <category term="MQ" scheme="https://zkkget.github.io/categories/MQ/"/>
    
    
    <category term="MQ" scheme="https://zkkget.github.io/tags/MQ/"/>
    
  </entry>
  
</feed>
